
wireless_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000916  000009aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000916  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800108  00800108  000009b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010fc  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003b6  00000000  00000000  00001c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006dc  00000000  00000000  00001ffe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f0  00000000  00000000  000026dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058b  00000000  00000000  00002acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a06  00000000  00000000  00003057  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00004a5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__ctors_end>
   4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  10:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  14:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  18:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  1c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  20:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  24:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  28:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__vector_10>
  2c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__vector_11>
  30:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  34:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  38:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  3c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  40:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  44:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  48:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  4c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  54:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  58:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  5c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  60:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  64:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  68:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  6c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  70:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  74:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_29>
  78:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  7c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  80:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  84:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  88:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  8c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  90:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  94:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  98:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  9c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>

000000ac <__trampolines_end>:
  ac:	00 01       	movw	r0, r0
  ae:	00 00       	nop
  b0:	43 01       	movw	r8, r6
  b2:	12 00       	.word	0x0012	; ????
  b4:	02 00       	.word	0x0002	; ????
  b6:	00 00       	nop
  b8:	01 43       	sbci	r16, 0x31	; 49
  ba:	00 03       	mulsu	r16, r16
  bc:	00 00       	nop
  be:	fc 00       	.word	0x00fc	; ????
  c0:	04 01       	movw	r0, r8
  c2:	03 09       	sbc	r16, r3
  c4:	04 e8       	ldi	r16, 0x84	; 132
  c6:	00 12       	cpse	r0, r16
  c8:	02 03       	mulsu	r16, r18
  ca:	09 04       	cpc	r0, r9
  cc:	e0 00       	.word	0x00e0	; ????
  ce:	06 03       	mulsu	r16, r22
  d0:	03 09       	sbc	r16, r3
  d2:	04 d6       	rcall	.+3080   	; 0xcdc <__stack+0x1dd>
  d4:	00 08       	sbc	r0, r0

000000d6 <string3>:
  d6:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000000e0 <string2>:
  e0:	06 03 4d 00 32 00 00 00                             ..M.2...

000000e8 <string1>:
  e8:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
  f8:	65 00 00 00                                         e...

000000fc <string0>:
  fc:	04 03 09 04                                         ....

00000100 <config1_descriptor>:
 100:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 110:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 120:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 130:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 140:	40 00 00                                            @..

00000143 <device_descriptor>:
 143:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 153:	03 01                                               ..

00000155 <endpoint_config_table>:
 155:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

00000160 <__ctors_end>:
 160:	11 24       	eor	r1, r1
 162:	1f be       	out	0x3f, r1	; 63
 164:	cf ef       	ldi	r28, 0xFF	; 255
 166:	da e0       	ldi	r29, 0x0A	; 10
 168:	de bf       	out	0x3e, r29	; 62
 16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
 16c:	11 e0       	ldi	r17, 0x01	; 1
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b1 e0       	ldi	r27, 0x01	; 1
 172:	e6 e1       	ldi	r30, 0x16	; 22
 174:	f9 e0       	ldi	r31, 0x09	; 9
 176:	02 c0       	rjmp	.+4      	; 0x17c <__do_copy_data+0x10>
 178:	05 90       	lpm	r0, Z+
 17a:	0d 92       	st	X+, r0
 17c:	a8 30       	cpi	r26, 0x08	; 8
 17e:	b1 07       	cpc	r27, r17
 180:	d9 f7       	brne	.-10     	; 0x178 <__do_copy_data+0xc>

00000182 <__do_clear_bss>:
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	a8 e0       	ldi	r26, 0x08	; 8
 186:	b1 e0       	ldi	r27, 0x01	; 1
 188:	01 c0       	rjmp	.+2      	; 0x18c <.do_clear_bss_start>

0000018a <.do_clear_bss_loop>:
 18a:	1d 92       	st	X+, r1

0000018c <.do_clear_bss_start>:
 18c:	ad 30       	cpi	r26, 0x0D	; 13
 18e:	b2 07       	cpc	r27, r18
 190:	e1 f7       	brne	.-8      	; 0x18a <.do_clear_bss_loop>
 192:	0e 94 1b 01 	call	0x236	; 0x236 <main>
 196:	0c 94 89 04 	jmp	0x912	; 0x912 <_exit>

0000019a <__bad_interrupt>:
 19a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019e <init>:
************************************************************/

/* Initialization of Pins and System Clock */
void init(void){
	
	m_clockdivide(4); // Set to 1 MHz
 19e:	e1 e6       	ldi	r30, 0x61	; 97
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 e8       	ldi	r24, 0x80	; 128
 1a4:	80 83       	st	Z, r24
 1a6:	84 e0       	ldi	r24, 0x04	; 4
 1a8:	80 83       	st	Z, r24
 1aa:	08 95       	ret

000001ac <adc_start>:
	
}


/* Setup ADC */
void adc_start(void){
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
	
	clear(ADMUX,REFS1); // Set reference voltage to Vcc
 1b0:	ac e7       	ldi	r26, 0x7C	; 124
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
 1b4:	8c 91       	ld	r24, X
 1b6:	8f 77       	andi	r24, 0x7F	; 127
 1b8:	8c 93       	st	X, r24
	set(ADMUX,REFS0);
 1ba:	8c 91       	ld	r24, X
 1bc:	80 64       	ori	r24, 0x40	; 64
 1be:	8c 93       	st	X, r24
	
	clear(ADCSRA,ADPS2); // Set prescaler to /8
 1c0:	ea e7       	ldi	r30, 0x7A	; 122
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	8b 7f       	andi	r24, 0xFB	; 251
 1c8:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
 1ca:	80 81       	ld	r24, Z
 1cc:	82 60       	ori	r24, 0x02	; 2
 1ce:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
 1d0:	80 81       	ld	r24, Z
 1d2:	81 60       	ori	r24, 0x01	; 1
 1d4:	80 83       	st	Z, r24
	
	set(DIDR2,ADC8D); // Disable Digital input to: ADC8
 1d6:	cd e7       	ldi	r28, 0x7D	; 125
 1d8:	d0 e0       	ldi	r29, 0x00	; 0
 1da:	88 81       	ld	r24, Y
 1dc:	81 60       	ori	r24, 0x01	; 1
 1de:	88 83       	st	Y, r24
	set(DIDR2,ADC9D); // ADC9
 1e0:	88 81       	ld	r24, Y
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	88 83       	st	Y, r24
	set(DIDR2,ADC10D); // ADC10
 1e6:	88 81       	ld	r24, Y
 1e8:	84 60       	ori	r24, 0x04	; 4
 1ea:	88 83       	st	Y, r24
	
	sei(); // Enable global interrupts
 1ec:	78 94       	sei
	
	set(ADCSRA,ADIE); // Enable interrupt for when conversion is finished
 1ee:	80 81       	ld	r24, Z
 1f0:	88 60       	ori	r24, 0x08	; 8
 1f2:	80 83       	st	Z, r24
	
	clear(ADCSRA,ADATE); // Turn off 'free-running' mode
 1f4:	80 81       	ld	r24, Z
 1f6:	8f 7d       	andi	r24, 0xDF	; 223
 1f8:	80 83       	st	Z, r24
	
	clear(ADCSRB,MUX5); // Select ADC0 at pin F0
 1fa:	cb e7       	ldi	r28, 0x7B	; 123
 1fc:	d0 e0       	ldi	r29, 0x00	; 0
 1fe:	88 81       	ld	r24, Y
 200:	8f 7d       	andi	r24, 0xDF	; 223
 202:	88 83       	st	Y, r24
	clear(ADMUX,MUX2);
 204:	8c 91       	ld	r24, X
 206:	8b 7f       	andi	r24, 0xFB	; 251
 208:	8c 93       	st	X, r24
	clear(ADMUX,MUX1);
 20a:	8c 91       	ld	r24, X
 20c:	8d 7f       	andi	r24, 0xFD	; 253
 20e:	8c 93       	st	X, r24
	clear(ADMUX,MUX0);
 210:	8c 91       	ld	r24, X
 212:	8e 7f       	andi	r24, 0xFE	; 254
 214:	8c 93       	st	X, r24
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
 216:	80 81       	ld	r24, Z
 218:	80 68       	ori	r24, 0x80	; 128
 21a:	80 83       	st	Z, r24
	
	set(ADCSRA,ADSC); // Begin first conversion
 21c:	80 81       	ld	r24, Z
 21e:	80 64       	ori	r24, 0x40	; 64
 220:	80 83       	st	Z, r24
}
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	08 95       	ret

00000228 <usb_enable>:

/* Setup USB */
void usb_enable(void)
{
	m_usb_init();
 228:	0e 94 82 01 	call	0x304	; 0x304 <m_usb_init>
	while(!m_usb_isconnected());
 22c:	0e 94 9b 01 	call	0x336	; 0x336 <m_usb_isconnected>
 230:	88 23       	and	r24, r24
 232:	e1 f3       	breq	.-8      	; 0x22c <usb_enable+0x4>
}
 234:	08 95       	ret

00000236 <main>:
************************************************************/

int main(void)
{
	/* Confirm Power */
	m_red(ON);
 236:	6e 9a       	sbi	0x0d, 6	; 13
 238:	76 98       	cbi	0x0e, 6	; 14

	/* Initializations */
	init();
 23a:	0e 94 cf 00 	call	0x19e	; 0x19e <init>
	adc_start();
 23e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <adc_start>
	usb_enable();
 242:	0e 94 14 01 	call	0x228	; 0x228 <usb_enable>

	/* Confirm successful initialization(s) */
	m_green(ON);
 246:	6a 9a       	sbi	0x0d, 2	; 13
 248:	72 98       	cbi	0x0e, 2	; 14
	
    while (1) 
    {}
 24a:	ff cf       	rjmp	.-2      	; 0x24a <main+0x14>

0000024c <adc_switch>:
}

/* Control ADC Pin Switching */
void adc_switch(void)
{
	switch(state){
 24c:	80 91 08 01 	lds	r24, 0x0108
 250:	90 91 09 01 	lds	r25, 0x0109
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	91 05       	cpc	r25, r1
 258:	61 f0       	breq	.+24     	; 0x272 <adc_switch+0x26>
 25a:	82 30       	cpi	r24, 0x02	; 2
 25c:	91 05       	cpc	r25, r1
 25e:	81 f0       	breq	.+32     	; 0x280 <adc_switch+0x34>
 260:	89 2b       	or	r24, r25
 262:	91 f4       	brne	.+36     	; 0x288 <adc_switch+0x3c>
		case 0:
			state = 1;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	90 93 09 01 	sts	0x0109, r25
 26c:	80 93 08 01 	sts	0x0108, r24
			break;
 270:	0b c0       	rjmp	.+22     	; 0x288 <adc_switch+0x3c>
		case 1:
			state = 2;
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	90 93 09 01 	sts	0x0109, r25
 27a:	80 93 08 01 	sts	0x0108, r24
			break;
 27e:	04 c0       	rjmp	.+8      	; 0x288 <adc_switch+0x3c>
		case 2:
			state = 0;
 280:	10 92 09 01 	sts	0x0109, r1
 284:	10 92 08 01 	sts	0x0108, r1
			break;
	}
	set(ADCSRA,ADSC); // Begin new conversion
 288:	ea e7       	ldi	r30, 0x7A	; 122
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	80 64       	ori	r24, 0x40	; 64
 290:	80 83       	st	Z, r24
 292:	08 95       	ret

00000294 <__vector_29>:

/************************************************************
Interrupts
************************************************************/

ISR(ADC_vect){
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
 29e:	2f 93       	push	r18
 2a0:	3f 93       	push	r19
 2a2:	4f 93       	push	r20
 2a4:	5f 93       	push	r21
 2a6:	6f 93       	push	r22
 2a8:	7f 93       	push	r23
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
 2ae:	af 93       	push	r26
 2b0:	bf 93       	push	r27
 2b2:	ef 93       	push	r30
 2b4:	ff 93       	push	r31
	OCR1A = 0x7A76/1023.0*ADC;
 2b6:	60 91 78 00 	lds	r22, 0x0078
 2ba:	70 91 79 00 	lds	r23, 0x0079
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 8e 03 	call	0x71c	; 0x71c <__floatunsisf>
 2c6:	2a e4       	ldi	r18, 0x4A	; 74
 2c8:	39 e2       	ldi	r19, 0x29	; 41
 2ca:	45 ef       	ldi	r20, 0xF5	; 245
 2cc:	51 e4       	ldi	r21, 0x41	; 65
 2ce:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__mulsf3>
 2d2:	0e 94 5f 03 	call	0x6be	; 0x6be <__fixunssfsi>
 2d6:	70 93 89 00 	sts	0x0089, r23
 2da:	60 93 88 00 	sts	0x0088, r22
	adc_switch();
 2de:	0e 94 26 01 	call	0x24c	; 0x24c <adc_switch>
}
 2e2:	ff 91       	pop	r31
 2e4:	ef 91       	pop	r30
 2e6:	bf 91       	pop	r27
 2e8:	af 91       	pop	r26
 2ea:	9f 91       	pop	r25
 2ec:	8f 91       	pop	r24
 2ee:	7f 91       	pop	r23
 2f0:	6f 91       	pop	r22
 2f2:	5f 91       	pop	r21
 2f4:	4f 91       	pop	r20
 2f6:	3f 91       	pop	r19
 2f8:	2f 91       	pop	r18
 2fa:	0f 90       	pop	r0
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	0f 90       	pop	r0
 300:	1f 90       	pop	r1
 302:	18 95       	reti

00000304 <m_usb_init>:
			case 27: UEDATX = *buffer++;
			case 26: UEDATX = *buffer++;
			case 25: UEDATX = *buffer++;
			case 24: UEDATX = *buffer++;
			case 23: UEDATX = *buffer++;
			case 22: UEDATX = *buffer++;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	80 93 d7 00 	sts	0x00D7, r24
			case 21: UEDATX = *buffer++;
 30a:	80 ea       	ldi	r24, 0xA0	; 160
 30c:	80 93 d8 00 	sts	0x00D8, r24
 310:	82 e1       	ldi	r24, 0x12	; 18
 312:	89 bd       	out	0x29, r24	; 41
			case 20: UEDATX = *buffer++;
 314:	09 b4       	in	r0, 0x29	; 41
 316:	00 fe       	sbrs	r0, 0
 318:	fd cf       	rjmp	.-6      	; 0x314 <m_usb_init+0x10>
 31a:	80 e9       	ldi	r24, 0x90	; 144
 31c:	80 93 d8 00 	sts	0x00D8, r24
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 320:	10 92 e0 00 	sts	0x00E0, r1
			case 24: UEDATX = *buffer++;
			case 23: UEDATX = *buffer++;
			case 22: UEDATX = *buffer++;
			case 21: UEDATX = *buffer++;
			case 20: UEDATX = *buffer++;
			case 19: UEDATX = *buffer++;
 324:	10 92 0c 01 	sts	0x010C, r1
 328:	10 92 0a 01 	sts	0x010A, r1
			case 18: UEDATX = *buffer++;
 32c:	8c e0       	ldi	r24, 0x0C	; 12
 32e:	80 93 e2 00 	sts	0x00E2, r24
 332:	78 94       	sei
 334:	08 95       	ret

00000336 <m_usb_isconnected>:
 336:	80 91 0c 01 	lds	r24, 0x010C
			case 17: UEDATX = *buffer++;
 33a:	08 95       	ret

0000033c <__vector_10>:
 33c:	1f 92       	push	r1
 33e:	0f 92       	push	r0
 340:	0f b6       	in	r0, 0x3f	; 63
 342:	0f 92       	push	r0
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
 344:	11 24       	eor	r1, r1
 346:	8f 93       	push	r24
 348:	9f 93       	push	r25
 34a:	ef 93       	push	r30
 34c:	ff 93       	push	r31
 34e:	e1 ee       	ldi	r30, 0xE1	; 225
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 350:	f0 e0       	ldi	r31, 0x00	; 0
			case 18: UEDATX = *buffer++;
			case 17: UEDATX = *buffer++;
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
			case 15: UEDATX = *buffer++;
 352:	80 81       	ld	r24, Z
 354:	10 82       	st	Z, r1
 356:	83 ff       	sbrs	r24, 3
 358:	11 c0       	rjmp	.+34     	; 0x37c <__vector_10+0x40>
 35a:	10 92 e9 00 	sts	0x00E9, r1
			case 14: UEDATX = *buffer++;
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	90 93 eb 00 	sts	0x00EB, r25
 364:	10 92 ec 00 	sts	0x00EC, r1
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 368:	92 e1       	ldi	r25, 0x12	; 18
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
			case 15: UEDATX = *buffer++;
			case 14: UEDATX = *buffer++;
			case 13: UEDATX = *buffer++;
 36a:	90 93 ed 00 	sts	0x00ED, r25
 36e:	98 e0       	ldi	r25, 0x08	; 8
 370:	90 93 f0 00 	sts	0x00F0, r25
			case 12: UEDATX = *buffer++;
 374:	10 92 0c 01 	sts	0x010C, r1
 378:	10 92 0a 01 	sts	0x010A, r1
 37c:	82 ff       	sbrs	r24, 2
 37e:	13 c0       	rjmp	.+38     	; 0x3a6 <__vector_10+0x6a>
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 380:	80 91 0c 01 	lds	r24, 0x010C
			case 16: UEDATX = *buffer++;
			case 15: UEDATX = *buffer++;
			case 14: UEDATX = *buffer++;
			case 13: UEDATX = *buffer++;
			case 12: UEDATX = *buffer++;
			case 11: UEDATX = *buffer++;
 384:	88 23       	and	r24, r24
 386:	79 f0       	breq	.+30     	; 0x3a6 <__vector_10+0x6a>
 388:	80 91 0b 01 	lds	r24, 0x010B
			case 10: UEDATX = *buffer++;
 38c:	88 23       	and	r24, r24
 38e:	59 f0       	breq	.+22     	; 0x3a6 <__vector_10+0x6a>
 390:	81 50       	subi	r24, 0x01	; 1
 392:	80 93 0b 01 	sts	0x010B, r24
 396:	81 11       	cpse	r24, r1
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 398:	06 c0       	rjmp	.+12     	; 0x3a6 <__vector_10+0x6a>
			case 14: UEDATX = *buffer++;
			case 13: UEDATX = *buffer++;
			case 12: UEDATX = *buffer++;
			case 11: UEDATX = *buffer++;
			case 10: UEDATX = *buffer++;
			case  9: UEDATX = *buffer++;
 39a:	84 e0       	ldi	r24, 0x04	; 4
 39c:	80 93 e9 00 	sts	0x00E9, r24
 3a0:	8a e3       	ldi	r24, 0x3A	; 58
 3a2:	80 93 e8 00 	sts	0x00E8, r24
			#endif
			case  8: UEDATX = *buffer++;
 3a6:	ff 91       	pop	r31
 3a8:	ef 91       	pop	r30
 3aa:	9f 91       	pop	r25
 3ac:	8f 91       	pop	r24
 3ae:	0f 90       	pop	r0
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 3b0:	0f be       	out	0x3f, r0	; 63
			case 11: UEDATX = *buffer++;
			case 10: UEDATX = *buffer++;
			case  9: UEDATX = *buffer++;
			#endif
			case  8: UEDATX = *buffer++;
			case  7: UEDATX = *buffer++;
 3b2:	0f 90       	pop	r0
 3b4:	1f 90       	pop	r1
 3b6:	18 95       	reti

000003b8 <__vector_11>:
 3b8:	1f 92       	push	r1
 3ba:	0f 92       	push	r0
			case  6: UEDATX = *buffer++;
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	0f 92       	push	r0
 3c0:	11 24       	eor	r1, r1
 3c2:	0f 93       	push	r16
 3c4:	1f 93       	push	r17
 3c6:	2f 93       	push	r18
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 3c8:	3f 93       	push	r19
			case  9: UEDATX = *buffer++;
			#endif
			case  8: UEDATX = *buffer++;
			case  7: UEDATX = *buffer++;
			case  6: UEDATX = *buffer++;
			case  5: UEDATX = *buffer++;
 3ca:	4f 93       	push	r20
 3cc:	5f 93       	push	r21
 3ce:	6f 93       	push	r22
 3d0:	7f 93       	push	r23
 3d2:	8f 93       	push	r24
			case  4: UEDATX = *buffer++;
 3d4:	9f 93       	push	r25
 3d6:	af 93       	push	r26
 3d8:	bf 93       	push	r27
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	ef 93       	push	r30
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 3e0:	ff 93       	push	r31
			case  8: UEDATX = *buffer++;
			case  7: UEDATX = *buffer++;
			case  6: UEDATX = *buffer++;
			case  5: UEDATX = *buffer++;
			case  4: UEDATX = *buffer++;
			case  3: UEDATX = *buffer++;
 3e2:	10 92 e9 00 	sts	0x00E9, r1
 3e6:	80 91 e8 00 	lds	r24, 0x00E8
 3ea:	83 ff       	sbrs	r24, 3
			case  2: UEDATX = *buffer++;
 3ec:	4c c1       	rjmp	.+664    	; 0x686 <__vector_11+0x2ce>
 3ee:	e1 ef       	ldi	r30, 0xF1	; 241
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	60 81       	ld	r22, Z
 3f4:	80 81       	ld	r24, Z
 3f6:	20 81       	ld	r18, Z
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 3f8:	90 81       	ld	r25, Z
			case  5: UEDATX = *buffer++;
			case  4: UEDATX = *buffer++;
			case  3: UEDATX = *buffer++;
			case  2: UEDATX = *buffer++;
			default:
			case  1: UEDATX = *buffer++;
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	39 2b       	or	r19, r25
 3fe:	40 81       	ld	r20, Z
 400:	90 81       	ld	r25, Z
 402:	50 e0       	ldi	r21, 0x00	; 0
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 404:	59 2b       	or	r21, r25
 406:	70 81       	ld	r23, Z
 408:	c0 81       	ld	r28, Z
 40a:	92 ef       	ldi	r25, 0xF2	; 242
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 40c:	90 93 e8 00 	sts	0x00E8, r25
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
 410:	86 30       	cpi	r24, 0x06	; 6
 412:	09 f0       	breq	.+2      	; 0x416 <__vector_11+0x5e>
 414:	58 c0       	rjmp	.+176    	; 0x4c6 <__vector_11+0x10e>
 416:	04 c0       	rjmp	.+8      	; 0x420 <__vector_11+0x68>
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
 418:	81 e2       	ldi	r24, 0x21	; 33
	return 0;
 41a:	80 93 eb 00 	sts	0x00EB, r24
int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 41e:	3a c1       	rjmp	.+628    	; 0x694 <__vector_11+0x2dc>
 420:	66 e0       	ldi	r22, 0x06	; 6
			if (UDFNUML == timeout) {
				transmit_previous_timeout = 1;
				return -1;
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
 422:	8c ea       	ldi	r24, 0xAC	; 172
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	fc 01       	movw	r30, r24
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
	return 0;
}
 428:	a5 91       	lpm	r26, Z+
 42a:	b4 91       	lpm	r27, Z
 42c:	2a 17       	cp	r18, r26
 42e:	3b 07       	cpc	r19, r27
 430:	11 f0       	breq	.+4      	; 0x436 <__vector_11+0x7e>
 432:	07 96       	adiw	r24, 0x07	; 7
 434:	23 c0       	rjmp	.+70     	; 0x47c <__vector_11+0xc4>
 436:	fc 01       	movw	r30, r24
 438:	32 96       	adiw	r30, 0x02	; 2
 43a:	a5 91       	lpm	r26, Z+
 43c:	b4 91       	lpm	r27, Z
 43e:	4a 17       	cp	r20, r26
 440:	5b 07       	cpc	r21, r27
 442:	11 f0       	breq	.+4      	; 0x448 <__vector_11+0x90>
 444:	07 96       	adiw	r24, 0x07	; 7
 446:	1a c0       	rjmp	.+52     	; 0x47c <__vector_11+0xc4>
				desc_val = pgm_read_word(list);
				if (desc_val != wIndex) {
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 448:	fc 01       	movw	r30, r24
 44a:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 44c:	45 91       	lpm	r20, Z+
 44e:	54 91       	lpm	r21, Z
				list += 2;
 450:	fc 01       	movw	r30, r24
 452:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 454:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
 456:	87 2f       	mov	r24, r23
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 45c:	8f 3f       	cpi	r24, 0xFF	; 255
 45e:	91 05       	cpc	r25, r1
 460:	19 f0       	breq	.+6      	; 0x468 <__vector_11+0xb0>
 462:	10 f0       	brcs	.+4      	; 0x468 <__vector_11+0xb0>
 464:	8f ef       	ldi	r24, 0xFF	; 255
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	82 17       	cp	r24, r18
 46a:	08 f4       	brcc	.+2      	; 0x46e <__vector_11+0xb6>
 46c:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 46e:	a8 ee       	ldi	r26, 0xE8	; 232
 470:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 472:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 474:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
 476:	c1 ef       	ldi	r28, 0xF1	; 241
 478:	d0 e0       	ldi	r29, 0x00	; 0
 47a:	03 c0       	rjmp	.+6      	; 0x482 <__vector_11+0xca>
 47c:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 47e:	99 f6       	brne	.-90     	; 0x426 <__vector_11+0x6e>
 480:	cb cf       	rjmp	.-106    	; 0x418 <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 482:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 484:	98 2f       	mov	r25, r24
 486:	95 70       	andi	r25, 0x05	; 5
 488:	e1 f3       	breq	.-8      	; 0x482 <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
 48a:	82 fd       	sbrc	r24, 2
 48c:	03 c1       	rjmp	.+518    	; 0x694 <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 48e:	32 2f       	mov	r19, r18
 490:	21 31       	cpi	r18, 0x11	; 17
 492:	08 f0       	brcs	.+2      	; 0x496 <__vector_11+0xde>
 494:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
 496:	33 23       	and	r19, r19
 498:	09 f4       	brne	.+2      	; 0x49c <__vector_11+0xe4>
 49a:	f9 c0       	rjmp	.+498    	; 0x68e <__vector_11+0x2d6>
 49c:	fa 01       	movw	r30, r20
 49e:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
 4a0:	94 91       	lpm	r25, Z
 4a2:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 4a4:	81 50       	subi	r24, 0x01	; 1
 4a6:	31 96       	adiw	r30, 0x01	; 1
 4a8:	81 11       	cpse	r24, r1
 4aa:	fa cf       	rjmp	.-12     	; 0x4a0 <__vector_11+0xe8>
 4ac:	8f ef       	ldi	r24, 0xFF	; 255
 4ae:	83 0f       	add	r24, r19
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	01 96       	adiw	r24, 0x01	; 1
 4b4:	48 0f       	add	r20, r24
 4b6:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 4b8:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 4ba:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 4bc:	21 11       	cpse	r18, r1
 4be:	e1 cf       	rjmp	.-62     	; 0x482 <__vector_11+0xca>
 4c0:	30 31       	cpi	r19, 0x10	; 16
 4c2:	f9 f2       	breq	.-66     	; 0x482 <__vector_11+0xca>
 4c4:	e7 c0       	rjmp	.+462    	; 0x694 <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 4c6:	85 30       	cpi	r24, 0x05	; 5
 4c8:	61 f4       	brne	.+24     	; 0x4e2 <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 4ca:	8e ef       	ldi	r24, 0xFE	; 254
 4cc:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 4d0:	e8 ee       	ldi	r30, 0xE8	; 232
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	80 81       	ld	r24, Z
 4d6:	80 ff       	sbrs	r24, 0
 4d8:	fd cf       	rjmp	.-6      	; 0x4d4 <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 4da:	20 68       	ori	r18, 0x80	; 128
 4dc:	20 93 e3 00 	sts	0x00E3, r18
			return;
 4e0:	d9 c0       	rjmp	.+434    	; 0x694 <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 4e2:	89 30       	cpi	r24, 0x09	; 9
 4e4:	09 f0       	breq	.+2      	; 0x4e8 <__vector_11+0x130>
 4e6:	35 c0       	rjmp	.+106    	; 0x552 <__vector_11+0x19a>
 4e8:	61 11       	cpse	r22, r1
 4ea:	cd c0       	rjmp	.+410    	; 0x686 <__vector_11+0x2ce>
			usb_configuration = wValue;
 4ec:	20 93 0c 01 	sts	0x010C, r18
			cdc_line_rtsdtr = 0;
 4f0:	10 92 0a 01 	sts	0x010A, r1
			transmit_flush_timer = 0;
 4f4:	10 92 0b 01 	sts	0x010B, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 4f8:	8e ef       	ldi	r24, 0xFE	; 254
 4fa:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 4fe:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
 500:	25 e5       	ldi	r18, 0x55	; 85
 502:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
 504:	c9 ee       	ldi	r28, 0xE9	; 233
 506:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
 508:	ab ee       	ldi	r26, 0xEB	; 235
 50a:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
 50c:	0c ee       	ldi	r16, 0xEC	; 236
 50e:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
 510:	6d ee       	ldi	r22, 0xED	; 237
 512:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 514:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
 516:	a9 01       	movw	r20, r18
 518:	4f 5f       	subi	r20, 0xFF	; 255
 51a:	5f 4f       	sbci	r21, 0xFF	; 255
 51c:	f9 01       	movw	r30, r18
 51e:	94 91       	lpm	r25, Z
				UECONX = en;
 520:	9c 93       	st	X, r25
				if (en) {
 522:	99 23       	and	r25, r25
 524:	61 f0       	breq	.+24     	; 0x53e <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
 526:	fa 01       	movw	r30, r20
 528:	44 91       	lpm	r20, Z
 52a:	f8 01       	movw	r30, r16
 52c:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
 52e:	f9 01       	movw	r30, r18
 530:	32 96       	adiw	r30, 0x02	; 2
 532:	94 91       	lpm	r25, Z
 534:	2d 5f       	subi	r18, 0xFD	; 253
 536:	3f 4f       	sbci	r19, 0xFF	; 255
 538:	fb 01       	movw	r30, r22
 53a:	90 83       	st	Z, r25
 53c:	01 c0       	rjmp	.+2      	; 0x540 <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
 53e:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 540:	8f 5f       	subi	r24, 0xFF	; 255
 542:	85 30       	cpi	r24, 0x05	; 5
 544:	39 f7       	brne	.-50     	; 0x514 <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 546:	ea ee       	ldi	r30, 0xEA	; 234
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	8e e1       	ldi	r24, 0x1E	; 30
 54c:	80 83       	st	Z, r24
        		UERST = 0;
 54e:	10 82       	st	Z, r1
			return;
 550:	a1 c0       	rjmp	.+322    	; 0x694 <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 552:	88 30       	cpi	r24, 0x08	; 8
 554:	81 f4       	brne	.+32     	; 0x576 <__vector_11+0x1be>
 556:	60 38       	cpi	r22, 0x80	; 128
 558:	09 f0       	breq	.+2      	; 0x55c <__vector_11+0x1a4>
 55a:	95 c0       	rjmp	.+298    	; 0x686 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 55c:	e8 ee       	ldi	r30, 0xE8	; 232
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	80 81       	ld	r24, Z
 562:	80 ff       	sbrs	r24, 0
 564:	fd cf       	rjmp	.-6      	; 0x560 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 566:	80 91 0c 01 	lds	r24, 0x010C
 56a:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 56e:	8e ef       	ldi	r24, 0xFE	; 254
 570:	80 93 e8 00 	sts	0x00E8, r24
 574:	8f c0       	rjmp	.+286    	; 0x694 <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 576:	81 32       	cpi	r24, 0x21	; 33
 578:	b9 f4       	brne	.+46     	; 0x5a8 <__vector_11+0x1f0>
 57a:	61 3a       	cpi	r22, 0xA1	; 161
 57c:	09 f0       	breq	.+2      	; 0x580 <__vector_11+0x1c8>
 57e:	83 c0       	rjmp	.+262    	; 0x686 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 580:	e8 ee       	ldi	r30, 0xE8	; 232
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	80 81       	ld	r24, Z
 586:	80 ff       	sbrs	r24, 0
 588:	fd cf       	rjmp	.-6      	; 0x584 <__vector_11+0x1cc>
 58a:	e0 e0       	ldi	r30, 0x00	; 0
 58c:	f1 e0       	ldi	r31, 0x01	; 1
 58e:	27 e0       	ldi	r18, 0x07	; 7
 590:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 592:	a1 ef       	ldi	r26, 0xF1	; 241
 594:	b0 e0       	ldi	r27, 0x00	; 0
 596:	81 91       	ld	r24, Z+
 598:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 59a:	e2 17       	cp	r30, r18
 59c:	f3 07       	cpc	r31, r19
 59e:	d9 f7       	brne	.-10     	; 0x596 <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5a0:	8e ef       	ldi	r24, 0xFE	; 254
 5a2:	80 93 e8 00 	sts	0x00E8, r24
 5a6:	76 c0       	rjmp	.+236    	; 0x694 <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 5a8:	80 32       	cpi	r24, 0x20	; 32
 5aa:	d1 f4       	brne	.+52     	; 0x5e0 <__vector_11+0x228>
 5ac:	61 32       	cpi	r22, 0x21	; 33
 5ae:	09 f0       	breq	.+2      	; 0x5b2 <__vector_11+0x1fa>
 5b0:	6a c0       	rjmp	.+212    	; 0x686 <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 5b2:	e8 ee       	ldi	r30, 0xE8	; 232
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	80 81       	ld	r24, Z
 5b8:	82 ff       	sbrs	r24, 2
 5ba:	fd cf       	rjmp	.-6      	; 0x5b6 <__vector_11+0x1fe>
 5bc:	e0 e0       	ldi	r30, 0x00	; 0
 5be:	f1 e0       	ldi	r31, 0x01	; 1
 5c0:	27 e0       	ldi	r18, 0x07	; 7
 5c2:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 5c4:	a1 ef       	ldi	r26, 0xF1	; 241
 5c6:	b0 e0       	ldi	r27, 0x00	; 0
 5c8:	8c 91       	ld	r24, X
 5ca:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 5cc:	e2 17       	cp	r30, r18
 5ce:	f3 07       	cpc	r31, r19
 5d0:	d9 f7       	brne	.-10     	; 0x5c8 <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 5d2:	e8 ee       	ldi	r30, 0xE8	; 232
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	8b ef       	ldi	r24, 0xFB	; 251
 5d8:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5da:	8e ef       	ldi	r24, 0xFE	; 254
 5dc:	80 83       	st	Z, r24
 5de:	5a c0       	rjmp	.+180    	; 0x694 <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 5e0:	82 32       	cpi	r24, 0x22	; 34
 5e2:	71 f4       	brne	.+28     	; 0x600 <__vector_11+0x248>
 5e4:	61 32       	cpi	r22, 0x21	; 33
 5e6:	09 f0       	breq	.+2      	; 0x5ea <__vector_11+0x232>
 5e8:	4e c0       	rjmp	.+156    	; 0x686 <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
 5ea:	20 93 0a 01 	sts	0x010A, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 5ee:	e8 ee       	ldi	r30, 0xE8	; 232
 5f0:	f0 e0       	ldi	r31, 0x00	; 0
 5f2:	80 81       	ld	r24, Z
 5f4:	80 ff       	sbrs	r24, 0
 5f6:	fd cf       	rjmp	.-6      	; 0x5f2 <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5f8:	8e ef       	ldi	r24, 0xFE	; 254
 5fa:	80 93 e8 00 	sts	0x00E8, r24
 5fe:	4a c0       	rjmp	.+148    	; 0x694 <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 600:	81 11       	cpse	r24, r1
 602:	1a c0       	rjmp	.+52     	; 0x638 <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 604:	e8 ee       	ldi	r30, 0xE8	; 232
 606:	f0 e0       	ldi	r31, 0x00	; 0
 608:	80 81       	ld	r24, Z
 60a:	80 ff       	sbrs	r24, 0
 60c:	fd cf       	rjmp	.-6      	; 0x608 <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 60e:	62 38       	cpi	r22, 0x82	; 130
 610:	51 f4       	brne	.+20     	; 0x626 <__vector_11+0x26e>
				UENUM = wIndex;
 612:	e9 ee       	ldi	r30, 0xE9	; 233
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
 618:	80 91 eb 00 	lds	r24, 0x00EB
 61c:	85 fb       	bst	r24, 5
 61e:	88 27       	eor	r24, r24
 620:	80 f9       	bld	r24, 0
				UENUM = 0;
 622:	10 82       	st	Z, r1
 624:	01 c0       	rjmp	.+2      	; 0x628 <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 626:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 628:	e1 ef       	ldi	r30, 0xF1	; 241
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	80 83       	st	Z, r24
			UEDATX = 0;
 62e:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 630:	8e ef       	ldi	r24, 0xFE	; 254
 632:	80 93 e8 00 	sts	0x00E8, r24
 636:	2e c0       	rjmp	.+92     	; 0x694 <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 638:	98 2f       	mov	r25, r24
 63a:	9d 7f       	andi	r25, 0xFD	; 253
 63c:	91 30       	cpi	r25, 0x01	; 1
 63e:	19 f5       	brne	.+70     	; 0x686 <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
 640:	62 30       	cpi	r22, 0x02	; 2
 642:	09 f5       	brne	.+66     	; 0x686 <__vector_11+0x2ce>
 644:	23 2b       	or	r18, r19
 646:	f9 f4       	brne	.+62     	; 0x686 <__vector_11+0x2ce>
			i = wIndex & 0x7F;
 648:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 64a:	9f ef       	ldi	r25, 0xFF	; 255
 64c:	94 0f       	add	r25, r20
 64e:	94 30       	cpi	r25, 0x04	; 4
 650:	d0 f4       	brcc	.+52     	; 0x686 <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 652:	9e ef       	ldi	r25, 0xFE	; 254
 654:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 658:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
 65c:	83 30       	cpi	r24, 0x03	; 3
 65e:	21 f4       	brne	.+8      	; 0x668 <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
 660:	81 e2       	ldi	r24, 0x21	; 33
 662:	80 93 eb 00 	sts	0x00EB, r24
 666:	16 c0       	rjmp	.+44     	; 0x694 <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 668:	89 e1       	ldi	r24, 0x19	; 25
 66a:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	02 c0       	rjmp	.+4      	; 0x678 <__vector_11+0x2c0>
 674:	88 0f       	add	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	4a 95       	dec	r20
 67a:	e2 f7       	brpl	.-8      	; 0x674 <__vector_11+0x2bc>
 67c:	ea ee       	ldi	r30, 0xEA	; 234
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	80 83       	st	Z, r24
					UERST = 0;
 682:	10 82       	st	Z, r1
 684:	07 c0       	rjmp	.+14     	; 0x694 <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 686:	81 e2       	ldi	r24, 0x21	; 33
 688:	80 93 eb 00 	sts	0x00EB, r24
 68c:	03 c0       	rjmp	.+6      	; 0x694 <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 68e:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 690:	21 11       	cpse	r18, r1
 692:	f7 ce       	rjmp	.-530    	; 0x482 <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 694:	ff 91       	pop	r31
 696:	ef 91       	pop	r30
 698:	df 91       	pop	r29
 69a:	cf 91       	pop	r28
 69c:	bf 91       	pop	r27
 69e:	af 91       	pop	r26
 6a0:	9f 91       	pop	r25
 6a2:	8f 91       	pop	r24
 6a4:	7f 91       	pop	r23
 6a6:	6f 91       	pop	r22
 6a8:	5f 91       	pop	r21
 6aa:	4f 91       	pop	r20
 6ac:	3f 91       	pop	r19
 6ae:	2f 91       	pop	r18
 6b0:	1f 91       	pop	r17
 6b2:	0f 91       	pop	r16
 6b4:	0f 90       	pop	r0
 6b6:	0f be       	out	0x3f, r0	; 63
 6b8:	0f 90       	pop	r0
 6ba:	1f 90       	pop	r1
 6bc:	18 95       	reti

000006be <__fixunssfsi>:
 6be:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__fp_splitA>
 6c2:	88 f0       	brcs	.+34     	; 0x6e6 <__fixunssfsi+0x28>
 6c4:	9f 57       	subi	r25, 0x7F	; 127
 6c6:	98 f0       	brcs	.+38     	; 0x6ee <__fixunssfsi+0x30>
 6c8:	b9 2f       	mov	r27, r25
 6ca:	99 27       	eor	r25, r25
 6cc:	b7 51       	subi	r27, 0x17	; 23
 6ce:	b0 f0       	brcs	.+44     	; 0x6fc <__fixunssfsi+0x3e>
 6d0:	e1 f0       	breq	.+56     	; 0x70a <__fixunssfsi+0x4c>
 6d2:	66 0f       	add	r22, r22
 6d4:	77 1f       	adc	r23, r23
 6d6:	88 1f       	adc	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	1a f0       	brmi	.+6      	; 0x6e2 <__fixunssfsi+0x24>
 6dc:	ba 95       	dec	r27
 6de:	c9 f7       	brne	.-14     	; 0x6d2 <__fixunssfsi+0x14>
 6e0:	14 c0       	rjmp	.+40     	; 0x70a <__fixunssfsi+0x4c>
 6e2:	b1 30       	cpi	r27, 0x01	; 1
 6e4:	91 f0       	breq	.+36     	; 0x70a <__fixunssfsi+0x4c>
 6e6:	0e 94 ed 03 	call	0x7da	; 0x7da <__fp_zero>
 6ea:	b1 e0       	ldi	r27, 0x01	; 1
 6ec:	08 95       	ret
 6ee:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__fp_zero>
 6f2:	67 2f       	mov	r22, r23
 6f4:	78 2f       	mov	r23, r24
 6f6:	88 27       	eor	r24, r24
 6f8:	b8 5f       	subi	r27, 0xF8	; 248
 6fa:	39 f0       	breq	.+14     	; 0x70a <__fixunssfsi+0x4c>
 6fc:	b9 3f       	cpi	r27, 0xF9	; 249
 6fe:	cc f3       	brlt	.-14     	; 0x6f2 <__fixunssfsi+0x34>
 700:	86 95       	lsr	r24
 702:	77 95       	ror	r23
 704:	67 95       	ror	r22
 706:	b3 95       	inc	r27
 708:	d9 f7       	brne	.-10     	; 0x700 <__fixunssfsi+0x42>
 70a:	3e f4       	brtc	.+14     	; 0x71a <__fixunssfsi+0x5c>
 70c:	90 95       	com	r25
 70e:	80 95       	com	r24
 710:	70 95       	com	r23
 712:	61 95       	neg	r22
 714:	7f 4f       	sbci	r23, 0xFF	; 255
 716:	8f 4f       	sbci	r24, 0xFF	; 255
 718:	9f 4f       	sbci	r25, 0xFF	; 255
 71a:	08 95       	ret

0000071c <__floatunsisf>:
 71c:	e8 94       	clt
 71e:	09 c0       	rjmp	.+18     	; 0x732 <__floatsisf+0x12>

00000720 <__floatsisf>:
 720:	97 fb       	bst	r25, 7
 722:	3e f4       	brtc	.+14     	; 0x732 <__floatsisf+0x12>
 724:	90 95       	com	r25
 726:	80 95       	com	r24
 728:	70 95       	com	r23
 72a:	61 95       	neg	r22
 72c:	7f 4f       	sbci	r23, 0xFF	; 255
 72e:	8f 4f       	sbci	r24, 0xFF	; 255
 730:	9f 4f       	sbci	r25, 0xFF	; 255
 732:	99 23       	and	r25, r25
 734:	a9 f0       	breq	.+42     	; 0x760 <__floatsisf+0x40>
 736:	f9 2f       	mov	r31, r25
 738:	96 e9       	ldi	r25, 0x96	; 150
 73a:	bb 27       	eor	r27, r27
 73c:	93 95       	inc	r25
 73e:	f6 95       	lsr	r31
 740:	87 95       	ror	r24
 742:	77 95       	ror	r23
 744:	67 95       	ror	r22
 746:	b7 95       	ror	r27
 748:	f1 11       	cpse	r31, r1
 74a:	f8 cf       	rjmp	.-16     	; 0x73c <__floatsisf+0x1c>
 74c:	fa f4       	brpl	.+62     	; 0x78c <__floatsisf+0x6c>
 74e:	bb 0f       	add	r27, r27
 750:	11 f4       	brne	.+4      	; 0x756 <__floatsisf+0x36>
 752:	60 ff       	sbrs	r22, 0
 754:	1b c0       	rjmp	.+54     	; 0x78c <__floatsisf+0x6c>
 756:	6f 5f       	subi	r22, 0xFF	; 255
 758:	7f 4f       	sbci	r23, 0xFF	; 255
 75a:	8f 4f       	sbci	r24, 0xFF	; 255
 75c:	9f 4f       	sbci	r25, 0xFF	; 255
 75e:	16 c0       	rjmp	.+44     	; 0x78c <__floatsisf+0x6c>
 760:	88 23       	and	r24, r24
 762:	11 f0       	breq	.+4      	; 0x768 <__floatsisf+0x48>
 764:	96 e9       	ldi	r25, 0x96	; 150
 766:	11 c0       	rjmp	.+34     	; 0x78a <__floatsisf+0x6a>
 768:	77 23       	and	r23, r23
 76a:	21 f0       	breq	.+8      	; 0x774 <__floatsisf+0x54>
 76c:	9e e8       	ldi	r25, 0x8E	; 142
 76e:	87 2f       	mov	r24, r23
 770:	76 2f       	mov	r23, r22
 772:	05 c0       	rjmp	.+10     	; 0x77e <__floatsisf+0x5e>
 774:	66 23       	and	r22, r22
 776:	71 f0       	breq	.+28     	; 0x794 <__floatsisf+0x74>
 778:	96 e8       	ldi	r25, 0x86	; 134
 77a:	86 2f       	mov	r24, r22
 77c:	70 e0       	ldi	r23, 0x00	; 0
 77e:	60 e0       	ldi	r22, 0x00	; 0
 780:	2a f0       	brmi	.+10     	; 0x78c <__floatsisf+0x6c>
 782:	9a 95       	dec	r25
 784:	66 0f       	add	r22, r22
 786:	77 1f       	adc	r23, r23
 788:	88 1f       	adc	r24, r24
 78a:	da f7       	brpl	.-10     	; 0x782 <__floatsisf+0x62>
 78c:	88 0f       	add	r24, r24
 78e:	96 95       	lsr	r25
 790:	87 95       	ror	r24
 792:	97 f9       	bld	r25, 7
 794:	08 95       	ret

00000796 <__fp_split3>:
 796:	57 fd       	sbrc	r21, 7
 798:	90 58       	subi	r25, 0x80	; 128
 79a:	44 0f       	add	r20, r20
 79c:	55 1f       	adc	r21, r21
 79e:	59 f0       	breq	.+22     	; 0x7b6 <__fp_splitA+0x10>
 7a0:	5f 3f       	cpi	r21, 0xFF	; 255
 7a2:	71 f0       	breq	.+28     	; 0x7c0 <__fp_splitA+0x1a>
 7a4:	47 95       	ror	r20

000007a6 <__fp_splitA>:
 7a6:	88 0f       	add	r24, r24
 7a8:	97 fb       	bst	r25, 7
 7aa:	99 1f       	adc	r25, r25
 7ac:	61 f0       	breq	.+24     	; 0x7c6 <__fp_splitA+0x20>
 7ae:	9f 3f       	cpi	r25, 0xFF	; 255
 7b0:	79 f0       	breq	.+30     	; 0x7d0 <__fp_splitA+0x2a>
 7b2:	87 95       	ror	r24
 7b4:	08 95       	ret
 7b6:	12 16       	cp	r1, r18
 7b8:	13 06       	cpc	r1, r19
 7ba:	14 06       	cpc	r1, r20
 7bc:	55 1f       	adc	r21, r21
 7be:	f2 cf       	rjmp	.-28     	; 0x7a4 <__fp_split3+0xe>
 7c0:	46 95       	lsr	r20
 7c2:	f1 df       	rcall	.-30     	; 0x7a6 <__fp_splitA>
 7c4:	08 c0       	rjmp	.+16     	; 0x7d6 <__fp_splitA+0x30>
 7c6:	16 16       	cp	r1, r22
 7c8:	17 06       	cpc	r1, r23
 7ca:	18 06       	cpc	r1, r24
 7cc:	99 1f       	adc	r25, r25
 7ce:	f1 cf       	rjmp	.-30     	; 0x7b2 <__fp_splitA+0xc>
 7d0:	86 95       	lsr	r24
 7d2:	71 05       	cpc	r23, r1
 7d4:	61 05       	cpc	r22, r1
 7d6:	08 94       	sec
 7d8:	08 95       	ret

000007da <__fp_zero>:
 7da:	e8 94       	clt

000007dc <__fp_szero>:
 7dc:	bb 27       	eor	r27, r27
 7de:	66 27       	eor	r22, r22
 7e0:	77 27       	eor	r23, r23
 7e2:	cb 01       	movw	r24, r22
 7e4:	97 f9       	bld	r25, 7
 7e6:	08 95       	ret

000007e8 <__mulsf3>:
 7e8:	0e 94 07 04 	call	0x80e	; 0x80e <__mulsf3x>
 7ec:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__fp_round>
 7f0:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__fp_pscA>
 7f4:	38 f0       	brcs	.+14     	; 0x804 <__mulsf3+0x1c>
 7f6:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__fp_pscB>
 7fa:	20 f0       	brcs	.+8      	; 0x804 <__mulsf3+0x1c>
 7fc:	95 23       	and	r25, r21
 7fe:	11 f0       	breq	.+4      	; 0x804 <__mulsf3+0x1c>
 800:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__fp_inf>
 804:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__fp_nan>
 808:	11 24       	eor	r1, r1
 80a:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__fp_szero>

0000080e <__mulsf3x>:
 80e:	0e 94 cb 03 	call	0x796	; 0x796 <__fp_split3>
 812:	70 f3       	brcs	.-36     	; 0x7f0 <__mulsf3+0x8>

00000814 <__mulsf3_pse>:
 814:	95 9f       	mul	r25, r21
 816:	c1 f3       	breq	.-16     	; 0x808 <__mulsf3+0x20>
 818:	95 0f       	add	r25, r21
 81a:	50 e0       	ldi	r21, 0x00	; 0
 81c:	55 1f       	adc	r21, r21
 81e:	62 9f       	mul	r22, r18
 820:	f0 01       	movw	r30, r0
 822:	72 9f       	mul	r23, r18
 824:	bb 27       	eor	r27, r27
 826:	f0 0d       	add	r31, r0
 828:	b1 1d       	adc	r27, r1
 82a:	63 9f       	mul	r22, r19
 82c:	aa 27       	eor	r26, r26
 82e:	f0 0d       	add	r31, r0
 830:	b1 1d       	adc	r27, r1
 832:	aa 1f       	adc	r26, r26
 834:	64 9f       	mul	r22, r20
 836:	66 27       	eor	r22, r22
 838:	b0 0d       	add	r27, r0
 83a:	a1 1d       	adc	r26, r1
 83c:	66 1f       	adc	r22, r22
 83e:	82 9f       	mul	r24, r18
 840:	22 27       	eor	r18, r18
 842:	b0 0d       	add	r27, r0
 844:	a1 1d       	adc	r26, r1
 846:	62 1f       	adc	r22, r18
 848:	73 9f       	mul	r23, r19
 84a:	b0 0d       	add	r27, r0
 84c:	a1 1d       	adc	r26, r1
 84e:	62 1f       	adc	r22, r18
 850:	83 9f       	mul	r24, r19
 852:	a0 0d       	add	r26, r0
 854:	61 1d       	adc	r22, r1
 856:	22 1f       	adc	r18, r18
 858:	74 9f       	mul	r23, r20
 85a:	33 27       	eor	r19, r19
 85c:	a0 0d       	add	r26, r0
 85e:	61 1d       	adc	r22, r1
 860:	23 1f       	adc	r18, r19
 862:	84 9f       	mul	r24, r20
 864:	60 0d       	add	r22, r0
 866:	21 1d       	adc	r18, r1
 868:	82 2f       	mov	r24, r18
 86a:	76 2f       	mov	r23, r22
 86c:	6a 2f       	mov	r22, r26
 86e:	11 24       	eor	r1, r1
 870:	9f 57       	subi	r25, 0x7F	; 127
 872:	50 40       	sbci	r21, 0x00	; 0
 874:	9a f0       	brmi	.+38     	; 0x89c <__mulsf3_pse+0x88>
 876:	f1 f0       	breq	.+60     	; 0x8b4 <__mulsf3_pse+0xa0>
 878:	88 23       	and	r24, r24
 87a:	4a f0       	brmi	.+18     	; 0x88e <__mulsf3_pse+0x7a>
 87c:	ee 0f       	add	r30, r30
 87e:	ff 1f       	adc	r31, r31
 880:	bb 1f       	adc	r27, r27
 882:	66 1f       	adc	r22, r22
 884:	77 1f       	adc	r23, r23
 886:	88 1f       	adc	r24, r24
 888:	91 50       	subi	r25, 0x01	; 1
 88a:	50 40       	sbci	r21, 0x00	; 0
 88c:	a9 f7       	brne	.-22     	; 0x878 <__mulsf3_pse+0x64>
 88e:	9e 3f       	cpi	r25, 0xFE	; 254
 890:	51 05       	cpc	r21, r1
 892:	80 f0       	brcs	.+32     	; 0x8b4 <__mulsf3_pse+0xa0>
 894:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__fp_inf>
 898:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__fp_szero>
 89c:	5f 3f       	cpi	r21, 0xFF	; 255
 89e:	e4 f3       	brlt	.-8      	; 0x898 <__mulsf3_pse+0x84>
 8a0:	98 3e       	cpi	r25, 0xE8	; 232
 8a2:	d4 f3       	brlt	.-12     	; 0x898 <__mulsf3_pse+0x84>
 8a4:	86 95       	lsr	r24
 8a6:	77 95       	ror	r23
 8a8:	67 95       	ror	r22
 8aa:	b7 95       	ror	r27
 8ac:	f7 95       	ror	r31
 8ae:	e7 95       	ror	r30
 8b0:	9f 5f       	subi	r25, 0xFF	; 255
 8b2:	c1 f7       	brne	.-16     	; 0x8a4 <__mulsf3_pse+0x90>
 8b4:	fe 2b       	or	r31, r30
 8b6:	88 0f       	add	r24, r24
 8b8:	91 1d       	adc	r25, r1
 8ba:	96 95       	lsr	r25
 8bc:	87 95       	ror	r24
 8be:	97 f9       	bld	r25, 7
 8c0:	08 95       	ret

000008c2 <__fp_inf>:
 8c2:	97 f9       	bld	r25, 7
 8c4:	9f 67       	ori	r25, 0x7F	; 127
 8c6:	80 e8       	ldi	r24, 0x80	; 128
 8c8:	70 e0       	ldi	r23, 0x00	; 0
 8ca:	60 e0       	ldi	r22, 0x00	; 0
 8cc:	08 95       	ret

000008ce <__fp_nan>:
 8ce:	9f ef       	ldi	r25, 0xFF	; 255
 8d0:	80 ec       	ldi	r24, 0xC0	; 192
 8d2:	08 95       	ret

000008d4 <__fp_pscA>:
 8d4:	00 24       	eor	r0, r0
 8d6:	0a 94       	dec	r0
 8d8:	16 16       	cp	r1, r22
 8da:	17 06       	cpc	r1, r23
 8dc:	18 06       	cpc	r1, r24
 8de:	09 06       	cpc	r0, r25
 8e0:	08 95       	ret

000008e2 <__fp_pscB>:
 8e2:	00 24       	eor	r0, r0
 8e4:	0a 94       	dec	r0
 8e6:	12 16       	cp	r1, r18
 8e8:	13 06       	cpc	r1, r19
 8ea:	14 06       	cpc	r1, r20
 8ec:	05 06       	cpc	r0, r21
 8ee:	08 95       	ret

000008f0 <__fp_round>:
 8f0:	09 2e       	mov	r0, r25
 8f2:	03 94       	inc	r0
 8f4:	00 0c       	add	r0, r0
 8f6:	11 f4       	brne	.+4      	; 0x8fc <__fp_round+0xc>
 8f8:	88 23       	and	r24, r24
 8fa:	52 f0       	brmi	.+20     	; 0x910 <__fp_round+0x20>
 8fc:	bb 0f       	add	r27, r27
 8fe:	40 f4       	brcc	.+16     	; 0x910 <__fp_round+0x20>
 900:	bf 2b       	or	r27, r31
 902:	11 f4       	brne	.+4      	; 0x908 <__fp_round+0x18>
 904:	60 ff       	sbrs	r22, 0
 906:	04 c0       	rjmp	.+8      	; 0x910 <__fp_round+0x20>
 908:	6f 5f       	subi	r22, 0xFF	; 255
 90a:	7f 4f       	sbci	r23, 0xFF	; 255
 90c:	8f 4f       	sbci	r24, 0xFF	; 255
 90e:	9f 4f       	sbci	r25, 0xFF	; 255
 910:	08 95       	ret

00000912 <_exit>:
 912:	f8 94       	cli

00000914 <__stop_program>:
 914:	ff cf       	rjmp	.-2      	; 0x914 <__stop_program>
