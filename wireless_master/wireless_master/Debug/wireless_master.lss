
wireless_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000a6a  00000afe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800108  00800108  00000b06  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001663  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000603  00000000  00000000  00002393  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a15  00000000  00000000  00002996  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000524  00000000  00000000  000033ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000683  00000000  00000000  000038d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ec7  00000000  00000000  00003f53  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00005e1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__ctors_end>
   4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  10:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  14:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  18:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  1c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  20:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  24:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  28:	0c 94 48 02 	jmp	0x490	; 0x490 <__vector_10>
  2c:	0c 94 86 02 	jmp	0x50c	; 0x50c <__vector_11>
  30:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  34:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  38:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  3c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  40:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  44:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  48:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  4c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  54:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  58:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  5c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  60:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  64:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  68:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  6c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  70:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  74:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__vector_29>
  78:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  7c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  80:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  84:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  88:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  8c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  90:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  94:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  98:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  9c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>

000000ac <__trampolines_end>:
  ac:	00 01       	movw	r0, r0
  ae:	00 00       	nop
  b0:	43 01       	movw	r8, r6
  b2:	12 00       	.word	0x0012	; ????
  b4:	02 00       	.word	0x0002	; ????
  b6:	00 00       	nop
  b8:	01 43       	sbci	r16, 0x31	; 49
  ba:	00 03       	mulsu	r16, r16
  bc:	00 00       	nop
  be:	fc 00       	.word	0x00fc	; ????
  c0:	04 01       	movw	r0, r8
  c2:	03 09       	sbc	r16, r3
  c4:	04 e8       	ldi	r16, 0x84	; 132
  c6:	00 12       	cpse	r0, r16
  c8:	02 03       	mulsu	r16, r18
  ca:	09 04       	cpc	r0, r9
  cc:	e0 00       	.word	0x00e0	; ????
  ce:	06 03       	mulsu	r16, r22
  d0:	03 09       	sbc	r16, r3
  d2:	04 d6       	rcall	.+3080   	; 0xcdc <__stack+0x1dd>
  d4:	00 08       	sbc	r0, r0

000000d6 <string3>:
  d6:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000000e0 <string2>:
  e0:	06 03 4d 00 32 00 00 00                             ..M.2...

000000e8 <string1>:
  e8:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
  f8:	65 00 00 00                                         e...

000000fc <string0>:
  fc:	04 03 09 04                                         ....

00000100 <config1_descriptor>:
 100:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 110:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 120:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 130:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 140:	40 00 00                                            @..

00000143 <device_descriptor>:
 143:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 153:	03 01                                               ..

00000155 <endpoint_config_table>:
 155:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

00000160 <__ctors_end>:
 160:	11 24       	eor	r1, r1
 162:	1f be       	out	0x3f, r1	; 63
 164:	cf ef       	ldi	r28, 0xFF	; 255
 166:	da e0       	ldi	r29, 0x0A	; 10
 168:	de bf       	out	0x3e, r29	; 62
 16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
 16c:	11 e0       	ldi	r17, 0x01	; 1
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b1 e0       	ldi	r27, 0x01	; 1
 172:	ea e6       	ldi	r30, 0x6A	; 106
 174:	fa e0       	ldi	r31, 0x0A	; 10
 176:	02 c0       	rjmp	.+4      	; 0x17c <__do_copy_data+0x10>
 178:	05 90       	lpm	r0, Z+
 17a:	0d 92       	st	X+, r0
 17c:	a8 30       	cpi	r26, 0x08	; 8
 17e:	b1 07       	cpc	r27, r17
 180:	d9 f7       	brne	.-10     	; 0x178 <__do_copy_data+0xc>

00000182 <__do_clear_bss>:
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	a8 e0       	ldi	r26, 0x08	; 8
 186:	b1 e0       	ldi	r27, 0x01	; 1
 188:	01 c0       	rjmp	.+2      	; 0x18c <.do_clear_bss_start>

0000018a <.do_clear_bss_loop>:
 18a:	1d 92       	st	X+, r1

0000018c <.do_clear_bss_start>:
 18c:	a9 31       	cpi	r26, 0x19	; 25
 18e:	b2 07       	cpc	r27, r18
 190:	e1 f7       	brne	.-8      	; 0x18a <.do_clear_bss_loop>
 192:	0e 94 16 01 	call	0x22c	; 0x22c <main>
 196:	0c 94 33 05 	jmp	0xa66	; 0xa66 <_exit>

0000019a <__bad_interrupt>:
 19a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019e <init>:
************************************************************/

/* Initialization of Pins and System Clock */
void init(void){
	
	m_clockdivide(4); // Set to 1 MHz
 19e:	e1 e6       	ldi	r30, 0x61	; 97
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 e8       	ldi	r24, 0x80	; 128
 1a4:	80 83       	st	Z, r24
 1a6:	84 e0       	ldi	r24, 0x04	; 4
 1a8:	80 83       	st	Z, r24
	
	m_bus_init(); // Enable mBUS
 1aa:	0e 94 e6 01 	call	0x3cc	; 0x3cc <m_bus_init>
 1ae:	08 95       	ret

000001b0 <adc_start>:
	
}


/* Setup ADC */
void adc_start(void){
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
	
	clear(ADMUX,REFS1); // Set reference voltage to Vcc
 1b4:	ac e7       	ldi	r26, 0x7C	; 124
 1b6:	b0 e0       	ldi	r27, 0x00	; 0
 1b8:	8c 91       	ld	r24, X
 1ba:	8f 77       	andi	r24, 0x7F	; 127
 1bc:	8c 93       	st	X, r24
	set(ADMUX,REFS0);
 1be:	8c 91       	ld	r24, X
 1c0:	80 64       	ori	r24, 0x40	; 64
 1c2:	8c 93       	st	X, r24
	
	clear(ADCSRA,ADPS2); // Set prescaler to /8
 1c4:	ea e7       	ldi	r30, 0x7A	; 122
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	8b 7f       	andi	r24, 0xFB	; 251
 1cc:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
 1ce:	80 81       	ld	r24, Z
 1d0:	82 60       	ori	r24, 0x02	; 2
 1d2:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
 1d4:	80 81       	ld	r24, Z
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	80 83       	st	Z, r24
	
	set(DIDR2,ADC8D); // Disable Digital input to: ADC8
 1da:	cd e7       	ldi	r28, 0x7D	; 125
 1dc:	d0 e0       	ldi	r29, 0x00	; 0
 1de:	88 81       	ld	r24, Y
 1e0:	81 60       	ori	r24, 0x01	; 1
 1e2:	88 83       	st	Y, r24
	set(DIDR2,ADC9D); // ADC9
 1e4:	88 81       	ld	r24, Y
 1e6:	82 60       	ori	r24, 0x02	; 2
 1e8:	88 83       	st	Y, r24
	set(DIDR2,ADC10D); // ADC10
 1ea:	88 81       	ld	r24, Y
 1ec:	84 60       	ori	r24, 0x04	; 4
 1ee:	88 83       	st	Y, r24
	
	sei(); // Enable global interrupts
 1f0:	78 94       	sei
	
	set(ADCSRA,ADIE); // Enable interrupt for when conversion is finished
 1f2:	80 81       	ld	r24, Z
 1f4:	88 60       	ori	r24, 0x08	; 8
 1f6:	80 83       	st	Z, r24
	
	clear(ADCSRA,ADATE); // Turn off 'free-running' mode
 1f8:	80 81       	ld	r24, Z
 1fa:	8f 7d       	andi	r24, 0xDF	; 223
 1fc:	80 83       	st	Z, r24
	
	set(ADCSRB,MUX5); // Select ADC0 at pin D4
 1fe:	cb e7       	ldi	r28, 0x7B	; 123
 200:	d0 e0       	ldi	r29, 0x00	; 0
 202:	88 81       	ld	r24, Y
 204:	80 62       	ori	r24, 0x20	; 32
 206:	88 83       	st	Y, r24
	clear(ADMUX,MUX2);
 208:	8c 91       	ld	r24, X
 20a:	8b 7f       	andi	r24, 0xFB	; 251
 20c:	8c 93       	st	X, r24
	clear(ADMUX,MUX1);
 20e:	8c 91       	ld	r24, X
 210:	8d 7f       	andi	r24, 0xFD	; 253
 212:	8c 93       	st	X, r24
	clear(ADMUX,MUX0);
 214:	8c 91       	ld	r24, X
 216:	8e 7f       	andi	r24, 0xFE	; 254
 218:	8c 93       	st	X, r24
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
 21a:	80 81       	ld	r24, Z
 21c:	80 68       	ori	r24, 0x80	; 128
 21e:	80 83       	st	Z, r24
	
	set(ADCSRA,ADSC); // Begin first conversion
 220:	80 81       	ld	r24, Z
 222:	80 64       	ori	r24, 0x40	; 64
 224:	80 83       	st	Z, r24
}
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <main>:
************************************************************/

int main(void)
{
	/* Confirm Power */
	m_red(ON);
 22c:	6e 9a       	sbi	0x0d, 6	; 13
 22e:	76 98       	cbi	0x0e, 6	; 14

	/* Initializations */
	init();
 230:	0e 94 cf 00 	call	0x19e	; 0x19e <init>
	adc_start();
 234:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <adc_start>
	//usb_enable();

	/* Confirm successful initialization(s) */
	m_green(ON);
 238:	6a 9a       	sbi	0x0d, 2	; 13
 23a:	72 98       	cbi	0x0e, 2	; 14
	
    while (1) 
    {}
 23c:	ff cf       	rjmp	.-2      	; 0x23c <main+0x10>

0000023e <wireless_send>:
}

/* Send Wireless Data */
void wireless_send(void)
{
	buffer [0] = *&Kp;
 23e:	80 91 0c 01 	lds	r24, 0x010C
 242:	90 91 0d 01 	lds	r25, 0x010D
 246:	ee e0       	ldi	r30, 0x0E	; 14
 248:	f1 e0       	ldi	r31, 0x01	; 1
 24a:	80 83       	st	Z, r24
	buffer [2] = *&Ki;
 24c:	80 91 0a 01 	lds	r24, 0x010A
 250:	90 91 0b 01 	lds	r25, 0x010B
 254:	82 83       	std	Z+2, r24	; 0x02
	buffer [4] = *&Kd;
 256:	80 91 08 01 	lds	r24, 0x0108
 25a:	90 91 09 01 	lds	r25, 0x0109
 25e:	84 83       	std	Z+4, r24	; 0x04
	m_rf_send(TXADDRESS,buffer,PACKET_LENGTH); // Send RF Signal	
 260:	46 e0       	ldi	r20, 0x06	; 6
 262:	bf 01       	movw	r22, r30
 264:	8c e7       	ldi	r24, 0x7C	; 124
 266:	0e 94 f7 01 	call	0x3ee	; 0x3ee <m_rf_send>
 26a:	08 95       	ret

0000026c <adc_switch>:
}

/* Control ADC Pin Switching */
void adc_switch(void)
{
	clear(ADCSRA,ADEN); // Disable ADC subsystem
 26c:	ea e7       	ldi	r30, 0x7A	; 122
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	8f 77       	andi	r24, 0x7F	; 127
 274:	80 83       	st	Z, r24
	
	switch(state){
 276:	80 91 14 01 	lds	r24, 0x0114
 27a:	90 91 15 01 	lds	r25, 0x0115
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	91 05       	cpc	r25, r1
 282:	31 f1       	breq	.+76     	; 0x2d0 <adc_switch+0x64>
 284:	82 30       	cpi	r24, 0x02	; 2
 286:	91 05       	cpc	r25, r1
 288:	09 f4       	brne	.+2      	; 0x28c <adc_switch+0x20>
 28a:	41 c0       	rjmp	.+130    	; 0x30e <adc_switch+0xa2>
 28c:	89 2b       	or	r24, r25
 28e:	09 f0       	breq	.+2      	; 0x292 <adc_switch+0x26>
 290:	5c c0       	rjmp	.+184    	; 0x34a <adc_switch+0xde>
		case 0:
			state = 1;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	90 93 15 01 	sts	0x0115, r25
 29a:	80 93 14 01 	sts	0x0114, r24
			set(ADCSRB,MUX5); // Select ADC0 at pin D6
 29e:	eb e7       	ldi	r30, 0x7B	; 123
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	80 62       	ori	r24, 0x20	; 32
 2a6:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
 2a8:	ec e7       	ldi	r30, 0x7C	; 124
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	8b 7f       	andi	r24, 0xFB	; 251
 2b0:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
 2b2:	80 81       	ld	r24, Z
 2b4:	8d 7f       	andi	r24, 0xFD	; 253
 2b6:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
 2b8:	80 81       	ld	r24, Z
 2ba:	81 60       	ori	r24, 0x01	; 1
 2bc:	80 83       	st	Z, r24
			Kp = ADC;
 2be:	80 91 78 00 	lds	r24, 0x0078
 2c2:	90 91 79 00 	lds	r25, 0x0079
 2c6:	90 93 0d 01 	sts	0x010D, r25
 2ca:	80 93 0c 01 	sts	0x010C, r24
			break;
 2ce:	3d c0       	rjmp	.+122    	; 0x34a <adc_switch+0xde>
		case 1:
			state = 2;
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	90 93 15 01 	sts	0x0115, r25
 2d8:	80 93 14 01 	sts	0x0114, r24
			set(ADCSRB,MUX5); // Select ADC0 at pin D7
 2dc:	eb e7       	ldi	r30, 0x7B	; 123
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
 2e2:	80 62       	ori	r24, 0x20	; 32
 2e4:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
 2e6:	ec e7       	ldi	r30, 0x7C	; 124
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	8b 7f       	andi	r24, 0xFB	; 251
 2ee:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
 2f0:	80 81       	ld	r24, Z
 2f2:	82 60       	ori	r24, 0x02	; 2
 2f4:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
 2f6:	80 81       	ld	r24, Z
 2f8:	8e 7f       	andi	r24, 0xFE	; 254
 2fa:	80 83       	st	Z, r24
			Ki = ADC;
 2fc:	80 91 78 00 	lds	r24, 0x0078
 300:	90 91 79 00 	lds	r25, 0x0079
 304:	90 93 0b 01 	sts	0x010B, r25
 308:	80 93 0a 01 	sts	0x010A, r24
			break;
 30c:	1e c0       	rjmp	.+60     	; 0x34a <adc_switch+0xde>
		case 2:
			state = 0;
 30e:	10 92 15 01 	sts	0x0115, r1
 312:	10 92 14 01 	sts	0x0114, r1
			set(ADCSRB,MUX5); // Select ADC0 at pin D4
 316:	eb e7       	ldi	r30, 0x7B	; 123
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	80 62       	ori	r24, 0x20	; 32
 31e:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
 320:	ec e7       	ldi	r30, 0x7C	; 124
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	8b 7f       	andi	r24, 0xFB	; 251
 328:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
 32a:	80 81       	ld	r24, Z
 32c:	8d 7f       	andi	r24, 0xFD	; 253
 32e:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
 330:	80 81       	ld	r24, Z
 332:	8e 7f       	andi	r24, 0xFE	; 254
 334:	80 83       	st	Z, r24
			Kd = ADC;
 336:	80 91 78 00 	lds	r24, 0x0078
 33a:	90 91 79 00 	lds	r25, 0x0079
 33e:	90 93 09 01 	sts	0x0109, r25
 342:	80 93 08 01 	sts	0x0108, r24
			wireless_send();
 346:	0e 94 1f 01 	call	0x23e	; 0x23e <wireless_send>
			break;
	}
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
 34a:	ea e7       	ldi	r30, 0x7A	; 122
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	80 68       	ori	r24, 0x80	; 128
 352:	80 83       	st	Z, r24
	set(ADCSRA,ADSC); // Begin new conversion
 354:	80 81       	ld	r24, Z
 356:	80 64       	ori	r24, 0x40	; 64
 358:	80 83       	st	Z, r24
 35a:	08 95       	ret

0000035c <__vector_29>:

/************************************************************
Interrupts
************************************************************/

ISR(ADC_vect){
 35c:	1f 92       	push	r1
 35e:	0f 92       	push	r0
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	0f 92       	push	r0
 364:	11 24       	eor	r1, r1
 366:	2f 93       	push	r18
 368:	3f 93       	push	r19
 36a:	4f 93       	push	r20
 36c:	5f 93       	push	r21
 36e:	6f 93       	push	r22
 370:	7f 93       	push	r23
 372:	8f 93       	push	r24
 374:	9f 93       	push	r25
 376:	af 93       	push	r26
 378:	bf 93       	push	r27
 37a:	ef 93       	push	r30
 37c:	ff 93       	push	r31
	OCR1A = 0x7A76/1023.0*ADC;
 37e:	60 91 78 00 	lds	r22, 0x0078
 382:	70 91 79 00 	lds	r23, 0x0079
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 38 04 	call	0x870	; 0x870 <__floatunsisf>
 38e:	2a e4       	ldi	r18, 0x4A	; 74
 390:	39 e2       	ldi	r19, 0x29	; 41
 392:	45 ef       	ldi	r20, 0xF5	; 245
 394:	51 e4       	ldi	r21, 0x41	; 65
 396:	0e 94 9e 04 	call	0x93c	; 0x93c <__mulsf3>
 39a:	0e 94 09 04 	call	0x812	; 0x812 <__fixunssfsi>
 39e:	70 93 89 00 	sts	0x0089, r23
 3a2:	60 93 88 00 	sts	0x0088, r22
	adc_switch();
 3a6:	0e 94 36 01 	call	0x26c	; 0x26c <adc_switch>
}
 3aa:	ff 91       	pop	r31
 3ac:	ef 91       	pop	r30
 3ae:	bf 91       	pop	r27
 3b0:	af 91       	pop	r26
 3b2:	9f 91       	pop	r25
 3b4:	8f 91       	pop	r24
 3b6:	7f 91       	pop	r23
 3b8:	6f 91       	pop	r22
 3ba:	5f 91       	pop	r21
 3bc:	4f 91       	pop	r20
 3be:	3f 91       	pop	r19
 3c0:	2f 91       	pop	r18
 3c2:	0f 90       	pop	r0
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	0f 90       	pop	r0
 3c8:	1f 90       	pop	r1
 3ca:	18 95       	reti

000003cc <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
 3cc:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
 3ce:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
 3d0:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
 3d2:	8c e0       	ldi	r24, 0x0C	; 12
 3d4:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
 3d8:	e9 e6       	ldi	r30, 0x69	; 105
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	80 62       	ori	r24, 0x20	; 32
 3e0:	80 83       	st	Z, r24
 3e2:	80 81       	ld	r24, Z
 3e4:	8f 7e       	andi	r24, 0xEF	; 239
 3e6:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
 3e8:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
 3ea:	78 94       	sei
 3ec:	08 95       	ret

000003ee <m_rf_send>:

	return 1;
}

char m_rf_send(char TXaddress, char* buffer, char packet_length)
{
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
	// START | MRFTWIADDR | MRFSEND | TXaddress | DATA_0 | ... | DATA_N | STOP
	
	int i;
	
	// DISABLE INTERRUPTS
	cli();
 3f2:	f8 94       	cli
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 3f4:	94 ea       	ldi	r25, 0xA4	; 164
 3f6:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
 3fa:	ec eb       	ldi	r30, 0xBC	; 188
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	90 81       	ld	r25, Z
 400:	99 23       	and	r25, r25
 402:	ec f7       	brge	.-6      	; 0x3fe <m_rf_send+0x10>

	// ADDRESS
	TWDR = MRFTWIADDR<<1;
 404:	90 e5       	ldi	r25, 0x50	; 80
 406:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
 40a:	94 e8       	ldi	r25, 0x84	; 132
 40c:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
 410:	ec eb       	ldi	r30, 0xBC	; 188
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	90 81       	ld	r25, Z
 416:	99 23       	and	r25, r25
 418:	ec f7       	brge	.-6      	; 0x414 <m_rf_send+0x26>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
 41a:	90 91 b9 00 	lds	r25, 0x00B9
 41e:	98 7f       	andi	r25, 0xF8	; 248
 420:	90 32       	cpi	r25, 0x20	; 32
 422:	31 f4       	brne	.+12     	; 0x430 <m_rf_send+0x42>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 424:	84 e9       	ldi	r24, 0x94	; 148
 426:	80 93 bc 00 	sts	0x00BC, r24
		sei();	// re-enable interrupts
 42a:	78 94       	sei
		return 0;
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	2d c0       	rjmp	.+90     	; 0x48a <m_rf_send+0x9c>
	}
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = MRFSEND;
 430:	93 e0       	ldi	r25, 0x03	; 3
 432:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
 436:	94 e8       	ldi	r25, 0x84	; 132
 438:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
 43c:	ec eb       	ldi	r30, 0xBC	; 188
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	90 81       	ld	r25, Z
 442:	99 23       	and	r25, r25
 444:	ec f7       	brge	.-6      	; 0x440 <m_rf_send+0x52>
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = TXaddress;
 446:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 44a:	84 e8       	ldi	r24, 0x84	; 132
 44c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 450:	ec eb       	ldi	r30, 0xBC	; 188
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	80 81       	ld	r24, Z
 456:	88 23       	and	r24, r24
 458:	ec f7       	brge	.-6      	; 0x454 <m_rf_send+0x66>

	// SEND DATA
	for(i=0;i<packet_length;i++){
 45a:	44 23       	and	r20, r20
 45c:	89 f0       	breq	.+34     	; 0x480 <m_rf_send+0x92>
 45e:	db 01       	movw	r26, r22
 460:	64 0f       	add	r22, r20
 462:	71 1d       	adc	r23, r1
		TWDR = buffer[i];
 464:	cb eb       	ldi	r28, 0xBB	; 187
 466:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);
 468:	ec eb       	ldi	r30, 0xBC	; 188
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	94 e8       	ldi	r25, 0x84	; 132
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
		TWDR = buffer[i];
 46e:	8d 91       	ld	r24, X+
 470:	88 83       	st	Y, r24
		TWCR = (1<<TWINT) | (1<<TWEN);
 472:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){};
 474:	80 81       	ld	r24, Z
 476:	88 23       	and	r24, r24
 478:	ec f7       	brge	.-6      	; 0x474 <m_rf_send+0x86>
	TWDR = TXaddress;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
 47a:	a6 17       	cp	r26, r22
 47c:	b7 07       	cpc	r27, r23
 47e:	b9 f7       	brne	.-18     	; 0x46e <m_rf_send+0x80>
		TWCR = (1<<TWINT) | (1<<TWEN);
		while(!(TWCR & (1<<TWINT))){};
	}
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 480:	84 e9       	ldi	r24, 0x94	; 148
 482:	80 93 bc 00 	sts	0x00BC, r24
	
	// RE-ENABLE INTERRUPTS
	sei();
 486:	78 94       	sei
	
	return 1;
 488:	81 e0       	ldi	r24, 0x01	; 1
}
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	08 95       	ret

00000490 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 490:	1f 92       	push	r1
 492:	0f 92       	push	r0
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	0f 92       	push	r0
 498:	11 24       	eor	r1, r1
 49a:	8f 93       	push	r24
 49c:	9f 93       	push	r25
 49e:	ef 93       	push	r30
 4a0:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
 4a2:	e1 ee       	ldi	r30, 0xE1	; 225
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	80 81       	ld	r24, Z
        UDINT = 0;
 4a8:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
 4aa:	83 ff       	sbrs	r24, 3
 4ac:	11 c0       	rjmp	.+34     	; 0x4d0 <__vector_10+0x40>
		UENUM = 0;
 4ae:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 4b2:	91 e0       	ldi	r25, 0x01	; 1
 4b4:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
 4b8:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 4bc:	92 e1       	ldi	r25, 0x12	; 18
 4be:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
 4c2:	98 e0       	ldi	r25, 0x08	; 8
 4c4:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
 4c8:	10 92 18 01 	sts	0x0118, r1
		cdc_line_rtsdtr = 0;
 4cc:	10 92 16 01 	sts	0x0116, r1
        }
	if (intbits & (1<<SOFI)) {
 4d0:	82 ff       	sbrs	r24, 2
 4d2:	13 c0       	rjmp	.+38     	; 0x4fa <__vector_10+0x6a>
		if (usb_configuration) {
 4d4:	80 91 18 01 	lds	r24, 0x0118
 4d8:	88 23       	and	r24, r24
 4da:	79 f0       	breq	.+30     	; 0x4fa <__vector_10+0x6a>
			t = transmit_flush_timer;
 4dc:	80 91 17 01 	lds	r24, 0x0117
			if (t) {
 4e0:	88 23       	and	r24, r24
 4e2:	59 f0       	breq	.+22     	; 0x4fa <__vector_10+0x6a>
				transmit_flush_timer = --t;
 4e4:	81 50       	subi	r24, 0x01	; 1
 4e6:	80 93 17 01 	sts	0x0117, r24
				if (!t) {
 4ea:	81 11       	cpse	r24, r1
 4ec:	06 c0       	rjmp	.+12     	; 0x4fa <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
 4ee:	84 e0       	ldi	r24, 0x04	; 4
 4f0:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
 4f4:	8a e3       	ldi	r24, 0x3A	; 58
 4f6:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 4fa:	ff 91       	pop	r31
 4fc:	ef 91       	pop	r30
 4fe:	9f 91       	pop	r25
 500:	8f 91       	pop	r24
 502:	0f 90       	pop	r0
 504:	0f be       	out	0x3f, r0	; 63
 506:	0f 90       	pop	r0
 508:	1f 90       	pop	r1
 50a:	18 95       	reti

0000050c <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 50c:	1f 92       	push	r1
 50e:	0f 92       	push	r0
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	0f 92       	push	r0
 514:	11 24       	eor	r1, r1
 516:	0f 93       	push	r16
 518:	1f 93       	push	r17
 51a:	2f 93       	push	r18
 51c:	3f 93       	push	r19
 51e:	4f 93       	push	r20
 520:	5f 93       	push	r21
 522:	6f 93       	push	r22
 524:	7f 93       	push	r23
 526:	8f 93       	push	r24
 528:	9f 93       	push	r25
 52a:	af 93       	push	r26
 52c:	bf 93       	push	r27
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
 532:	ef 93       	push	r30
 534:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 536:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 53a:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 53e:	83 ff       	sbrs	r24, 3
 540:	4c c1       	rjmp	.+664    	; 0x7da <__vector_11+0x2ce>
                bmRequestType = UEDATX;
 542:	e1 ef       	ldi	r30, 0xF1	; 241
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	60 81       	ld	r22, Z
                bRequest = UEDATX;
 548:	80 81       	ld	r24, Z
                wValue = UEDATX;
 54a:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
 54c:	90 81       	ld	r25, Z
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	39 2b       	or	r19, r25
                wIndex = UEDATX;
 552:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
 554:	90 81       	ld	r25, Z
 556:	50 e0       	ldi	r21, 0x00	; 0
 558:	59 2b       	or	r21, r25
                wLength = UEDATX;
 55a:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
 55c:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 55e:	92 ef       	ldi	r25, 0xF2	; 242
 560:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
 564:	86 30       	cpi	r24, 0x06	; 6
 566:	09 f0       	breq	.+2      	; 0x56a <__vector_11+0x5e>
 568:	58 c0       	rjmp	.+176    	; 0x61a <__vector_11+0x10e>
 56a:	04 c0       	rjmp	.+8      	; 0x574 <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 56c:	81 e2       	ldi	r24, 0x21	; 33
 56e:	80 93 eb 00 	sts	0x00EB, r24
					return;
 572:	3a c1       	rjmp	.+628    	; 0x7e8 <__vector_11+0x2dc>
 574:	66 e0       	ldi	r22, 0x06	; 6
 576:	8c ea       	ldi	r24, 0xAC	; 172
 578:	90 e0       	ldi	r25, 0x00	; 0
				}
				desc_val = pgm_read_word(list);
 57a:	fc 01       	movw	r30, r24
 57c:	a5 91       	lpm	r26, Z+
 57e:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
 580:	2a 17       	cp	r18, r26
 582:	3b 07       	cpc	r19, r27
 584:	11 f0       	breq	.+4      	; 0x58a <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
 586:	07 96       	adiw	r24, 0x07	; 7
					continue;
 588:	23 c0       	rjmp	.+70     	; 0x5d0 <__vector_11+0xc4>
				}
				list += 2;
 58a:	fc 01       	movw	r30, r24
 58c:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
 58e:	a5 91       	lpm	r26, Z+
 590:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
 592:	4a 17       	cp	r20, r26
 594:	5b 07       	cpc	r21, r27
 596:	11 f0       	breq	.+4      	; 0x59c <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
 598:	07 96       	adiw	r24, 0x07	; 7
					continue;
 59a:	1a c0       	rjmp	.+52     	; 0x5d0 <__vector_11+0xc4>
				}
				list += 2;
 59c:	fc 01       	movw	r30, r24
 59e:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 5a0:	45 91       	lpm	r20, Z+
 5a2:	54 91       	lpm	r21, Z
				list += 2;
 5a4:	fc 01       	movw	r30, r24
 5a6:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 5a8:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
 5aa:	87 2f       	mov	r24, r23
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 5b0:	8f 3f       	cpi	r24, 0xFF	; 255
 5b2:	91 05       	cpc	r25, r1
 5b4:	19 f0       	breq	.+6      	; 0x5bc <__vector_11+0xb0>
 5b6:	10 f0       	brcs	.+4      	; 0x5bc <__vector_11+0xb0>
 5b8:	8f ef       	ldi	r24, 0xFF	; 255
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	82 17       	cp	r24, r18
 5be:	08 f4       	brcc	.+2      	; 0x5c2 <__vector_11+0xb6>
 5c0:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 5c2:	a8 ee       	ldi	r26, 0xE8	; 232
 5c4:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 5c6:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5c8:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
 5ca:	c1 ef       	ldi	r28, 0xF1	; 241
 5cc:	d0 e0       	ldi	r29, 0x00	; 0
 5ce:	03 c0       	rjmp	.+6      	; 0x5d6 <__vector_11+0xca>
 5d0:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 5d2:	99 f6       	brne	.-90     	; 0x57a <__vector_11+0x6e>
 5d4:	cb cf       	rjmp	.-106    	; 0x56c <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 5d6:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 5d8:	98 2f       	mov	r25, r24
 5da:	95 70       	andi	r25, 0x05	; 5
 5dc:	e1 f3       	breq	.-8      	; 0x5d6 <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
 5de:	82 fd       	sbrc	r24, 2
 5e0:	03 c1       	rjmp	.+518    	; 0x7e8 <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 5e2:	32 2f       	mov	r19, r18
 5e4:	21 31       	cpi	r18, 0x11	; 17
 5e6:	08 f0       	brcs	.+2      	; 0x5ea <__vector_11+0xde>
 5e8:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
 5ea:	33 23       	and	r19, r19
 5ec:	09 f4       	brne	.+2      	; 0x5f0 <__vector_11+0xe4>
 5ee:	f9 c0       	rjmp	.+498    	; 0x7e2 <__vector_11+0x2d6>
 5f0:	fa 01       	movw	r30, r20
 5f2:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
 5f4:	94 91       	lpm	r25, Z
 5f6:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 5f8:	81 50       	subi	r24, 0x01	; 1
 5fa:	31 96       	adiw	r30, 0x01	; 1
 5fc:	81 11       	cpse	r24, r1
 5fe:	fa cf       	rjmp	.-12     	; 0x5f4 <__vector_11+0xe8>
 600:	8f ef       	ldi	r24, 0xFF	; 255
 602:	83 0f       	add	r24, r19
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	01 96       	adiw	r24, 0x01	; 1
 608:	48 0f       	add	r20, r24
 60a:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 60c:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 60e:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 610:	21 11       	cpse	r18, r1
 612:	e1 cf       	rjmp	.-62     	; 0x5d6 <__vector_11+0xca>
 614:	30 31       	cpi	r19, 0x10	; 16
 616:	f9 f2       	breq	.-66     	; 0x5d6 <__vector_11+0xca>
 618:	e7 c0       	rjmp	.+462    	; 0x7e8 <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 61a:	85 30       	cpi	r24, 0x05	; 5
 61c:	61 f4       	brne	.+24     	; 0x636 <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 61e:	8e ef       	ldi	r24, 0xFE	; 254
 620:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 624:	e8 ee       	ldi	r30, 0xE8	; 232
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	80 81       	ld	r24, Z
 62a:	80 ff       	sbrs	r24, 0
 62c:	fd cf       	rjmp	.-6      	; 0x628 <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 62e:	20 68       	ori	r18, 0x80	; 128
 630:	20 93 e3 00 	sts	0x00E3, r18
			return;
 634:	d9 c0       	rjmp	.+434    	; 0x7e8 <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 636:	89 30       	cpi	r24, 0x09	; 9
 638:	09 f0       	breq	.+2      	; 0x63c <__vector_11+0x130>
 63a:	35 c0       	rjmp	.+106    	; 0x6a6 <__vector_11+0x19a>
 63c:	61 11       	cpse	r22, r1
 63e:	cd c0       	rjmp	.+410    	; 0x7da <__vector_11+0x2ce>
			usb_configuration = wValue;
 640:	20 93 18 01 	sts	0x0118, r18
			cdc_line_rtsdtr = 0;
 644:	10 92 16 01 	sts	0x0116, r1
			transmit_flush_timer = 0;
 648:	10 92 17 01 	sts	0x0117, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 64c:	8e ef       	ldi	r24, 0xFE	; 254
 64e:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 652:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
 654:	25 e5       	ldi	r18, 0x55	; 85
 656:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
 658:	c9 ee       	ldi	r28, 0xE9	; 233
 65a:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
 65c:	ab ee       	ldi	r26, 0xEB	; 235
 65e:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
 660:	0c ee       	ldi	r16, 0xEC	; 236
 662:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
 664:	6d ee       	ldi	r22, 0xED	; 237
 666:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 668:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
 66a:	a9 01       	movw	r20, r18
 66c:	4f 5f       	subi	r20, 0xFF	; 255
 66e:	5f 4f       	sbci	r21, 0xFF	; 255
 670:	f9 01       	movw	r30, r18
 672:	94 91       	lpm	r25, Z
				UECONX = en;
 674:	9c 93       	st	X, r25
				if (en) {
 676:	99 23       	and	r25, r25
 678:	61 f0       	breq	.+24     	; 0x692 <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
 67a:	fa 01       	movw	r30, r20
 67c:	44 91       	lpm	r20, Z
 67e:	f8 01       	movw	r30, r16
 680:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
 682:	f9 01       	movw	r30, r18
 684:	32 96       	adiw	r30, 0x02	; 2
 686:	94 91       	lpm	r25, Z
 688:	2d 5f       	subi	r18, 0xFD	; 253
 68a:	3f 4f       	sbci	r19, 0xFF	; 255
 68c:	fb 01       	movw	r30, r22
 68e:	90 83       	st	Z, r25
 690:	01 c0       	rjmp	.+2      	; 0x694 <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
 692:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 694:	8f 5f       	subi	r24, 0xFF	; 255
 696:	85 30       	cpi	r24, 0x05	; 5
 698:	39 f7       	brne	.-50     	; 0x668 <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 69a:	ea ee       	ldi	r30, 0xEA	; 234
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	8e e1       	ldi	r24, 0x1E	; 30
 6a0:	80 83       	st	Z, r24
        		UERST = 0;
 6a2:	10 82       	st	Z, r1
			return;
 6a4:	a1 c0       	rjmp	.+322    	; 0x7e8 <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 6a6:	88 30       	cpi	r24, 0x08	; 8
 6a8:	81 f4       	brne	.+32     	; 0x6ca <__vector_11+0x1be>
 6aa:	60 38       	cpi	r22, 0x80	; 128
 6ac:	09 f0       	breq	.+2      	; 0x6b0 <__vector_11+0x1a4>
 6ae:	95 c0       	rjmp	.+298    	; 0x7da <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 6b0:	e8 ee       	ldi	r30, 0xE8	; 232
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	80 81       	ld	r24, Z
 6b6:	80 ff       	sbrs	r24, 0
 6b8:	fd cf       	rjmp	.-6      	; 0x6b4 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 6ba:	80 91 18 01 	lds	r24, 0x0118
 6be:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6c2:	8e ef       	ldi	r24, 0xFE	; 254
 6c4:	80 93 e8 00 	sts	0x00E8, r24
 6c8:	8f c0       	rjmp	.+286    	; 0x7e8 <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 6ca:	81 32       	cpi	r24, 0x21	; 33
 6cc:	b9 f4       	brne	.+46     	; 0x6fc <__vector_11+0x1f0>
 6ce:	61 3a       	cpi	r22, 0xA1	; 161
 6d0:	09 f0       	breq	.+2      	; 0x6d4 <__vector_11+0x1c8>
 6d2:	83 c0       	rjmp	.+262    	; 0x7da <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 6d4:	e8 ee       	ldi	r30, 0xE8	; 232
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	80 81       	ld	r24, Z
 6da:	80 ff       	sbrs	r24, 0
 6dc:	fd cf       	rjmp	.-6      	; 0x6d8 <__vector_11+0x1cc>
 6de:	e0 e0       	ldi	r30, 0x00	; 0
 6e0:	f1 e0       	ldi	r31, 0x01	; 1
 6e2:	27 e0       	ldi	r18, 0x07	; 7
 6e4:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 6e6:	a1 ef       	ldi	r26, 0xF1	; 241
 6e8:	b0 e0       	ldi	r27, 0x00	; 0
 6ea:	81 91       	ld	r24, Z+
 6ec:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 6ee:	e2 17       	cp	r30, r18
 6f0:	f3 07       	cpc	r31, r19
 6f2:	d9 f7       	brne	.-10     	; 0x6ea <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6f4:	8e ef       	ldi	r24, 0xFE	; 254
 6f6:	80 93 e8 00 	sts	0x00E8, r24
 6fa:	76 c0       	rjmp	.+236    	; 0x7e8 <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 6fc:	80 32       	cpi	r24, 0x20	; 32
 6fe:	d1 f4       	brne	.+52     	; 0x734 <__vector_11+0x228>
 700:	61 32       	cpi	r22, 0x21	; 33
 702:	09 f0       	breq	.+2      	; 0x706 <__vector_11+0x1fa>
 704:	6a c0       	rjmp	.+212    	; 0x7da <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 706:	e8 ee       	ldi	r30, 0xE8	; 232
 708:	f0 e0       	ldi	r31, 0x00	; 0
 70a:	80 81       	ld	r24, Z
 70c:	82 ff       	sbrs	r24, 2
 70e:	fd cf       	rjmp	.-6      	; 0x70a <__vector_11+0x1fe>
 710:	e0 e0       	ldi	r30, 0x00	; 0
 712:	f1 e0       	ldi	r31, 0x01	; 1
 714:	27 e0       	ldi	r18, 0x07	; 7
 716:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 718:	a1 ef       	ldi	r26, 0xF1	; 241
 71a:	b0 e0       	ldi	r27, 0x00	; 0
 71c:	8c 91       	ld	r24, X
 71e:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 720:	e2 17       	cp	r30, r18
 722:	f3 07       	cpc	r31, r19
 724:	d9 f7       	brne	.-10     	; 0x71c <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 726:	e8 ee       	ldi	r30, 0xE8	; 232
 728:	f0 e0       	ldi	r31, 0x00	; 0
 72a:	8b ef       	ldi	r24, 0xFB	; 251
 72c:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 72e:	8e ef       	ldi	r24, 0xFE	; 254
 730:	80 83       	st	Z, r24
 732:	5a c0       	rjmp	.+180    	; 0x7e8 <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 734:	82 32       	cpi	r24, 0x22	; 34
 736:	71 f4       	brne	.+28     	; 0x754 <__vector_11+0x248>
 738:	61 32       	cpi	r22, 0x21	; 33
 73a:	09 f0       	breq	.+2      	; 0x73e <__vector_11+0x232>
 73c:	4e c0       	rjmp	.+156    	; 0x7da <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
 73e:	20 93 16 01 	sts	0x0116, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 742:	e8 ee       	ldi	r30, 0xE8	; 232
 744:	f0 e0       	ldi	r31, 0x00	; 0
 746:	80 81       	ld	r24, Z
 748:	80 ff       	sbrs	r24, 0
 74a:	fd cf       	rjmp	.-6      	; 0x746 <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 74c:	8e ef       	ldi	r24, 0xFE	; 254
 74e:	80 93 e8 00 	sts	0x00E8, r24
 752:	4a c0       	rjmp	.+148    	; 0x7e8 <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 754:	81 11       	cpse	r24, r1
 756:	1a c0       	rjmp	.+52     	; 0x78c <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 758:	e8 ee       	ldi	r30, 0xE8	; 232
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	80 81       	ld	r24, Z
 75e:	80 ff       	sbrs	r24, 0
 760:	fd cf       	rjmp	.-6      	; 0x75c <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 762:	62 38       	cpi	r22, 0x82	; 130
 764:	51 f4       	brne	.+20     	; 0x77a <__vector_11+0x26e>
				UENUM = wIndex;
 766:	e9 ee       	ldi	r30, 0xE9	; 233
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
 76c:	80 91 eb 00 	lds	r24, 0x00EB
 770:	85 fb       	bst	r24, 5
 772:	88 27       	eor	r24, r24
 774:	80 f9       	bld	r24, 0
				UENUM = 0;
 776:	10 82       	st	Z, r1
 778:	01 c0       	rjmp	.+2      	; 0x77c <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 77a:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 77c:	e1 ef       	ldi	r30, 0xF1	; 241
 77e:	f0 e0       	ldi	r31, 0x00	; 0
 780:	80 83       	st	Z, r24
			UEDATX = 0;
 782:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 784:	8e ef       	ldi	r24, 0xFE	; 254
 786:	80 93 e8 00 	sts	0x00E8, r24
 78a:	2e c0       	rjmp	.+92     	; 0x7e8 <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 78c:	98 2f       	mov	r25, r24
 78e:	9d 7f       	andi	r25, 0xFD	; 253
 790:	91 30       	cpi	r25, 0x01	; 1
 792:	19 f5       	brne	.+70     	; 0x7da <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
 794:	62 30       	cpi	r22, 0x02	; 2
 796:	09 f5       	brne	.+66     	; 0x7da <__vector_11+0x2ce>
 798:	23 2b       	or	r18, r19
 79a:	f9 f4       	brne	.+62     	; 0x7da <__vector_11+0x2ce>
			i = wIndex & 0x7F;
 79c:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 79e:	9f ef       	ldi	r25, 0xFF	; 255
 7a0:	94 0f       	add	r25, r20
 7a2:	94 30       	cpi	r25, 0x04	; 4
 7a4:	d0 f4       	brcc	.+52     	; 0x7da <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 7a6:	9e ef       	ldi	r25, 0xFE	; 254
 7a8:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 7ac:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
 7b0:	83 30       	cpi	r24, 0x03	; 3
 7b2:	21 f4       	brne	.+8      	; 0x7bc <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
 7b4:	81 e2       	ldi	r24, 0x21	; 33
 7b6:	80 93 eb 00 	sts	0x00EB, r24
 7ba:	16 c0       	rjmp	.+44     	; 0x7e8 <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 7bc:	89 e1       	ldi	r24, 0x19	; 25
 7be:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <__vector_11+0x2c0>
 7c8:	88 0f       	add	r24, r24
 7ca:	99 1f       	adc	r25, r25
 7cc:	4a 95       	dec	r20
 7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <__vector_11+0x2bc>
 7d0:	ea ee       	ldi	r30, 0xEA	; 234
 7d2:	f0 e0       	ldi	r31, 0x00	; 0
 7d4:	80 83       	st	Z, r24
					UERST = 0;
 7d6:	10 82       	st	Z, r1
 7d8:	07 c0       	rjmp	.+14     	; 0x7e8 <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 7da:	81 e2       	ldi	r24, 0x21	; 33
 7dc:	80 93 eb 00 	sts	0x00EB, r24
 7e0:	03 c0       	rjmp	.+6      	; 0x7e8 <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 7e2:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 7e4:	21 11       	cpse	r18, r1
 7e6:	f7 ce       	rjmp	.-530    	; 0x5d6 <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 7e8:	ff 91       	pop	r31
 7ea:	ef 91       	pop	r30
 7ec:	df 91       	pop	r29
 7ee:	cf 91       	pop	r28
 7f0:	bf 91       	pop	r27
 7f2:	af 91       	pop	r26
 7f4:	9f 91       	pop	r25
 7f6:	8f 91       	pop	r24
 7f8:	7f 91       	pop	r23
 7fa:	6f 91       	pop	r22
 7fc:	5f 91       	pop	r21
 7fe:	4f 91       	pop	r20
 800:	3f 91       	pop	r19
 802:	2f 91       	pop	r18
 804:	1f 91       	pop	r17
 806:	0f 91       	pop	r16
 808:	0f 90       	pop	r0
 80a:	0f be       	out	0x3f, r0	; 63
 80c:	0f 90       	pop	r0
 80e:	1f 90       	pop	r1
 810:	18 95       	reti

00000812 <__fixunssfsi>:
 812:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__fp_splitA>
 816:	88 f0       	brcs	.+34     	; 0x83a <__fixunssfsi+0x28>
 818:	9f 57       	subi	r25, 0x7F	; 127
 81a:	98 f0       	brcs	.+38     	; 0x842 <__fixunssfsi+0x30>
 81c:	b9 2f       	mov	r27, r25
 81e:	99 27       	eor	r25, r25
 820:	b7 51       	subi	r27, 0x17	; 23
 822:	b0 f0       	brcs	.+44     	; 0x850 <__fixunssfsi+0x3e>
 824:	e1 f0       	breq	.+56     	; 0x85e <__fixunssfsi+0x4c>
 826:	66 0f       	add	r22, r22
 828:	77 1f       	adc	r23, r23
 82a:	88 1f       	adc	r24, r24
 82c:	99 1f       	adc	r25, r25
 82e:	1a f0       	brmi	.+6      	; 0x836 <__fixunssfsi+0x24>
 830:	ba 95       	dec	r27
 832:	c9 f7       	brne	.-14     	; 0x826 <__fixunssfsi+0x14>
 834:	14 c0       	rjmp	.+40     	; 0x85e <__fixunssfsi+0x4c>
 836:	b1 30       	cpi	r27, 0x01	; 1
 838:	91 f0       	breq	.+36     	; 0x85e <__fixunssfsi+0x4c>
 83a:	0e 94 97 04 	call	0x92e	; 0x92e <__fp_zero>
 83e:	b1 e0       	ldi	r27, 0x01	; 1
 840:	08 95       	ret
 842:	0c 94 97 04 	jmp	0x92e	; 0x92e <__fp_zero>
 846:	67 2f       	mov	r22, r23
 848:	78 2f       	mov	r23, r24
 84a:	88 27       	eor	r24, r24
 84c:	b8 5f       	subi	r27, 0xF8	; 248
 84e:	39 f0       	breq	.+14     	; 0x85e <__fixunssfsi+0x4c>
 850:	b9 3f       	cpi	r27, 0xF9	; 249
 852:	cc f3       	brlt	.-14     	; 0x846 <__fixunssfsi+0x34>
 854:	86 95       	lsr	r24
 856:	77 95       	ror	r23
 858:	67 95       	ror	r22
 85a:	b3 95       	inc	r27
 85c:	d9 f7       	brne	.-10     	; 0x854 <__fixunssfsi+0x42>
 85e:	3e f4       	brtc	.+14     	; 0x86e <__fixunssfsi+0x5c>
 860:	90 95       	com	r25
 862:	80 95       	com	r24
 864:	70 95       	com	r23
 866:	61 95       	neg	r22
 868:	7f 4f       	sbci	r23, 0xFF	; 255
 86a:	8f 4f       	sbci	r24, 0xFF	; 255
 86c:	9f 4f       	sbci	r25, 0xFF	; 255
 86e:	08 95       	ret

00000870 <__floatunsisf>:
 870:	e8 94       	clt
 872:	09 c0       	rjmp	.+18     	; 0x886 <__floatsisf+0x12>

00000874 <__floatsisf>:
 874:	97 fb       	bst	r25, 7
 876:	3e f4       	brtc	.+14     	; 0x886 <__floatsisf+0x12>
 878:	90 95       	com	r25
 87a:	80 95       	com	r24
 87c:	70 95       	com	r23
 87e:	61 95       	neg	r22
 880:	7f 4f       	sbci	r23, 0xFF	; 255
 882:	8f 4f       	sbci	r24, 0xFF	; 255
 884:	9f 4f       	sbci	r25, 0xFF	; 255
 886:	99 23       	and	r25, r25
 888:	a9 f0       	breq	.+42     	; 0x8b4 <__floatsisf+0x40>
 88a:	f9 2f       	mov	r31, r25
 88c:	96 e9       	ldi	r25, 0x96	; 150
 88e:	bb 27       	eor	r27, r27
 890:	93 95       	inc	r25
 892:	f6 95       	lsr	r31
 894:	87 95       	ror	r24
 896:	77 95       	ror	r23
 898:	67 95       	ror	r22
 89a:	b7 95       	ror	r27
 89c:	f1 11       	cpse	r31, r1
 89e:	f8 cf       	rjmp	.-16     	; 0x890 <__floatsisf+0x1c>
 8a0:	fa f4       	brpl	.+62     	; 0x8e0 <__floatsisf+0x6c>
 8a2:	bb 0f       	add	r27, r27
 8a4:	11 f4       	brne	.+4      	; 0x8aa <__floatsisf+0x36>
 8a6:	60 ff       	sbrs	r22, 0
 8a8:	1b c0       	rjmp	.+54     	; 0x8e0 <__floatsisf+0x6c>
 8aa:	6f 5f       	subi	r22, 0xFF	; 255
 8ac:	7f 4f       	sbci	r23, 0xFF	; 255
 8ae:	8f 4f       	sbci	r24, 0xFF	; 255
 8b0:	9f 4f       	sbci	r25, 0xFF	; 255
 8b2:	16 c0       	rjmp	.+44     	; 0x8e0 <__floatsisf+0x6c>
 8b4:	88 23       	and	r24, r24
 8b6:	11 f0       	breq	.+4      	; 0x8bc <__floatsisf+0x48>
 8b8:	96 e9       	ldi	r25, 0x96	; 150
 8ba:	11 c0       	rjmp	.+34     	; 0x8de <__floatsisf+0x6a>
 8bc:	77 23       	and	r23, r23
 8be:	21 f0       	breq	.+8      	; 0x8c8 <__floatsisf+0x54>
 8c0:	9e e8       	ldi	r25, 0x8E	; 142
 8c2:	87 2f       	mov	r24, r23
 8c4:	76 2f       	mov	r23, r22
 8c6:	05 c0       	rjmp	.+10     	; 0x8d2 <__floatsisf+0x5e>
 8c8:	66 23       	and	r22, r22
 8ca:	71 f0       	breq	.+28     	; 0x8e8 <__floatsisf+0x74>
 8cc:	96 e8       	ldi	r25, 0x86	; 134
 8ce:	86 2f       	mov	r24, r22
 8d0:	70 e0       	ldi	r23, 0x00	; 0
 8d2:	60 e0       	ldi	r22, 0x00	; 0
 8d4:	2a f0       	brmi	.+10     	; 0x8e0 <__floatsisf+0x6c>
 8d6:	9a 95       	dec	r25
 8d8:	66 0f       	add	r22, r22
 8da:	77 1f       	adc	r23, r23
 8dc:	88 1f       	adc	r24, r24
 8de:	da f7       	brpl	.-10     	; 0x8d6 <__floatsisf+0x62>
 8e0:	88 0f       	add	r24, r24
 8e2:	96 95       	lsr	r25
 8e4:	87 95       	ror	r24
 8e6:	97 f9       	bld	r25, 7
 8e8:	08 95       	ret

000008ea <__fp_split3>:
 8ea:	57 fd       	sbrc	r21, 7
 8ec:	90 58       	subi	r25, 0x80	; 128
 8ee:	44 0f       	add	r20, r20
 8f0:	55 1f       	adc	r21, r21
 8f2:	59 f0       	breq	.+22     	; 0x90a <__fp_splitA+0x10>
 8f4:	5f 3f       	cpi	r21, 0xFF	; 255
 8f6:	71 f0       	breq	.+28     	; 0x914 <__fp_splitA+0x1a>
 8f8:	47 95       	ror	r20

000008fa <__fp_splitA>:
 8fa:	88 0f       	add	r24, r24
 8fc:	97 fb       	bst	r25, 7
 8fe:	99 1f       	adc	r25, r25
 900:	61 f0       	breq	.+24     	; 0x91a <__fp_splitA+0x20>
 902:	9f 3f       	cpi	r25, 0xFF	; 255
 904:	79 f0       	breq	.+30     	; 0x924 <__fp_splitA+0x2a>
 906:	87 95       	ror	r24
 908:	08 95       	ret
 90a:	12 16       	cp	r1, r18
 90c:	13 06       	cpc	r1, r19
 90e:	14 06       	cpc	r1, r20
 910:	55 1f       	adc	r21, r21
 912:	f2 cf       	rjmp	.-28     	; 0x8f8 <__fp_split3+0xe>
 914:	46 95       	lsr	r20
 916:	f1 df       	rcall	.-30     	; 0x8fa <__fp_splitA>
 918:	08 c0       	rjmp	.+16     	; 0x92a <__fp_splitA+0x30>
 91a:	16 16       	cp	r1, r22
 91c:	17 06       	cpc	r1, r23
 91e:	18 06       	cpc	r1, r24
 920:	99 1f       	adc	r25, r25
 922:	f1 cf       	rjmp	.-30     	; 0x906 <__fp_splitA+0xc>
 924:	86 95       	lsr	r24
 926:	71 05       	cpc	r23, r1
 928:	61 05       	cpc	r22, r1
 92a:	08 94       	sec
 92c:	08 95       	ret

0000092e <__fp_zero>:
 92e:	e8 94       	clt

00000930 <__fp_szero>:
 930:	bb 27       	eor	r27, r27
 932:	66 27       	eor	r22, r22
 934:	77 27       	eor	r23, r23
 936:	cb 01       	movw	r24, r22
 938:	97 f9       	bld	r25, 7
 93a:	08 95       	ret

0000093c <__mulsf3>:
 93c:	0e 94 b1 04 	call	0x962	; 0x962 <__mulsf3x>
 940:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__fp_round>
 944:	0e 94 14 05 	call	0xa28	; 0xa28 <__fp_pscA>
 948:	38 f0       	brcs	.+14     	; 0x958 <__mulsf3+0x1c>
 94a:	0e 94 1b 05 	call	0xa36	; 0xa36 <__fp_pscB>
 94e:	20 f0       	brcs	.+8      	; 0x958 <__mulsf3+0x1c>
 950:	95 23       	and	r25, r21
 952:	11 f0       	breq	.+4      	; 0x958 <__mulsf3+0x1c>
 954:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__fp_inf>
 958:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__fp_nan>
 95c:	11 24       	eor	r1, r1
 95e:	0c 94 98 04 	jmp	0x930	; 0x930 <__fp_szero>

00000962 <__mulsf3x>:
 962:	0e 94 75 04 	call	0x8ea	; 0x8ea <__fp_split3>
 966:	70 f3       	brcs	.-36     	; 0x944 <__mulsf3+0x8>

00000968 <__mulsf3_pse>:
 968:	95 9f       	mul	r25, r21
 96a:	c1 f3       	breq	.-16     	; 0x95c <__mulsf3+0x20>
 96c:	95 0f       	add	r25, r21
 96e:	50 e0       	ldi	r21, 0x00	; 0
 970:	55 1f       	adc	r21, r21
 972:	62 9f       	mul	r22, r18
 974:	f0 01       	movw	r30, r0
 976:	72 9f       	mul	r23, r18
 978:	bb 27       	eor	r27, r27
 97a:	f0 0d       	add	r31, r0
 97c:	b1 1d       	adc	r27, r1
 97e:	63 9f       	mul	r22, r19
 980:	aa 27       	eor	r26, r26
 982:	f0 0d       	add	r31, r0
 984:	b1 1d       	adc	r27, r1
 986:	aa 1f       	adc	r26, r26
 988:	64 9f       	mul	r22, r20
 98a:	66 27       	eor	r22, r22
 98c:	b0 0d       	add	r27, r0
 98e:	a1 1d       	adc	r26, r1
 990:	66 1f       	adc	r22, r22
 992:	82 9f       	mul	r24, r18
 994:	22 27       	eor	r18, r18
 996:	b0 0d       	add	r27, r0
 998:	a1 1d       	adc	r26, r1
 99a:	62 1f       	adc	r22, r18
 99c:	73 9f       	mul	r23, r19
 99e:	b0 0d       	add	r27, r0
 9a0:	a1 1d       	adc	r26, r1
 9a2:	62 1f       	adc	r22, r18
 9a4:	83 9f       	mul	r24, r19
 9a6:	a0 0d       	add	r26, r0
 9a8:	61 1d       	adc	r22, r1
 9aa:	22 1f       	adc	r18, r18
 9ac:	74 9f       	mul	r23, r20
 9ae:	33 27       	eor	r19, r19
 9b0:	a0 0d       	add	r26, r0
 9b2:	61 1d       	adc	r22, r1
 9b4:	23 1f       	adc	r18, r19
 9b6:	84 9f       	mul	r24, r20
 9b8:	60 0d       	add	r22, r0
 9ba:	21 1d       	adc	r18, r1
 9bc:	82 2f       	mov	r24, r18
 9be:	76 2f       	mov	r23, r22
 9c0:	6a 2f       	mov	r22, r26
 9c2:	11 24       	eor	r1, r1
 9c4:	9f 57       	subi	r25, 0x7F	; 127
 9c6:	50 40       	sbci	r21, 0x00	; 0
 9c8:	9a f0       	brmi	.+38     	; 0x9f0 <__mulsf3_pse+0x88>
 9ca:	f1 f0       	breq	.+60     	; 0xa08 <__mulsf3_pse+0xa0>
 9cc:	88 23       	and	r24, r24
 9ce:	4a f0       	brmi	.+18     	; 0x9e2 <__mulsf3_pse+0x7a>
 9d0:	ee 0f       	add	r30, r30
 9d2:	ff 1f       	adc	r31, r31
 9d4:	bb 1f       	adc	r27, r27
 9d6:	66 1f       	adc	r22, r22
 9d8:	77 1f       	adc	r23, r23
 9da:	88 1f       	adc	r24, r24
 9dc:	91 50       	subi	r25, 0x01	; 1
 9de:	50 40       	sbci	r21, 0x00	; 0
 9e0:	a9 f7       	brne	.-22     	; 0x9cc <__mulsf3_pse+0x64>
 9e2:	9e 3f       	cpi	r25, 0xFE	; 254
 9e4:	51 05       	cpc	r21, r1
 9e6:	80 f0       	brcs	.+32     	; 0xa08 <__mulsf3_pse+0xa0>
 9e8:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__fp_inf>
 9ec:	0c 94 98 04 	jmp	0x930	; 0x930 <__fp_szero>
 9f0:	5f 3f       	cpi	r21, 0xFF	; 255
 9f2:	e4 f3       	brlt	.-8      	; 0x9ec <__mulsf3_pse+0x84>
 9f4:	98 3e       	cpi	r25, 0xE8	; 232
 9f6:	d4 f3       	brlt	.-12     	; 0x9ec <__mulsf3_pse+0x84>
 9f8:	86 95       	lsr	r24
 9fa:	77 95       	ror	r23
 9fc:	67 95       	ror	r22
 9fe:	b7 95       	ror	r27
 a00:	f7 95       	ror	r31
 a02:	e7 95       	ror	r30
 a04:	9f 5f       	subi	r25, 0xFF	; 255
 a06:	c1 f7       	brne	.-16     	; 0x9f8 <__mulsf3_pse+0x90>
 a08:	fe 2b       	or	r31, r30
 a0a:	88 0f       	add	r24, r24
 a0c:	91 1d       	adc	r25, r1
 a0e:	96 95       	lsr	r25
 a10:	87 95       	ror	r24
 a12:	97 f9       	bld	r25, 7
 a14:	08 95       	ret

00000a16 <__fp_inf>:
 a16:	97 f9       	bld	r25, 7
 a18:	9f 67       	ori	r25, 0x7F	; 127
 a1a:	80 e8       	ldi	r24, 0x80	; 128
 a1c:	70 e0       	ldi	r23, 0x00	; 0
 a1e:	60 e0       	ldi	r22, 0x00	; 0
 a20:	08 95       	ret

00000a22 <__fp_nan>:
 a22:	9f ef       	ldi	r25, 0xFF	; 255
 a24:	80 ec       	ldi	r24, 0xC0	; 192
 a26:	08 95       	ret

00000a28 <__fp_pscA>:
 a28:	00 24       	eor	r0, r0
 a2a:	0a 94       	dec	r0
 a2c:	16 16       	cp	r1, r22
 a2e:	17 06       	cpc	r1, r23
 a30:	18 06       	cpc	r1, r24
 a32:	09 06       	cpc	r0, r25
 a34:	08 95       	ret

00000a36 <__fp_pscB>:
 a36:	00 24       	eor	r0, r0
 a38:	0a 94       	dec	r0
 a3a:	12 16       	cp	r1, r18
 a3c:	13 06       	cpc	r1, r19
 a3e:	14 06       	cpc	r1, r20
 a40:	05 06       	cpc	r0, r21
 a42:	08 95       	ret

00000a44 <__fp_round>:
 a44:	09 2e       	mov	r0, r25
 a46:	03 94       	inc	r0
 a48:	00 0c       	add	r0, r0
 a4a:	11 f4       	brne	.+4      	; 0xa50 <__fp_round+0xc>
 a4c:	88 23       	and	r24, r24
 a4e:	52 f0       	brmi	.+20     	; 0xa64 <__fp_round+0x20>
 a50:	bb 0f       	add	r27, r27
 a52:	40 f4       	brcc	.+16     	; 0xa64 <__fp_round+0x20>
 a54:	bf 2b       	or	r27, r31
 a56:	11 f4       	brne	.+4      	; 0xa5c <__fp_round+0x18>
 a58:	60 ff       	sbrs	r22, 0
 a5a:	04 c0       	rjmp	.+8      	; 0xa64 <__fp_round+0x20>
 a5c:	6f 5f       	subi	r22, 0xFF	; 255
 a5e:	7f 4f       	sbci	r23, 0xFF	; 255
 a60:	8f 4f       	sbci	r24, 0xFF	; 255
 a62:	9f 4f       	sbci	r25, 0xFF	; 255
 a64:	08 95       	ret

00000a66 <_exit>:
 a66:	f8 94       	cli

00000a68 <__stop_program>:
 a68:	ff cf       	rjmp	.-2      	; 0xa68 <__stop_program>
