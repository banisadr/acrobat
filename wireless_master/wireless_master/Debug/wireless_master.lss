
wireless_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000cb4  00000d48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800108  00800108  00000d50  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000171a  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000655  00000000  00000000  00002692  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a20  00000000  00000000  00002ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000530  00000000  00000000  00003708  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000683  00000000  00000000  00003c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ef6  00000000  00000000  000042bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  000061b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__ctors_end>
   4:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
   8:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
   c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  10:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  14:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  18:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  1c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  20:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  24:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  28:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__vector_10>
  2c:	0c 94 26 03 	jmp	0x64c	; 0x64c <__vector_11>
  30:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  34:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  38:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  3c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  40:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  44:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  48:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  4c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  50:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  54:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  58:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  5c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  60:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  64:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  68:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  6c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  70:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  74:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__vector_29>
  78:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  7c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  80:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  84:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  88:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  8c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  90:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  94:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  98:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  9c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  a0:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  a4:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  a8:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>

000000ac <__trampolines_end>:
  ac:	0a 00       	.word	0x000a	; ????

000000ae <__c.2050>:
  ae:	20 20 20 20 20 4b 64 3d 20 00                            Kd= .

000000b8 <__c.2048>:
  b8:	20 20 20 20 20 4b 69 3d 20 00                            Ki= .

000000c2 <__c.2046>:
  c2:	4b 70 3d 20 00                                      Kp= .

000000c7 <descriptor_list>:
  c7:	00 01 00 00 5e 01 12 00 02 00 00 1b 01 43 00 03     ....^........C..
  d7:	00 00 17 01 04 01 03 09 04 03 01 12 02 03 09 04     ................
  e7:	fb 00 06 03 03 09 04 f1 00 08                       ..........

000000f1 <string3>:
  f1:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000000fb <string2>:
  fb:	06 03 4d 00 32 00 00 00                             ..M.2...

00000103 <string1>:
 103:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
 113:	65 00 00 00                                         e...

00000117 <string0>:
 117:	04 03 09 04                                         ....

0000011b <config1_descriptor>:
 11b:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 12b:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 13b:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 14b:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 15b:	40 00 00                                            @..

0000015e <device_descriptor>:
 15e:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 16e:	03 01                                               ..

00000170 <endpoint_config_table>:
 170:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000017a <__ctors_end>:
 17a:	11 24       	eor	r1, r1
 17c:	1f be       	out	0x3f, r1	; 63
 17e:	cf ef       	ldi	r28, 0xFF	; 255
 180:	da e0       	ldi	r29, 0x0A	; 10
 182:	de bf       	out	0x3e, r29	; 62
 184:	cd bf       	out	0x3d, r28	; 61

00000186 <__do_copy_data>:
 186:	11 e0       	ldi	r17, 0x01	; 1
 188:	a0 e0       	ldi	r26, 0x00	; 0
 18a:	b1 e0       	ldi	r27, 0x01	; 1
 18c:	e4 eb       	ldi	r30, 0xB4	; 180
 18e:	fc e0       	ldi	r31, 0x0C	; 12
 190:	02 c0       	rjmp	.+4      	; 0x196 <__do_copy_data+0x10>
 192:	05 90       	lpm	r0, Z+
 194:	0d 92       	st	X+, r0
 196:	a8 30       	cpi	r26, 0x08	; 8
 198:	b1 07       	cpc	r27, r17
 19a:	d9 f7       	brne	.-10     	; 0x192 <__do_copy_data+0xc>

0000019c <__do_clear_bss>:
 19c:	21 e0       	ldi	r18, 0x01	; 1
 19e:	a8 e0       	ldi	r26, 0x08	; 8
 1a0:	b1 e0       	ldi	r27, 0x01	; 1
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <.do_clear_bss_start>

000001a4 <.do_clear_bss_loop>:
 1a4:	1d 92       	st	X+, r1

000001a6 <.do_clear_bss_start>:
 1a6:	aa 31       	cpi	r26, 0x1A	; 26
 1a8:	b2 07       	cpc	r27, r18
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <.do_clear_bss_loop>
 1ac:	0e 94 23 01 	call	0x246	; 0x246 <main>
 1b0:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <_exit>

000001b4 <__bad_interrupt>:
 1b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b8 <init>:
************************************************************/

/* Initialization of Pins and System Clock */
void init(void){
	
	m_clockdivide(4); // Set to 1 MHz
 1b8:	e1 e6       	ldi	r30, 0x61	; 97
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 e8       	ldi	r24, 0x80	; 128
 1be:	80 83       	st	Z, r24
 1c0:	84 e0       	ldi	r24, 0x04	; 4
 1c2:	80 83       	st	Z, r24
	
	m_bus_init(); // Enable mBUS
 1c4:	0e 94 2b 02 	call	0x456	; 0x456 <m_bus_init>
 1c8:	08 95       	ret

000001ca <adc_start>:
	
}


/* Setup ADC */
void adc_start(void){
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
	
	clear(ADMUX,REFS1); // Set reference voltage to Vcc
 1ce:	ac e7       	ldi	r26, 0x7C	; 124
 1d0:	b0 e0       	ldi	r27, 0x00	; 0
 1d2:	8c 91       	ld	r24, X
 1d4:	8f 77       	andi	r24, 0x7F	; 127
 1d6:	8c 93       	st	X, r24
	set(ADMUX,REFS0);
 1d8:	8c 91       	ld	r24, X
 1da:	80 64       	ori	r24, 0x40	; 64
 1dc:	8c 93       	st	X, r24
	
	clear(ADCSRA,ADPS2); // Set prescaler to /8
 1de:	ea e7       	ldi	r30, 0x7A	; 122
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	8b 7f       	andi	r24, 0xFB	; 251
 1e6:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
 1e8:	80 81       	ld	r24, Z
 1ea:	82 60       	ori	r24, 0x02	; 2
 1ec:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);
 1ee:	80 81       	ld	r24, Z
 1f0:	81 60       	ori	r24, 0x01	; 1
 1f2:	80 83       	st	Z, r24
	
	set(DIDR2,ADC8D); // Disable Digital input to: ADC8
 1f4:	cd e7       	ldi	r28, 0x7D	; 125
 1f6:	d0 e0       	ldi	r29, 0x00	; 0
 1f8:	88 81       	ld	r24, Y
 1fa:	81 60       	ori	r24, 0x01	; 1
 1fc:	88 83       	st	Y, r24
	set(DIDR2,ADC9D); // ADC9
 1fe:	88 81       	ld	r24, Y
 200:	82 60       	ori	r24, 0x02	; 2
 202:	88 83       	st	Y, r24
	set(DIDR2,ADC10D); // ADC10
 204:	88 81       	ld	r24, Y
 206:	84 60       	ori	r24, 0x04	; 4
 208:	88 83       	st	Y, r24
	
	sei(); // Enable global interrupts
 20a:	78 94       	sei
	
	set(ADCSRA,ADIE); // Enable interrupt for when conversion is finished
 20c:	80 81       	ld	r24, Z
 20e:	88 60       	ori	r24, 0x08	; 8
 210:	80 83       	st	Z, r24
	
	clear(ADCSRA,ADATE); // Turn off 'free-running' mode
 212:	80 81       	ld	r24, Z
 214:	8f 7d       	andi	r24, 0xDF	; 223
 216:	80 83       	st	Z, r24
	
	set(ADCSRB,MUX5); // Select ADC0 at pin D4
 218:	cb e7       	ldi	r28, 0x7B	; 123
 21a:	d0 e0       	ldi	r29, 0x00	; 0
 21c:	88 81       	ld	r24, Y
 21e:	80 62       	ori	r24, 0x20	; 32
 220:	88 83       	st	Y, r24
	clear(ADMUX,MUX2);
 222:	8c 91       	ld	r24, X
 224:	8b 7f       	andi	r24, 0xFB	; 251
 226:	8c 93       	st	X, r24
	clear(ADMUX,MUX1);
 228:	8c 91       	ld	r24, X
 22a:	8d 7f       	andi	r24, 0xFD	; 253
 22c:	8c 93       	st	X, r24
	clear(ADMUX,MUX0);
 22e:	8c 91       	ld	r24, X
 230:	8e 7f       	andi	r24, 0xFE	; 254
 232:	8c 93       	st	X, r24
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
 234:	80 81       	ld	r24, Z
 236:	80 68       	ori	r24, 0x80	; 128
 238:	80 83       	st	Z, r24
	
	set(ADCSRA,ADSC); // Begin first conversion
 23a:	80 81       	ld	r24, Z
 23c:	80 64       	ori	r24, 0x40	; 64
 23e:	80 83       	st	Z, r24
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <main>:
************************************************************/

int main(void)
{
	/* Confirm Power */
	m_red(ON);
 246:	6e 9a       	sbi	0x0d, 6	; 13
 248:	76 98       	cbi	0x0e, 6	; 14

	/* Initializations */
	init();
 24a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <init>
	adc_start();
 24e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <adc_start>
	//usb_enable();

	/* Confirm successful initialization(s) */
	m_green(ON);
 252:	6a 9a       	sbi	0x0d, 2	; 13
 254:	72 98       	cbi	0x0e, 2	; 14
	
    while (1) 
    {}
 256:	ff cf       	rjmp	.-2      	; 0x256 <main+0x10>

00000258 <wireless_send>:
	set(ADCSRA,ADSC); // Begin new conversion
}

/* Send Wireless Data */
void wireless_send(void)
{
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
	buffer [0] = *&Kp;
 25c:	80 91 0c 01 	lds	r24, 0x010C
 260:	90 91 0d 01 	lds	r25, 0x010D
 264:	ce e0       	ldi	r28, 0x0E	; 14
 266:	d1 e0       	ldi	r29, 0x01	; 1
 268:	88 83       	st	Y, r24
	buffer [2] = *&Ki;
 26a:	80 91 0a 01 	lds	r24, 0x010A
 26e:	90 91 0b 01 	lds	r25, 0x010B
 272:	8a 83       	std	Y+2, r24	; 0x02
	buffer [4] = *&Kd;
 274:	80 91 08 01 	lds	r24, 0x0108
 278:	90 91 09 01 	lds	r25, 0x0109
 27c:	8c 83       	std	Y+4, r24	; 0x04
	m_rf_send(TXADDRESS,buffer,PACKET_LENGTH); // Send RF Signal
 27e:	46 e0       	ldi	r20, 0x06	; 6
 280:	be 01       	movw	r22, r28
 282:	8c e7       	ldi	r24, 0x7C	; 124
 284:	0e 94 3c 02 	call	0x478	; 0x478 <m_rf_send>

	Kp = *(int*)&buffer[0];
 288:	88 81       	ld	r24, Y
 28a:	99 81       	ldd	r25, Y+1	; 0x01
 28c:	90 93 0d 01 	sts	0x010D, r25
 290:	80 93 0c 01 	sts	0x010C, r24
	Ki = *(int*)&buffer[2];
 294:	8a 81       	ldd	r24, Y+2	; 0x02
 296:	9b 81       	ldd	r25, Y+3	; 0x03
 298:	90 93 0b 01 	sts	0x010B, r25
 29c:	80 93 0a 01 	sts	0x010A, r24
	Kd = *(int*)&buffer[4];
 2a0:	8c 81       	ldd	r24, Y+4	; 0x04
 2a2:	9d 81       	ldd	r25, Y+5	; 0x05
 2a4:	90 93 09 01 	sts	0x0109, r25
 2a8:	80 93 08 01 	sts	0x0108, r24
	
	m_usb_tx_string("Kp= ");
 2ac:	82 ec       	ldi	r24, 0xC2	; 194
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 a9 04 	call	0x952	; 0x952 <print_P>
	m_usb_tx_int(Kp);
 2b4:	80 91 0c 01 	lds	r24, 0x010C
 2b8:	90 91 0d 01 	lds	r25, 0x010D
 2bc:	0e 94 c5 04 	call	0x98a	; 0x98a <m_usb_tx_int>
	m_usb_tx_string("     Ki= ");
 2c0:	88 eb       	ldi	r24, 0xB8	; 184
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 a9 04 	call	0x952	; 0x952 <print_P>
	m_usb_tx_int(Ki);
 2c8:	80 91 0a 01 	lds	r24, 0x010A
 2cc:	90 91 0b 01 	lds	r25, 0x010B
 2d0:	0e 94 c5 04 	call	0x98a	; 0x98a <m_usb_tx_int>
	m_usb_tx_string("     Kd= ");
 2d4:	8e ea       	ldi	r24, 0xAE	; 174
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 a9 04 	call	0x952	; 0x952 <print_P>
	m_usb_tx_int(Kd);
 2dc:	80 91 08 01 	lds	r24, 0x0108
 2e0:	90 91 09 01 	lds	r25, 0x0109
 2e4:	0e 94 c5 04 	call	0x98a	; 0x98a <m_usb_tx_int>
	m_usb_tx_string("\n");	
 2e8:	8c ea       	ldi	r24, 0xAC	; 172
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 a9 04 	call	0x952	; 0x952 <print_P>
}
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	08 95       	ret

000002f6 <adc_switch>:
}

/* Control ADC Pin Switching */
void adc_switch(void)
{
	clear(ADCSRA,ADEN); // Disable ADC subsystem
 2f6:	ea e7       	ldi	r30, 0x7A	; 122
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	8f 77       	andi	r24, 0x7F	; 127
 2fe:	80 83       	st	Z, r24
	
	switch(state){
 300:	80 91 14 01 	lds	r24, 0x0114
 304:	90 91 15 01 	lds	r25, 0x0115
 308:	81 30       	cpi	r24, 0x01	; 1
 30a:	91 05       	cpc	r25, r1
 30c:	31 f1       	breq	.+76     	; 0x35a <adc_switch+0x64>
 30e:	82 30       	cpi	r24, 0x02	; 2
 310:	91 05       	cpc	r25, r1
 312:	09 f4       	brne	.+2      	; 0x316 <adc_switch+0x20>
 314:	41 c0       	rjmp	.+130    	; 0x398 <adc_switch+0xa2>
 316:	89 2b       	or	r24, r25
 318:	09 f0       	breq	.+2      	; 0x31c <adc_switch+0x26>
 31a:	5c c0       	rjmp	.+184    	; 0x3d4 <adc_switch+0xde>
		case 0:
			state = 1;
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	90 93 15 01 	sts	0x0115, r25
 324:	80 93 14 01 	sts	0x0114, r24
			set(ADCSRB,MUX5); // Select ADC0 at pin D6
 328:	eb e7       	ldi	r30, 0x7B	; 123
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	80 62       	ori	r24, 0x20	; 32
 330:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
 332:	ec e7       	ldi	r30, 0x7C	; 124
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	8b 7f       	andi	r24, 0xFB	; 251
 33a:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
 33c:	80 81       	ld	r24, Z
 33e:	8d 7f       	andi	r24, 0xFD	; 253
 340:	80 83       	st	Z, r24
			set(ADMUX,MUX0);
 342:	80 81       	ld	r24, Z
 344:	81 60       	ori	r24, 0x01	; 1
 346:	80 83       	st	Z, r24
			Kp = ADC;
 348:	80 91 78 00 	lds	r24, 0x0078
 34c:	90 91 79 00 	lds	r25, 0x0079
 350:	90 93 0d 01 	sts	0x010D, r25
 354:	80 93 0c 01 	sts	0x010C, r24
			break;
 358:	3d c0       	rjmp	.+122    	; 0x3d4 <adc_switch+0xde>
		case 1:
			state = 2;
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	90 93 15 01 	sts	0x0115, r25
 362:	80 93 14 01 	sts	0x0114, r24
			set(ADCSRB,MUX5); // Select ADC0 at pin D7
 366:	eb e7       	ldi	r30, 0x7B	; 123
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	80 62       	ori	r24, 0x20	; 32
 36e:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
 370:	ec e7       	ldi	r30, 0x7C	; 124
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	8b 7f       	andi	r24, 0xFB	; 251
 378:	80 83       	st	Z, r24
			set(ADMUX,MUX1);
 37a:	80 81       	ld	r24, Z
 37c:	82 60       	ori	r24, 0x02	; 2
 37e:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
 380:	80 81       	ld	r24, Z
 382:	8e 7f       	andi	r24, 0xFE	; 254
 384:	80 83       	st	Z, r24
			Ki = ADC;
 386:	80 91 78 00 	lds	r24, 0x0078
 38a:	90 91 79 00 	lds	r25, 0x0079
 38e:	90 93 0b 01 	sts	0x010B, r25
 392:	80 93 0a 01 	sts	0x010A, r24
			break;
 396:	1e c0       	rjmp	.+60     	; 0x3d4 <adc_switch+0xde>
		case 2:
			state = 0;
 398:	10 92 15 01 	sts	0x0115, r1
 39c:	10 92 14 01 	sts	0x0114, r1
			set(ADCSRB,MUX5); // Select ADC0 at pin D4
 3a0:	eb e7       	ldi	r30, 0x7B	; 123
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	80 81       	ld	r24, Z
 3a6:	80 62       	ori	r24, 0x20	; 32
 3a8:	80 83       	st	Z, r24
			clear(ADMUX,MUX2);
 3aa:	ec e7       	ldi	r30, 0x7C	; 124
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 81       	ld	r24, Z
 3b0:	8b 7f       	andi	r24, 0xFB	; 251
 3b2:	80 83       	st	Z, r24
			clear(ADMUX,MUX1);
 3b4:	80 81       	ld	r24, Z
 3b6:	8d 7f       	andi	r24, 0xFD	; 253
 3b8:	80 83       	st	Z, r24
			clear(ADMUX,MUX0);
 3ba:	80 81       	ld	r24, Z
 3bc:	8e 7f       	andi	r24, 0xFE	; 254
 3be:	80 83       	st	Z, r24
			Kd = ADC;
 3c0:	80 91 78 00 	lds	r24, 0x0078
 3c4:	90 91 79 00 	lds	r25, 0x0079
 3c8:	90 93 09 01 	sts	0x0109, r25
 3cc:	80 93 08 01 	sts	0x0108, r24
			wireless_send();
 3d0:	0e 94 2c 01 	call	0x258	; 0x258 <wireless_send>
			break;
	}
	
	set(ADCSRA,ADEN); // Enable ADC subsystem
 3d4:	ea e7       	ldi	r30, 0x7A	; 122
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	80 81       	ld	r24, Z
 3da:	80 68       	ori	r24, 0x80	; 128
 3dc:	80 83       	st	Z, r24
	set(ADCSRA,ADSC); // Begin new conversion
 3de:	80 81       	ld	r24, Z
 3e0:	80 64       	ori	r24, 0x40	; 64
 3e2:	80 83       	st	Z, r24
 3e4:	08 95       	ret

000003e6 <__vector_29>:

/************************************************************
Interrupts
************************************************************/

ISR(ADC_vect){
 3e6:	1f 92       	push	r1
 3e8:	0f 92       	push	r0
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	0f 92       	push	r0
 3ee:	11 24       	eor	r1, r1
 3f0:	2f 93       	push	r18
 3f2:	3f 93       	push	r19
 3f4:	4f 93       	push	r20
 3f6:	5f 93       	push	r21
 3f8:	6f 93       	push	r22
 3fa:	7f 93       	push	r23
 3fc:	8f 93       	push	r24
 3fe:	9f 93       	push	r25
 400:	af 93       	push	r26
 402:	bf 93       	push	r27
 404:	ef 93       	push	r30
 406:	ff 93       	push	r31
	OCR1A = 0x7A76/1023.0*ADC;
 408:	60 91 78 00 	lds	r22, 0x0078
 40c:	70 91 79 00 	lds	r23, 0x0079
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0e 94 28 05 	call	0xa50	; 0xa50 <__floatunsisf>
 418:	2a e4       	ldi	r18, 0x4A	; 74
 41a:	39 e2       	ldi	r19, 0x29	; 41
 41c:	45 ef       	ldi	r20, 0xF5	; 245
 41e:	51 e4       	ldi	r21, 0x41	; 65
 420:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__mulsf3>
 424:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fixunssfsi>
 428:	70 93 89 00 	sts	0x0089, r23
 42c:	60 93 88 00 	sts	0x0088, r22
	adc_switch();
 430:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <adc_switch>
}
 434:	ff 91       	pop	r31
 436:	ef 91       	pop	r30
 438:	bf 91       	pop	r27
 43a:	af 91       	pop	r26
 43c:	9f 91       	pop	r25
 43e:	8f 91       	pop	r24
 440:	7f 91       	pop	r23
 442:	6f 91       	pop	r22
 444:	5f 91       	pop	r21
 446:	4f 91       	pop	r20
 448:	3f 91       	pop	r19
 44a:	2f 91       	pop	r18
 44c:	0f 90       	pop	r0
 44e:	0f be       	out	0x3f, r0	; 63
 450:	0f 90       	pop	r0
 452:	1f 90       	pop	r1
 454:	18 95       	reti

00000456 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
 456:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
 458:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
 45a:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
 45c:	8c e0       	ldi	r24, 0x0C	; 12
 45e:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
 462:	e9 e6       	ldi	r30, 0x69	; 105
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	80 62       	ori	r24, 0x20	; 32
 46a:	80 83       	st	Z, r24
 46c:	80 81       	ld	r24, Z
 46e:	8f 7e       	andi	r24, 0xEF	; 239
 470:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
 472:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
 474:	78 94       	sei
 476:	08 95       	ret

00000478 <m_rf_send>:

	return 1;
}

char m_rf_send(char TXaddress, char* buffer, char packet_length)
{
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
	// START | MRFTWIADDR | MRFSEND | TXaddress | DATA_0 | ... | DATA_N | STOP
	
	int i;
	
	// DISABLE INTERRUPTS
	cli();
 47c:	f8 94       	cli
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 47e:	94 ea       	ldi	r25, 0xA4	; 164
 480:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
 484:	ec eb       	ldi	r30, 0xBC	; 188
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	90 81       	ld	r25, Z
 48a:	99 23       	and	r25, r25
 48c:	ec f7       	brge	.-6      	; 0x488 <m_rf_send+0x10>

	// ADDRESS
	TWDR = MRFTWIADDR<<1;
 48e:	90 e5       	ldi	r25, 0x50	; 80
 490:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
 494:	94 e8       	ldi	r25, 0x84	; 132
 496:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
 49a:	ec eb       	ldi	r30, 0xBC	; 188
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	90 81       	ld	r25, Z
 4a0:	99 23       	and	r25, r25
 4a2:	ec f7       	brge	.-6      	; 0x49e <m_rf_send+0x26>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
 4a4:	90 91 b9 00 	lds	r25, 0x00B9
 4a8:	98 7f       	andi	r25, 0xF8	; 248
 4aa:	90 32       	cpi	r25, 0x20	; 32
 4ac:	31 f4       	brne	.+12     	; 0x4ba <m_rf_send+0x42>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 4ae:	84 e9       	ldi	r24, 0x94	; 148
 4b0:	80 93 bc 00 	sts	0x00BC, r24
		sei();	// re-enable interrupts
 4b4:	78 94       	sei
		return 0;
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	2d c0       	rjmp	.+90     	; 0x514 <m_rf_send+0x9c>
	}
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = MRFSEND;
 4ba:	93 e0       	ldi	r25, 0x03	; 3
 4bc:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
 4c0:	94 e8       	ldi	r25, 0x84	; 132
 4c2:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
 4c6:	ec eb       	ldi	r30, 0xBC	; 188
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	90 81       	ld	r25, Z
 4cc:	99 23       	and	r25, r25
 4ce:	ec f7       	brge	.-6      	; 0x4ca <m_rf_send+0x52>
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = TXaddress;
 4d0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 4d4:	84 e8       	ldi	r24, 0x84	; 132
 4d6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 4da:	ec eb       	ldi	r30, 0xBC	; 188
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	80 81       	ld	r24, Z
 4e0:	88 23       	and	r24, r24
 4e2:	ec f7       	brge	.-6      	; 0x4de <m_rf_send+0x66>

	// SEND DATA
	for(i=0;i<packet_length;i++){
 4e4:	44 23       	and	r20, r20
 4e6:	89 f0       	breq	.+34     	; 0x50a <m_rf_send+0x92>
 4e8:	db 01       	movw	r26, r22
 4ea:	64 0f       	add	r22, r20
 4ec:	71 1d       	adc	r23, r1
		TWDR = buffer[i];
 4ee:	cb eb       	ldi	r28, 0xBB	; 187
 4f0:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);
 4f2:	ec eb       	ldi	r30, 0xBC	; 188
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	94 e8       	ldi	r25, 0x84	; 132
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
		TWDR = buffer[i];
 4f8:	8d 91       	ld	r24, X+
 4fa:	88 83       	st	Y, r24
		TWCR = (1<<TWINT) | (1<<TWEN);
 4fc:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){};
 4fe:	80 81       	ld	r24, Z
 500:	88 23       	and	r24, r24
 502:	ec f7       	brge	.-6      	; 0x4fe <m_rf_send+0x86>
	TWDR = TXaddress;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
 504:	a6 17       	cp	r26, r22
 506:	b7 07       	cpc	r27, r23
 508:	b9 f7       	brne	.-18     	; 0x4f8 <m_rf_send+0x80>
		TWCR = (1<<TWINT) | (1<<TWEN);
		while(!(TWCR & (1<<TWINT))){};
	}
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 50a:	84 e9       	ldi	r24, 0x94	; 148
 50c:	80 93 bc 00 	sts	0x00BC, r24
	
	// RE-ENABLE INTERRUPTS
	sei();
 510:	78 94       	sei
	
	return 1;
 512:	81 e0       	ldi	r24, 0x01	; 1
}
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	08 95       	ret

0000051a <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 51e:	90 91 19 01 	lds	r25, 0x0119
 522:	99 23       	and	r25, r25
 524:	09 f4       	brne	.+2      	; 0x528 <m_usb_tx_char+0xe>
 526:	4c c0       	rjmp	.+152    	; 0x5c0 <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
 528:	9f b7       	in	r25, 0x3f	; 63
	cli();
 52a:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
 52c:	24 e0       	ldi	r18, 0x04	; 4
 52e:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
 532:	20 91 17 01 	lds	r18, 0x0117
 536:	22 23       	and	r18, r18
 538:	49 f0       	breq	.+18     	; 0x54c <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
 53a:	20 91 e8 00 	lds	r18, 0x00E8
 53e:	25 fd       	sbrc	r18, 5
 540:	03 c0       	rjmp	.+6      	; 0x548 <m_usb_tx_char+0x2e>
			SREG = intr_state;
 542:	9f bf       	out	0x3f, r25	; 63
			return -1;
 544:	8f ef       	ldi	r24, 0xFF	; 255
 546:	41 c0       	rjmp	.+130    	; 0x5ca <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
 548:	10 92 17 01 	sts	0x0117, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
 54c:	30 91 e4 00 	lds	r19, 0x00E4
 550:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 552:	20 91 e8 00 	lds	r18, 0x00E8
 556:	25 fd       	sbrc	r18, 5
 558:	24 c0       	rjmp	.+72     	; 0x5a2 <m_usb_tx_char+0x88>
		SREG = intr_state;
 55a:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
 55c:	90 91 e4 00 	lds	r25, 0x00E4
 560:	93 17       	cp	r25, r19
 562:	81 f0       	breq	.+32     	; 0x584 <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 564:	90 91 19 01 	lds	r25, 0x0119
 568:	99 23       	and	r25, r25
 56a:	61 f1       	breq	.+88     	; 0x5c4 <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
 56c:	a9 ee       	ldi	r26, 0xE9	; 233
 56e:	b0 e0       	ldi	r27, 0x00	; 0
 570:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 572:	e8 ee       	ldi	r30, 0xE8	; 232
 574:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
 576:	c4 ee       	ldi	r28, 0xE4	; 228
 578:	d0 e0       	ldi	r29, 0x00	; 0
 57a:	0d c0       	rjmp	.+26     	; 0x596 <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
 57c:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
 57e:	98 81       	ld	r25, Y
 580:	93 13       	cpse	r25, r19
 582:	05 c0       	rjmp	.+10     	; 0x58e <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	80 93 17 01 	sts	0x0117, r24
			return -1;
 58a:	8f ef       	ldi	r24, 0xFF	; 255
 58c:	1e c0       	rjmp	.+60     	; 0x5ca <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 58e:	90 91 19 01 	lds	r25, 0x0119
 592:	99 23       	and	r25, r25
 594:	c9 f0       	breq	.+50     	; 0x5c8 <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
 596:	9f b7       	in	r25, 0x3f	; 63
		cli();
 598:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
 59a:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 59c:	20 81       	ld	r18, Z
 59e:	25 ff       	sbrs	r18, 5
 5a0:	ed cf       	rjmp	.-38     	; 0x57c <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
 5a2:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 5a6:	80 91 e8 00 	lds	r24, 0x00E8
 5aa:	85 fd       	sbrc	r24, 5
 5ac:	03 c0       	rjmp	.+6      	; 0x5b4 <m_usb_tx_char+0x9a>
 5ae:	8a e3       	ldi	r24, 0x3A	; 58
 5b0:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 5b4:	85 e0       	ldi	r24, 0x05	; 5
 5b6:	80 93 18 01 	sts	0x0118, r24
	SREG = intr_state;
 5ba:	9f bf       	out	0x3f, r25	; 63
	return 0;
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	05 c0       	rjmp	.+10     	; 0x5ca <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 5c0:	8f ef       	ldi	r24, 0xFF	; 255
 5c2:	03 c0       	rjmp	.+6      	; 0x5ca <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 5c4:	8f ef       	ldi	r24, 0xFF	; 255
 5c6:	01 c0       	rjmp	.+2      	; 0x5ca <m_usb_tx_char+0xb0>
 5c8:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
 5ca:	df 91       	pop	r29
 5cc:	cf 91       	pop	r28
 5ce:	08 95       	ret

000005d0 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 5d0:	1f 92       	push	r1
 5d2:	0f 92       	push	r0
 5d4:	0f b6       	in	r0, 0x3f	; 63
 5d6:	0f 92       	push	r0
 5d8:	11 24       	eor	r1, r1
 5da:	8f 93       	push	r24
 5dc:	9f 93       	push	r25
 5de:	ef 93       	push	r30
 5e0:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
 5e2:	e1 ee       	ldi	r30, 0xE1	; 225
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	80 81       	ld	r24, Z
        UDINT = 0;
 5e8:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
 5ea:	83 ff       	sbrs	r24, 3
 5ec:	11 c0       	rjmp	.+34     	; 0x610 <__vector_10+0x40>
		UENUM = 0;
 5ee:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 5f2:	91 e0       	ldi	r25, 0x01	; 1
 5f4:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
 5f8:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 5fc:	92 e1       	ldi	r25, 0x12	; 18
 5fe:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
 602:	98 e0       	ldi	r25, 0x08	; 8
 604:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
 608:	10 92 19 01 	sts	0x0119, r1
		cdc_line_rtsdtr = 0;
 60c:	10 92 16 01 	sts	0x0116, r1
        }
	if (intbits & (1<<SOFI)) {
 610:	82 ff       	sbrs	r24, 2
 612:	13 c0       	rjmp	.+38     	; 0x63a <__vector_10+0x6a>
		if (usb_configuration) {
 614:	80 91 19 01 	lds	r24, 0x0119
 618:	88 23       	and	r24, r24
 61a:	79 f0       	breq	.+30     	; 0x63a <__vector_10+0x6a>
			t = transmit_flush_timer;
 61c:	80 91 18 01 	lds	r24, 0x0118
			if (t) {
 620:	88 23       	and	r24, r24
 622:	59 f0       	breq	.+22     	; 0x63a <__vector_10+0x6a>
				transmit_flush_timer = --t;
 624:	81 50       	subi	r24, 0x01	; 1
 626:	80 93 18 01 	sts	0x0118, r24
				if (!t) {
 62a:	81 11       	cpse	r24, r1
 62c:	06 c0       	rjmp	.+12     	; 0x63a <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
 62e:	84 e0       	ldi	r24, 0x04	; 4
 630:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
 634:	8a e3       	ldi	r24, 0x3A	; 58
 636:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 63a:	ff 91       	pop	r31
 63c:	ef 91       	pop	r30
 63e:	9f 91       	pop	r25
 640:	8f 91       	pop	r24
 642:	0f 90       	pop	r0
 644:	0f be       	out	0x3f, r0	; 63
 646:	0f 90       	pop	r0
 648:	1f 90       	pop	r1
 64a:	18 95       	reti

0000064c <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 64c:	1f 92       	push	r1
 64e:	0f 92       	push	r0
 650:	0f b6       	in	r0, 0x3f	; 63
 652:	0f 92       	push	r0
 654:	11 24       	eor	r1, r1
 656:	0f 93       	push	r16
 658:	1f 93       	push	r17
 65a:	2f 93       	push	r18
 65c:	3f 93       	push	r19
 65e:	4f 93       	push	r20
 660:	5f 93       	push	r21
 662:	6f 93       	push	r22
 664:	7f 93       	push	r23
 666:	8f 93       	push	r24
 668:	9f 93       	push	r25
 66a:	af 93       	push	r26
 66c:	bf 93       	push	r27
 66e:	cf 93       	push	r28
 670:	df 93       	push	r29
 672:	ef 93       	push	r30
 674:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 676:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 67a:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 67e:	83 ff       	sbrs	r24, 3
 680:	4c c1       	rjmp	.+664    	; 0x91a <__vector_11+0x2ce>
                bmRequestType = UEDATX;
 682:	e1 ef       	ldi	r30, 0xF1	; 241
 684:	f0 e0       	ldi	r31, 0x00	; 0
 686:	60 81       	ld	r22, Z
                bRequest = UEDATX;
 688:	80 81       	ld	r24, Z
                wValue = UEDATX;
 68a:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
 68c:	90 81       	ld	r25, Z
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	39 2b       	or	r19, r25
                wIndex = UEDATX;
 692:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
 694:	90 81       	ld	r25, Z
 696:	50 e0       	ldi	r21, 0x00	; 0
 698:	59 2b       	or	r21, r25
                wLength = UEDATX;
 69a:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
 69c:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 69e:	92 ef       	ldi	r25, 0xF2	; 242
 6a0:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
 6a4:	86 30       	cpi	r24, 0x06	; 6
 6a6:	09 f0       	breq	.+2      	; 0x6aa <__vector_11+0x5e>
 6a8:	58 c0       	rjmp	.+176    	; 0x75a <__vector_11+0x10e>
 6aa:	04 c0       	rjmp	.+8      	; 0x6b4 <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 6ac:	81 e2       	ldi	r24, 0x21	; 33
 6ae:	80 93 eb 00 	sts	0x00EB, r24
					return;
 6b2:	3a c1       	rjmp	.+628    	; 0x928 <__vector_11+0x2dc>
 6b4:	66 e0       	ldi	r22, 0x06	; 6
 6b6:	87 ec       	ldi	r24, 0xC7	; 199
 6b8:	90 e0       	ldi	r25, 0x00	; 0
				}
				desc_val = pgm_read_word(list);
 6ba:	fc 01       	movw	r30, r24
 6bc:	a5 91       	lpm	r26, Z+
 6be:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
 6c0:	2a 17       	cp	r18, r26
 6c2:	3b 07       	cpc	r19, r27
 6c4:	11 f0       	breq	.+4      	; 0x6ca <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
 6c6:	07 96       	adiw	r24, 0x07	; 7
					continue;
 6c8:	23 c0       	rjmp	.+70     	; 0x710 <__vector_11+0xc4>
				}
				list += 2;
 6ca:	fc 01       	movw	r30, r24
 6cc:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
 6ce:	a5 91       	lpm	r26, Z+
 6d0:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
 6d2:	4a 17       	cp	r20, r26
 6d4:	5b 07       	cpc	r21, r27
 6d6:	11 f0       	breq	.+4      	; 0x6dc <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
 6d8:	07 96       	adiw	r24, 0x07	; 7
					continue;
 6da:	1a c0       	rjmp	.+52     	; 0x710 <__vector_11+0xc4>
				}
				list += 2;
 6dc:	fc 01       	movw	r30, r24
 6de:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 6e0:	45 91       	lpm	r20, Z+
 6e2:	54 91       	lpm	r21, Z
				list += 2;
 6e4:	fc 01       	movw	r30, r24
 6e6:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 6e8:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
 6ea:	87 2f       	mov	r24, r23
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 6f0:	8f 3f       	cpi	r24, 0xFF	; 255
 6f2:	91 05       	cpc	r25, r1
 6f4:	19 f0       	breq	.+6      	; 0x6fc <__vector_11+0xb0>
 6f6:	10 f0       	brcs	.+4      	; 0x6fc <__vector_11+0xb0>
 6f8:	8f ef       	ldi	r24, 0xFF	; 255
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	82 17       	cp	r24, r18
 6fe:	08 f4       	brcc	.+2      	; 0x702 <__vector_11+0xb6>
 700:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 702:	a8 ee       	ldi	r26, 0xE8	; 232
 704:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 706:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 708:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
 70a:	c1 ef       	ldi	r28, 0xF1	; 241
 70c:	d0 e0       	ldi	r29, 0x00	; 0
 70e:	03 c0       	rjmp	.+6      	; 0x716 <__vector_11+0xca>
 710:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 712:	99 f6       	brne	.-90     	; 0x6ba <__vector_11+0x6e>
 714:	cb cf       	rjmp	.-106    	; 0x6ac <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 716:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 718:	98 2f       	mov	r25, r24
 71a:	95 70       	andi	r25, 0x05	; 5
 71c:	e1 f3       	breq	.-8      	; 0x716 <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
 71e:	82 fd       	sbrc	r24, 2
 720:	03 c1       	rjmp	.+518    	; 0x928 <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 722:	32 2f       	mov	r19, r18
 724:	21 31       	cpi	r18, 0x11	; 17
 726:	08 f0       	brcs	.+2      	; 0x72a <__vector_11+0xde>
 728:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
 72a:	33 23       	and	r19, r19
 72c:	09 f4       	brne	.+2      	; 0x730 <__vector_11+0xe4>
 72e:	f9 c0       	rjmp	.+498    	; 0x922 <__vector_11+0x2d6>
 730:	fa 01       	movw	r30, r20
 732:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
 734:	94 91       	lpm	r25, Z
 736:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 738:	81 50       	subi	r24, 0x01	; 1
 73a:	31 96       	adiw	r30, 0x01	; 1
 73c:	81 11       	cpse	r24, r1
 73e:	fa cf       	rjmp	.-12     	; 0x734 <__vector_11+0xe8>
 740:	8f ef       	ldi	r24, 0xFF	; 255
 742:	83 0f       	add	r24, r19
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	01 96       	adiw	r24, 0x01	; 1
 748:	48 0f       	add	r20, r24
 74a:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 74c:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 74e:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 750:	21 11       	cpse	r18, r1
 752:	e1 cf       	rjmp	.-62     	; 0x716 <__vector_11+0xca>
 754:	30 31       	cpi	r19, 0x10	; 16
 756:	f9 f2       	breq	.-66     	; 0x716 <__vector_11+0xca>
 758:	e7 c0       	rjmp	.+462    	; 0x928 <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 75a:	85 30       	cpi	r24, 0x05	; 5
 75c:	61 f4       	brne	.+24     	; 0x776 <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 75e:	8e ef       	ldi	r24, 0xFE	; 254
 760:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 764:	e8 ee       	ldi	r30, 0xE8	; 232
 766:	f0 e0       	ldi	r31, 0x00	; 0
 768:	80 81       	ld	r24, Z
 76a:	80 ff       	sbrs	r24, 0
 76c:	fd cf       	rjmp	.-6      	; 0x768 <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 76e:	20 68       	ori	r18, 0x80	; 128
 770:	20 93 e3 00 	sts	0x00E3, r18
			return;
 774:	d9 c0       	rjmp	.+434    	; 0x928 <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 776:	89 30       	cpi	r24, 0x09	; 9
 778:	09 f0       	breq	.+2      	; 0x77c <__vector_11+0x130>
 77a:	35 c0       	rjmp	.+106    	; 0x7e6 <__vector_11+0x19a>
 77c:	61 11       	cpse	r22, r1
 77e:	cd c0       	rjmp	.+410    	; 0x91a <__vector_11+0x2ce>
			usb_configuration = wValue;
 780:	20 93 19 01 	sts	0x0119, r18
			cdc_line_rtsdtr = 0;
 784:	10 92 16 01 	sts	0x0116, r1
			transmit_flush_timer = 0;
 788:	10 92 18 01 	sts	0x0118, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 78c:	8e ef       	ldi	r24, 0xFE	; 254
 78e:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 792:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
 794:	20 e7       	ldi	r18, 0x70	; 112
 796:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
 798:	c9 ee       	ldi	r28, 0xE9	; 233
 79a:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
 79c:	ab ee       	ldi	r26, 0xEB	; 235
 79e:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
 7a0:	0c ee       	ldi	r16, 0xEC	; 236
 7a2:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
 7a4:	6d ee       	ldi	r22, 0xED	; 237
 7a6:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 7a8:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
 7aa:	a9 01       	movw	r20, r18
 7ac:	4f 5f       	subi	r20, 0xFF	; 255
 7ae:	5f 4f       	sbci	r21, 0xFF	; 255
 7b0:	f9 01       	movw	r30, r18
 7b2:	94 91       	lpm	r25, Z
				UECONX = en;
 7b4:	9c 93       	st	X, r25
				if (en) {
 7b6:	99 23       	and	r25, r25
 7b8:	61 f0       	breq	.+24     	; 0x7d2 <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
 7ba:	fa 01       	movw	r30, r20
 7bc:	44 91       	lpm	r20, Z
 7be:	f8 01       	movw	r30, r16
 7c0:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
 7c2:	f9 01       	movw	r30, r18
 7c4:	32 96       	adiw	r30, 0x02	; 2
 7c6:	94 91       	lpm	r25, Z
 7c8:	2d 5f       	subi	r18, 0xFD	; 253
 7ca:	3f 4f       	sbci	r19, 0xFF	; 255
 7cc:	fb 01       	movw	r30, r22
 7ce:	90 83       	st	Z, r25
 7d0:	01 c0       	rjmp	.+2      	; 0x7d4 <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
 7d2:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 7d4:	8f 5f       	subi	r24, 0xFF	; 255
 7d6:	85 30       	cpi	r24, 0x05	; 5
 7d8:	39 f7       	brne	.-50     	; 0x7a8 <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 7da:	ea ee       	ldi	r30, 0xEA	; 234
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	8e e1       	ldi	r24, 0x1E	; 30
 7e0:	80 83       	st	Z, r24
        		UERST = 0;
 7e2:	10 82       	st	Z, r1
			return;
 7e4:	a1 c0       	rjmp	.+322    	; 0x928 <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 7e6:	88 30       	cpi	r24, 0x08	; 8
 7e8:	81 f4       	brne	.+32     	; 0x80a <__vector_11+0x1be>
 7ea:	60 38       	cpi	r22, 0x80	; 128
 7ec:	09 f0       	breq	.+2      	; 0x7f0 <__vector_11+0x1a4>
 7ee:	95 c0       	rjmp	.+298    	; 0x91a <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 7f0:	e8 ee       	ldi	r30, 0xE8	; 232
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	80 81       	ld	r24, Z
 7f6:	80 ff       	sbrs	r24, 0
 7f8:	fd cf       	rjmp	.-6      	; 0x7f4 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 7fa:	80 91 19 01 	lds	r24, 0x0119
 7fe:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 802:	8e ef       	ldi	r24, 0xFE	; 254
 804:	80 93 e8 00 	sts	0x00E8, r24
 808:	8f c0       	rjmp	.+286    	; 0x928 <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 80a:	81 32       	cpi	r24, 0x21	; 33
 80c:	b9 f4       	brne	.+46     	; 0x83c <__vector_11+0x1f0>
 80e:	61 3a       	cpi	r22, 0xA1	; 161
 810:	09 f0       	breq	.+2      	; 0x814 <__vector_11+0x1c8>
 812:	83 c0       	rjmp	.+262    	; 0x91a <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 814:	e8 ee       	ldi	r30, 0xE8	; 232
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	80 81       	ld	r24, Z
 81a:	80 ff       	sbrs	r24, 0
 81c:	fd cf       	rjmp	.-6      	; 0x818 <__vector_11+0x1cc>
 81e:	e0 e0       	ldi	r30, 0x00	; 0
 820:	f1 e0       	ldi	r31, 0x01	; 1
 822:	27 e0       	ldi	r18, 0x07	; 7
 824:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 826:	a1 ef       	ldi	r26, 0xF1	; 241
 828:	b0 e0       	ldi	r27, 0x00	; 0
 82a:	81 91       	ld	r24, Z+
 82c:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 82e:	e2 17       	cp	r30, r18
 830:	f3 07       	cpc	r31, r19
 832:	d9 f7       	brne	.-10     	; 0x82a <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 834:	8e ef       	ldi	r24, 0xFE	; 254
 836:	80 93 e8 00 	sts	0x00E8, r24
 83a:	76 c0       	rjmp	.+236    	; 0x928 <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 83c:	80 32       	cpi	r24, 0x20	; 32
 83e:	d1 f4       	brne	.+52     	; 0x874 <__vector_11+0x228>
 840:	61 32       	cpi	r22, 0x21	; 33
 842:	09 f0       	breq	.+2      	; 0x846 <__vector_11+0x1fa>
 844:	6a c0       	rjmp	.+212    	; 0x91a <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 846:	e8 ee       	ldi	r30, 0xE8	; 232
 848:	f0 e0       	ldi	r31, 0x00	; 0
 84a:	80 81       	ld	r24, Z
 84c:	82 ff       	sbrs	r24, 2
 84e:	fd cf       	rjmp	.-6      	; 0x84a <__vector_11+0x1fe>
 850:	e0 e0       	ldi	r30, 0x00	; 0
 852:	f1 e0       	ldi	r31, 0x01	; 1
 854:	27 e0       	ldi	r18, 0x07	; 7
 856:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 858:	a1 ef       	ldi	r26, 0xF1	; 241
 85a:	b0 e0       	ldi	r27, 0x00	; 0
 85c:	8c 91       	ld	r24, X
 85e:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 860:	e2 17       	cp	r30, r18
 862:	f3 07       	cpc	r31, r19
 864:	d9 f7       	brne	.-10     	; 0x85c <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 866:	e8 ee       	ldi	r30, 0xE8	; 232
 868:	f0 e0       	ldi	r31, 0x00	; 0
 86a:	8b ef       	ldi	r24, 0xFB	; 251
 86c:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 86e:	8e ef       	ldi	r24, 0xFE	; 254
 870:	80 83       	st	Z, r24
 872:	5a c0       	rjmp	.+180    	; 0x928 <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 874:	82 32       	cpi	r24, 0x22	; 34
 876:	71 f4       	brne	.+28     	; 0x894 <__vector_11+0x248>
 878:	61 32       	cpi	r22, 0x21	; 33
 87a:	09 f0       	breq	.+2      	; 0x87e <__vector_11+0x232>
 87c:	4e c0       	rjmp	.+156    	; 0x91a <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
 87e:	20 93 16 01 	sts	0x0116, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 882:	e8 ee       	ldi	r30, 0xE8	; 232
 884:	f0 e0       	ldi	r31, 0x00	; 0
 886:	80 81       	ld	r24, Z
 888:	80 ff       	sbrs	r24, 0
 88a:	fd cf       	rjmp	.-6      	; 0x886 <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 88c:	8e ef       	ldi	r24, 0xFE	; 254
 88e:	80 93 e8 00 	sts	0x00E8, r24
 892:	4a c0       	rjmp	.+148    	; 0x928 <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 894:	81 11       	cpse	r24, r1
 896:	1a c0       	rjmp	.+52     	; 0x8cc <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 898:	e8 ee       	ldi	r30, 0xE8	; 232
 89a:	f0 e0       	ldi	r31, 0x00	; 0
 89c:	80 81       	ld	r24, Z
 89e:	80 ff       	sbrs	r24, 0
 8a0:	fd cf       	rjmp	.-6      	; 0x89c <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 8a2:	62 38       	cpi	r22, 0x82	; 130
 8a4:	51 f4       	brne	.+20     	; 0x8ba <__vector_11+0x26e>
				UENUM = wIndex;
 8a6:	e9 ee       	ldi	r30, 0xE9	; 233
 8a8:	f0 e0       	ldi	r31, 0x00	; 0
 8aa:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
 8ac:	80 91 eb 00 	lds	r24, 0x00EB
 8b0:	85 fb       	bst	r24, 5
 8b2:	88 27       	eor	r24, r24
 8b4:	80 f9       	bld	r24, 0
				UENUM = 0;
 8b6:	10 82       	st	Z, r1
 8b8:	01 c0       	rjmp	.+2      	; 0x8bc <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 8ba:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 8bc:	e1 ef       	ldi	r30, 0xF1	; 241
 8be:	f0 e0       	ldi	r31, 0x00	; 0
 8c0:	80 83       	st	Z, r24
			UEDATX = 0;
 8c2:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 8c4:	8e ef       	ldi	r24, 0xFE	; 254
 8c6:	80 93 e8 00 	sts	0x00E8, r24
 8ca:	2e c0       	rjmp	.+92     	; 0x928 <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 8cc:	98 2f       	mov	r25, r24
 8ce:	9d 7f       	andi	r25, 0xFD	; 253
 8d0:	91 30       	cpi	r25, 0x01	; 1
 8d2:	19 f5       	brne	.+70     	; 0x91a <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
 8d4:	62 30       	cpi	r22, 0x02	; 2
 8d6:	09 f5       	brne	.+66     	; 0x91a <__vector_11+0x2ce>
 8d8:	23 2b       	or	r18, r19
 8da:	f9 f4       	brne	.+62     	; 0x91a <__vector_11+0x2ce>
			i = wIndex & 0x7F;
 8dc:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 8de:	9f ef       	ldi	r25, 0xFF	; 255
 8e0:	94 0f       	add	r25, r20
 8e2:	94 30       	cpi	r25, 0x04	; 4
 8e4:	d0 f4       	brcc	.+52     	; 0x91a <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 8e6:	9e ef       	ldi	r25, 0xFE	; 254
 8e8:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 8ec:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
 8f0:	83 30       	cpi	r24, 0x03	; 3
 8f2:	21 f4       	brne	.+8      	; 0x8fc <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
 8f4:	81 e2       	ldi	r24, 0x21	; 33
 8f6:	80 93 eb 00 	sts	0x00EB, r24
 8fa:	16 c0       	rjmp	.+44     	; 0x928 <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 8fc:	89 e1       	ldi	r24, 0x19	; 25
 8fe:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	02 c0       	rjmp	.+4      	; 0x90c <__vector_11+0x2c0>
 908:	88 0f       	add	r24, r24
 90a:	99 1f       	adc	r25, r25
 90c:	4a 95       	dec	r20
 90e:	e2 f7       	brpl	.-8      	; 0x908 <__vector_11+0x2bc>
 910:	ea ee       	ldi	r30, 0xEA	; 234
 912:	f0 e0       	ldi	r31, 0x00	; 0
 914:	80 83       	st	Z, r24
					UERST = 0;
 916:	10 82       	st	Z, r1
 918:	07 c0       	rjmp	.+14     	; 0x928 <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 91a:	81 e2       	ldi	r24, 0x21	; 33
 91c:	80 93 eb 00 	sts	0x00EB, r24
 920:	03 c0       	rjmp	.+6      	; 0x928 <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 922:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 924:	21 11       	cpse	r18, r1
 926:	f7 ce       	rjmp	.-530    	; 0x716 <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 928:	ff 91       	pop	r31
 92a:	ef 91       	pop	r30
 92c:	df 91       	pop	r29
 92e:	cf 91       	pop	r28
 930:	bf 91       	pop	r27
 932:	af 91       	pop	r26
 934:	9f 91       	pop	r25
 936:	8f 91       	pop	r24
 938:	7f 91       	pop	r23
 93a:	6f 91       	pop	r22
 93c:	5f 91       	pop	r21
 93e:	4f 91       	pop	r20
 940:	3f 91       	pop	r19
 942:	2f 91       	pop	r18
 944:	1f 91       	pop	r17
 946:	0f 91       	pop	r16
 948:	0f 90       	pop	r0
 94a:	0f be       	out	0x3f, r0	; 63
 94c:	0f 90       	pop	r0
 94e:	1f 90       	pop	r1
 950:	18 95       	reti

00000952 <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
 952:	0f 93       	push	r16
 954:	1f 93       	push	r17
 956:	cf 93       	push	r28
	char c;

	while (1) {
		c = pgm_read_byte(s++);
 958:	8c 01       	movw	r16, r24
 95a:	0f 5f       	subi	r16, 0xFF	; 255
 95c:	1f 4f       	sbci	r17, 0xFF	; 255
 95e:	fc 01       	movw	r30, r24
 960:	c4 91       	lpm	r28, Z
		if (!c) break;
 962:	cc 23       	and	r28, r28
 964:	71 f0       	breq	.+28     	; 0x982 <print_P+0x30>
		if (c == '\n') usb_tx_char('\r');
 966:	ca 30       	cpi	r28, 0x0A	; 10
 968:	19 f4       	brne	.+6      	; 0x970 <print_P+0x1e>
 96a:	8d e0       	ldi	r24, 0x0D	; 13
 96c:	0e 94 8d 02 	call	0x51a	; 0x51a <m_usb_tx_char>
		usb_tx_char(c);
 970:	8c 2f       	mov	r24, r28
 972:	0e 94 8d 02 	call	0x51a	; 0x51a <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
 976:	f8 01       	movw	r30, r16
 978:	c4 91       	lpm	r28, Z
 97a:	0f 5f       	subi	r16, 0xFF	; 255
 97c:	1f 4f       	sbci	r17, 0xFF	; 255
		if (!c) break;
 97e:	c1 11       	cpse	r28, r1
 980:	f2 cf       	rjmp	.-28     	; 0x966 <print_P+0x14>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
 982:	cf 91       	pop	r28
 984:	1f 91       	pop	r17
 986:	0f 91       	pop	r16
 988:	08 95       	ret

0000098a <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
 98a:	ef 92       	push	r14
 98c:	ff 92       	push	r15
 98e:	0f 93       	push	r16
 990:	1f 93       	push	r17
 992:	cf 93       	push	r28
 994:	df 93       	push	r29
 996:	cd b7       	in	r28, 0x3d	; 61
 998:	de b7       	in	r29, 0x3e	; 62
 99a:	27 97       	sbiw	r28, 0x07	; 7
 99c:	0f b6       	in	r0, 0x3f	; 63
 99e:	f8 94       	cli
 9a0:	de bf       	out	0x3e, r29	; 62
 9a2:	0f be       	out	0x3f, r0	; 63
 9a4:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
 9a6:	8e 01       	movw	r16, r28
 9a8:	0f 5f       	subi	r16, 0xFF	; 255
 9aa:	1f 4f       	sbci	r17, 0xFF	; 255
 9ac:	27 e0       	ldi	r18, 0x07	; 7
 9ae:	f8 01       	movw	r30, r16
 9b0:	11 92       	st	Z+, r1
 9b2:	2a 95       	dec	r18
 9b4:	e9 f7       	brne	.-6      	; 0x9b0 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 9b6:	4a e0       	ldi	r20, 0x0A	; 10
 9b8:	b8 01       	movw	r22, r16
 9ba:	0e 94 23 06 	call	0xc46	; 0xc46 <__itoa_ncheck>
 9be:	7e 01       	movw	r14, r28
 9c0:	f8 e0       	ldi	r31, 0x08	; 8
 9c2:	ef 0e       	add	r14, r31
 9c4:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
 9c6:	f8 01       	movw	r30, r16
 9c8:	81 91       	ld	r24, Z+
 9ca:	8f 01       	movw	r16, r30
 9cc:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
 9ce:	0e 94 8d 02 	call	0x51a	; 0x51a <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
 9d2:	0e 15       	cp	r16, r14
 9d4:	1f 05       	cpc	r17, r15
 9d6:	b9 f7       	brne	.-18     	; 0x9c6 <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
 9d8:	27 96       	adiw	r28, 0x07	; 7
 9da:	0f b6       	in	r0, 0x3f	; 63
 9dc:	f8 94       	cli
 9de:	de bf       	out	0x3e, r29	; 62
 9e0:	0f be       	out	0x3f, r0	; 63
 9e2:	cd bf       	out	0x3d, r28	; 61
 9e4:	df 91       	pop	r29
 9e6:	cf 91       	pop	r28
 9e8:	1f 91       	pop	r17
 9ea:	0f 91       	pop	r16
 9ec:	ff 90       	pop	r15
 9ee:	ef 90       	pop	r14
 9f0:	08 95       	ret

000009f2 <__fixunssfsi>:
 9f2:	0e 94 6d 05 	call	0xada	; 0xada <__fp_splitA>
 9f6:	88 f0       	brcs	.+34     	; 0xa1a <__fixunssfsi+0x28>
 9f8:	9f 57       	subi	r25, 0x7F	; 127
 9fa:	98 f0       	brcs	.+38     	; 0xa22 <__fixunssfsi+0x30>
 9fc:	b9 2f       	mov	r27, r25
 9fe:	99 27       	eor	r25, r25
 a00:	b7 51       	subi	r27, 0x17	; 23
 a02:	b0 f0       	brcs	.+44     	; 0xa30 <__fixunssfsi+0x3e>
 a04:	e1 f0       	breq	.+56     	; 0xa3e <__fixunssfsi+0x4c>
 a06:	66 0f       	add	r22, r22
 a08:	77 1f       	adc	r23, r23
 a0a:	88 1f       	adc	r24, r24
 a0c:	99 1f       	adc	r25, r25
 a0e:	1a f0       	brmi	.+6      	; 0xa16 <__fixunssfsi+0x24>
 a10:	ba 95       	dec	r27
 a12:	c9 f7       	brne	.-14     	; 0xa06 <__fixunssfsi+0x14>
 a14:	14 c0       	rjmp	.+40     	; 0xa3e <__fixunssfsi+0x4c>
 a16:	b1 30       	cpi	r27, 0x01	; 1
 a18:	91 f0       	breq	.+36     	; 0xa3e <__fixunssfsi+0x4c>
 a1a:	0e 94 87 05 	call	0xb0e	; 0xb0e <__fp_zero>
 a1e:	b1 e0       	ldi	r27, 0x01	; 1
 a20:	08 95       	ret
 a22:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__fp_zero>
 a26:	67 2f       	mov	r22, r23
 a28:	78 2f       	mov	r23, r24
 a2a:	88 27       	eor	r24, r24
 a2c:	b8 5f       	subi	r27, 0xF8	; 248
 a2e:	39 f0       	breq	.+14     	; 0xa3e <__fixunssfsi+0x4c>
 a30:	b9 3f       	cpi	r27, 0xF9	; 249
 a32:	cc f3       	brlt	.-14     	; 0xa26 <__fixunssfsi+0x34>
 a34:	86 95       	lsr	r24
 a36:	77 95       	ror	r23
 a38:	67 95       	ror	r22
 a3a:	b3 95       	inc	r27
 a3c:	d9 f7       	brne	.-10     	; 0xa34 <__fixunssfsi+0x42>
 a3e:	3e f4       	brtc	.+14     	; 0xa4e <__fixunssfsi+0x5c>
 a40:	90 95       	com	r25
 a42:	80 95       	com	r24
 a44:	70 95       	com	r23
 a46:	61 95       	neg	r22
 a48:	7f 4f       	sbci	r23, 0xFF	; 255
 a4a:	8f 4f       	sbci	r24, 0xFF	; 255
 a4c:	9f 4f       	sbci	r25, 0xFF	; 255
 a4e:	08 95       	ret

00000a50 <__floatunsisf>:
 a50:	e8 94       	clt
 a52:	09 c0       	rjmp	.+18     	; 0xa66 <__floatsisf+0x12>

00000a54 <__floatsisf>:
 a54:	97 fb       	bst	r25, 7
 a56:	3e f4       	brtc	.+14     	; 0xa66 <__floatsisf+0x12>
 a58:	90 95       	com	r25
 a5a:	80 95       	com	r24
 a5c:	70 95       	com	r23
 a5e:	61 95       	neg	r22
 a60:	7f 4f       	sbci	r23, 0xFF	; 255
 a62:	8f 4f       	sbci	r24, 0xFF	; 255
 a64:	9f 4f       	sbci	r25, 0xFF	; 255
 a66:	99 23       	and	r25, r25
 a68:	a9 f0       	breq	.+42     	; 0xa94 <__floatsisf+0x40>
 a6a:	f9 2f       	mov	r31, r25
 a6c:	96 e9       	ldi	r25, 0x96	; 150
 a6e:	bb 27       	eor	r27, r27
 a70:	93 95       	inc	r25
 a72:	f6 95       	lsr	r31
 a74:	87 95       	ror	r24
 a76:	77 95       	ror	r23
 a78:	67 95       	ror	r22
 a7a:	b7 95       	ror	r27
 a7c:	f1 11       	cpse	r31, r1
 a7e:	f8 cf       	rjmp	.-16     	; 0xa70 <__floatsisf+0x1c>
 a80:	fa f4       	brpl	.+62     	; 0xac0 <__floatsisf+0x6c>
 a82:	bb 0f       	add	r27, r27
 a84:	11 f4       	brne	.+4      	; 0xa8a <__floatsisf+0x36>
 a86:	60 ff       	sbrs	r22, 0
 a88:	1b c0       	rjmp	.+54     	; 0xac0 <__floatsisf+0x6c>
 a8a:	6f 5f       	subi	r22, 0xFF	; 255
 a8c:	7f 4f       	sbci	r23, 0xFF	; 255
 a8e:	8f 4f       	sbci	r24, 0xFF	; 255
 a90:	9f 4f       	sbci	r25, 0xFF	; 255
 a92:	16 c0       	rjmp	.+44     	; 0xac0 <__floatsisf+0x6c>
 a94:	88 23       	and	r24, r24
 a96:	11 f0       	breq	.+4      	; 0xa9c <__floatsisf+0x48>
 a98:	96 e9       	ldi	r25, 0x96	; 150
 a9a:	11 c0       	rjmp	.+34     	; 0xabe <__floatsisf+0x6a>
 a9c:	77 23       	and	r23, r23
 a9e:	21 f0       	breq	.+8      	; 0xaa8 <__floatsisf+0x54>
 aa0:	9e e8       	ldi	r25, 0x8E	; 142
 aa2:	87 2f       	mov	r24, r23
 aa4:	76 2f       	mov	r23, r22
 aa6:	05 c0       	rjmp	.+10     	; 0xab2 <__floatsisf+0x5e>
 aa8:	66 23       	and	r22, r22
 aaa:	71 f0       	breq	.+28     	; 0xac8 <__floatsisf+0x74>
 aac:	96 e8       	ldi	r25, 0x86	; 134
 aae:	86 2f       	mov	r24, r22
 ab0:	70 e0       	ldi	r23, 0x00	; 0
 ab2:	60 e0       	ldi	r22, 0x00	; 0
 ab4:	2a f0       	brmi	.+10     	; 0xac0 <__floatsisf+0x6c>
 ab6:	9a 95       	dec	r25
 ab8:	66 0f       	add	r22, r22
 aba:	77 1f       	adc	r23, r23
 abc:	88 1f       	adc	r24, r24
 abe:	da f7       	brpl	.-10     	; 0xab6 <__floatsisf+0x62>
 ac0:	88 0f       	add	r24, r24
 ac2:	96 95       	lsr	r25
 ac4:	87 95       	ror	r24
 ac6:	97 f9       	bld	r25, 7
 ac8:	08 95       	ret

00000aca <__fp_split3>:
 aca:	57 fd       	sbrc	r21, 7
 acc:	90 58       	subi	r25, 0x80	; 128
 ace:	44 0f       	add	r20, r20
 ad0:	55 1f       	adc	r21, r21
 ad2:	59 f0       	breq	.+22     	; 0xaea <__fp_splitA+0x10>
 ad4:	5f 3f       	cpi	r21, 0xFF	; 255
 ad6:	71 f0       	breq	.+28     	; 0xaf4 <__fp_splitA+0x1a>
 ad8:	47 95       	ror	r20

00000ada <__fp_splitA>:
 ada:	88 0f       	add	r24, r24
 adc:	97 fb       	bst	r25, 7
 ade:	99 1f       	adc	r25, r25
 ae0:	61 f0       	breq	.+24     	; 0xafa <__fp_splitA+0x20>
 ae2:	9f 3f       	cpi	r25, 0xFF	; 255
 ae4:	79 f0       	breq	.+30     	; 0xb04 <__stack+0x5>
 ae6:	87 95       	ror	r24
 ae8:	08 95       	ret
 aea:	12 16       	cp	r1, r18
 aec:	13 06       	cpc	r1, r19
 aee:	14 06       	cpc	r1, r20
 af0:	55 1f       	adc	r21, r21
 af2:	f2 cf       	rjmp	.-28     	; 0xad8 <__fp_split3+0xe>
 af4:	46 95       	lsr	r20
 af6:	f1 df       	rcall	.-30     	; 0xada <__fp_splitA>
 af8:	08 c0       	rjmp	.+16     	; 0xb0a <__stack+0xb>
 afa:	16 16       	cp	r1, r22
 afc:	17 06       	cpc	r1, r23
 afe:	18 06       	cpc	r1, r24
 b00:	99 1f       	adc	r25, r25
 b02:	f1 cf       	rjmp	.-30     	; 0xae6 <__fp_splitA+0xc>
 b04:	86 95       	lsr	r24
 b06:	71 05       	cpc	r23, r1
 b08:	61 05       	cpc	r22, r1
 b0a:	08 94       	sec
 b0c:	08 95       	ret

00000b0e <__fp_zero>:
 b0e:	e8 94       	clt

00000b10 <__fp_szero>:
 b10:	bb 27       	eor	r27, r27
 b12:	66 27       	eor	r22, r22
 b14:	77 27       	eor	r23, r23
 b16:	cb 01       	movw	r24, r22
 b18:	97 f9       	bld	r25, 7
 b1a:	08 95       	ret

00000b1c <__mulsf3>:
 b1c:	0e 94 a1 05 	call	0xb42	; 0xb42 <__mulsf3x>
 b20:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_round>
 b24:	0e 94 04 06 	call	0xc08	; 0xc08 <__fp_pscA>
 b28:	38 f0       	brcs	.+14     	; 0xb38 <__mulsf3+0x1c>
 b2a:	0e 94 0b 06 	call	0xc16	; 0xc16 <__fp_pscB>
 b2e:	20 f0       	brcs	.+8      	; 0xb38 <__mulsf3+0x1c>
 b30:	95 23       	and	r25, r21
 b32:	11 f0       	breq	.+4      	; 0xb38 <__mulsf3+0x1c>
 b34:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__fp_inf>
 b38:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__fp_nan>
 b3c:	11 24       	eor	r1, r1
 b3e:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_szero>

00000b42 <__mulsf3x>:
 b42:	0e 94 65 05 	call	0xaca	; 0xaca <__fp_split3>
 b46:	70 f3       	brcs	.-36     	; 0xb24 <__mulsf3+0x8>

00000b48 <__mulsf3_pse>:
 b48:	95 9f       	mul	r25, r21
 b4a:	c1 f3       	breq	.-16     	; 0xb3c <__mulsf3+0x20>
 b4c:	95 0f       	add	r25, r21
 b4e:	50 e0       	ldi	r21, 0x00	; 0
 b50:	55 1f       	adc	r21, r21
 b52:	62 9f       	mul	r22, r18
 b54:	f0 01       	movw	r30, r0
 b56:	72 9f       	mul	r23, r18
 b58:	bb 27       	eor	r27, r27
 b5a:	f0 0d       	add	r31, r0
 b5c:	b1 1d       	adc	r27, r1
 b5e:	63 9f       	mul	r22, r19
 b60:	aa 27       	eor	r26, r26
 b62:	f0 0d       	add	r31, r0
 b64:	b1 1d       	adc	r27, r1
 b66:	aa 1f       	adc	r26, r26
 b68:	64 9f       	mul	r22, r20
 b6a:	66 27       	eor	r22, r22
 b6c:	b0 0d       	add	r27, r0
 b6e:	a1 1d       	adc	r26, r1
 b70:	66 1f       	adc	r22, r22
 b72:	82 9f       	mul	r24, r18
 b74:	22 27       	eor	r18, r18
 b76:	b0 0d       	add	r27, r0
 b78:	a1 1d       	adc	r26, r1
 b7a:	62 1f       	adc	r22, r18
 b7c:	73 9f       	mul	r23, r19
 b7e:	b0 0d       	add	r27, r0
 b80:	a1 1d       	adc	r26, r1
 b82:	62 1f       	adc	r22, r18
 b84:	83 9f       	mul	r24, r19
 b86:	a0 0d       	add	r26, r0
 b88:	61 1d       	adc	r22, r1
 b8a:	22 1f       	adc	r18, r18
 b8c:	74 9f       	mul	r23, r20
 b8e:	33 27       	eor	r19, r19
 b90:	a0 0d       	add	r26, r0
 b92:	61 1d       	adc	r22, r1
 b94:	23 1f       	adc	r18, r19
 b96:	84 9f       	mul	r24, r20
 b98:	60 0d       	add	r22, r0
 b9a:	21 1d       	adc	r18, r1
 b9c:	82 2f       	mov	r24, r18
 b9e:	76 2f       	mov	r23, r22
 ba0:	6a 2f       	mov	r22, r26
 ba2:	11 24       	eor	r1, r1
 ba4:	9f 57       	subi	r25, 0x7F	; 127
 ba6:	50 40       	sbci	r21, 0x00	; 0
 ba8:	9a f0       	brmi	.+38     	; 0xbd0 <__mulsf3_pse+0x88>
 baa:	f1 f0       	breq	.+60     	; 0xbe8 <__mulsf3_pse+0xa0>
 bac:	88 23       	and	r24, r24
 bae:	4a f0       	brmi	.+18     	; 0xbc2 <__mulsf3_pse+0x7a>
 bb0:	ee 0f       	add	r30, r30
 bb2:	ff 1f       	adc	r31, r31
 bb4:	bb 1f       	adc	r27, r27
 bb6:	66 1f       	adc	r22, r22
 bb8:	77 1f       	adc	r23, r23
 bba:	88 1f       	adc	r24, r24
 bbc:	91 50       	subi	r25, 0x01	; 1
 bbe:	50 40       	sbci	r21, 0x00	; 0
 bc0:	a9 f7       	brne	.-22     	; 0xbac <__mulsf3_pse+0x64>
 bc2:	9e 3f       	cpi	r25, 0xFE	; 254
 bc4:	51 05       	cpc	r21, r1
 bc6:	80 f0       	brcs	.+32     	; 0xbe8 <__mulsf3_pse+0xa0>
 bc8:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__fp_inf>
 bcc:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_szero>
 bd0:	5f 3f       	cpi	r21, 0xFF	; 255
 bd2:	e4 f3       	brlt	.-8      	; 0xbcc <__mulsf3_pse+0x84>
 bd4:	98 3e       	cpi	r25, 0xE8	; 232
 bd6:	d4 f3       	brlt	.-12     	; 0xbcc <__mulsf3_pse+0x84>
 bd8:	86 95       	lsr	r24
 bda:	77 95       	ror	r23
 bdc:	67 95       	ror	r22
 bde:	b7 95       	ror	r27
 be0:	f7 95       	ror	r31
 be2:	e7 95       	ror	r30
 be4:	9f 5f       	subi	r25, 0xFF	; 255
 be6:	c1 f7       	brne	.-16     	; 0xbd8 <__mulsf3_pse+0x90>
 be8:	fe 2b       	or	r31, r30
 bea:	88 0f       	add	r24, r24
 bec:	91 1d       	adc	r25, r1
 bee:	96 95       	lsr	r25
 bf0:	87 95       	ror	r24
 bf2:	97 f9       	bld	r25, 7
 bf4:	08 95       	ret

00000bf6 <__fp_inf>:
 bf6:	97 f9       	bld	r25, 7
 bf8:	9f 67       	ori	r25, 0x7F	; 127
 bfa:	80 e8       	ldi	r24, 0x80	; 128
 bfc:	70 e0       	ldi	r23, 0x00	; 0
 bfe:	60 e0       	ldi	r22, 0x00	; 0
 c00:	08 95       	ret

00000c02 <__fp_nan>:
 c02:	9f ef       	ldi	r25, 0xFF	; 255
 c04:	80 ec       	ldi	r24, 0xC0	; 192
 c06:	08 95       	ret

00000c08 <__fp_pscA>:
 c08:	00 24       	eor	r0, r0
 c0a:	0a 94       	dec	r0
 c0c:	16 16       	cp	r1, r22
 c0e:	17 06       	cpc	r1, r23
 c10:	18 06       	cpc	r1, r24
 c12:	09 06       	cpc	r0, r25
 c14:	08 95       	ret

00000c16 <__fp_pscB>:
 c16:	00 24       	eor	r0, r0
 c18:	0a 94       	dec	r0
 c1a:	12 16       	cp	r1, r18
 c1c:	13 06       	cpc	r1, r19
 c1e:	14 06       	cpc	r1, r20
 c20:	05 06       	cpc	r0, r21
 c22:	08 95       	ret

00000c24 <__fp_round>:
 c24:	09 2e       	mov	r0, r25
 c26:	03 94       	inc	r0
 c28:	00 0c       	add	r0, r0
 c2a:	11 f4       	brne	.+4      	; 0xc30 <__fp_round+0xc>
 c2c:	88 23       	and	r24, r24
 c2e:	52 f0       	brmi	.+20     	; 0xc44 <__fp_round+0x20>
 c30:	bb 0f       	add	r27, r27
 c32:	40 f4       	brcc	.+16     	; 0xc44 <__fp_round+0x20>
 c34:	bf 2b       	or	r27, r31
 c36:	11 f4       	brne	.+4      	; 0xc3c <__fp_round+0x18>
 c38:	60 ff       	sbrs	r22, 0
 c3a:	04 c0       	rjmp	.+8      	; 0xc44 <__fp_round+0x20>
 c3c:	6f 5f       	subi	r22, 0xFF	; 255
 c3e:	7f 4f       	sbci	r23, 0xFF	; 255
 c40:	8f 4f       	sbci	r24, 0xFF	; 255
 c42:	9f 4f       	sbci	r25, 0xFF	; 255
 c44:	08 95       	ret

00000c46 <__itoa_ncheck>:
 c46:	bb 27       	eor	r27, r27
 c48:	4a 30       	cpi	r20, 0x0A	; 10
 c4a:	31 f4       	brne	.+12     	; 0xc58 <__itoa_ncheck+0x12>
 c4c:	99 23       	and	r25, r25
 c4e:	22 f4       	brpl	.+8      	; 0xc58 <__itoa_ncheck+0x12>
 c50:	bd e2       	ldi	r27, 0x2D	; 45
 c52:	90 95       	com	r25
 c54:	81 95       	neg	r24
 c56:	9f 4f       	sbci	r25, 0xFF	; 255
 c58:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__utoa_common>

00000c5c <__utoa_ncheck>:
 c5c:	bb 27       	eor	r27, r27

00000c5e <__utoa_common>:
 c5e:	fb 01       	movw	r30, r22
 c60:	55 27       	eor	r21, r21
 c62:	aa 27       	eor	r26, r26
 c64:	88 0f       	add	r24, r24
 c66:	99 1f       	adc	r25, r25
 c68:	aa 1f       	adc	r26, r26
 c6a:	a4 17       	cp	r26, r20
 c6c:	10 f0       	brcs	.+4      	; 0xc72 <__utoa_common+0x14>
 c6e:	a4 1b       	sub	r26, r20
 c70:	83 95       	inc	r24
 c72:	50 51       	subi	r21, 0x10	; 16
 c74:	b9 f7       	brne	.-18     	; 0xc64 <__utoa_common+0x6>
 c76:	a0 5d       	subi	r26, 0xD0	; 208
 c78:	aa 33       	cpi	r26, 0x3A	; 58
 c7a:	08 f0       	brcs	.+2      	; 0xc7e <__utoa_common+0x20>
 c7c:	a9 5d       	subi	r26, 0xD9	; 217
 c7e:	a1 93       	st	Z+, r26
 c80:	00 97       	sbiw	r24, 0x00	; 0
 c82:	79 f7       	brne	.-34     	; 0xc62 <__utoa_common+0x4>
 c84:	b1 11       	cpse	r27, r1
 c86:	b1 93       	st	Z+, r27
 c88:	11 92       	st	Z+, r1
 c8a:	cb 01       	movw	r24, r22
 c8c:	0c 94 48 06 	jmp	0xc90	; 0xc90 <strrev>

00000c90 <strrev>:
 c90:	dc 01       	movw	r26, r24
 c92:	fc 01       	movw	r30, r24
 c94:	67 2f       	mov	r22, r23
 c96:	71 91       	ld	r23, Z+
 c98:	77 23       	and	r23, r23
 c9a:	e1 f7       	brne	.-8      	; 0xc94 <strrev+0x4>
 c9c:	32 97       	sbiw	r30, 0x02	; 2
 c9e:	04 c0       	rjmp	.+8      	; 0xca8 <strrev+0x18>
 ca0:	7c 91       	ld	r23, X
 ca2:	6d 93       	st	X+, r22
 ca4:	70 83       	st	Z, r23
 ca6:	62 91       	ld	r22, -Z
 ca8:	ae 17       	cp	r26, r30
 caa:	bf 07       	cpc	r27, r31
 cac:	c8 f3       	brcs	.-14     	; 0xca0 <strrev+0x10>
 cae:	08 95       	ret

00000cb0 <_exit>:
 cb0:	f8 94       	cli

00000cb2 <__stop_program>:
 cb2:	ff cf       	rjmp	.-2      	; 0xcb2 <__stop_program>
