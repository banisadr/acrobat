
Acrobot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000082e  000008c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000082e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800108  00800108  000008ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008ca  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  000008fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000105b  00000000  00000000  00000a02  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000346  00000000  00000000  00001a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000696  00000000  00000000  00001da3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000368  00000000  00000000  0000243c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000051b  00000000  00000000  000027a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001981  00000000  00000000  00002cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00004640  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__ctors_end>
   4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  10:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  14:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  18:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  1c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  20:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  24:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  28:	0c 94 35 01 	jmp	0x26a	; 0x26a <__vector_10>
  2c:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__vector_11>
  30:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  34:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  38:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  3c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  40:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  44:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  48:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  4c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  54:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  58:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  5c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  60:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  64:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  68:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  6c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  70:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  74:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  78:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  7c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  80:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  84:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  88:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  8c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  90:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  94:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  98:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  9c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>

000000ac <__trampolines_end>:
  ac:	00 01       	movw	r0, r0
  ae:	00 00       	nop
  b0:	43 01       	movw	r8, r6
  b2:	12 00       	.word	0x0012	; ????
  b4:	02 00       	.word	0x0002	; ????
  b6:	00 00       	nop
  b8:	01 43       	sbci	r16, 0x31	; 49
  ba:	00 03       	mulsu	r16, r16
  bc:	00 00       	nop
  be:	fc 00       	.word	0x00fc	; ????
  c0:	04 01       	movw	r0, r8
  c2:	03 09       	sbc	r16, r3
  c4:	04 e8       	ldi	r16, 0x84	; 132
  c6:	00 12       	cpse	r0, r16
  c8:	02 03       	mulsu	r16, r18
  ca:	09 04       	cpc	r0, r9
  cc:	e0 00       	.word	0x00e0	; ????
  ce:	06 03       	mulsu	r16, r22
  d0:	03 09       	sbc	r16, r3
  d2:	04 d6       	rcall	.+3080   	; 0xcdc <__stack+0x1dd>
  d4:	00 08       	sbc	r0, r0

000000d6 <string3>:
  d6:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000000e0 <string2>:
  e0:	06 03 4d 00 32 00 00 00                             ..M.2...

000000e8 <string1>:
  e8:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
  f8:	65 00 00 00                                         e...

000000fc <string0>:
  fc:	04 03 09 04                                         ....

00000100 <config1_descriptor>:
 100:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 110:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 120:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 130:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 140:	40 00 00                                            @..

00000143 <device_descriptor>:
 143:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 153:	03 01                                               ..

00000155 <endpoint_config_table>:
 155:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

00000160 <__ctors_end>:
 160:	11 24       	eor	r1, r1
 162:	1f be       	out	0x3f, r1	; 63
 164:	cf ef       	ldi	r28, 0xFF	; 255
 166:	da e0       	ldi	r29, 0x0A	; 10
 168:	de bf       	out	0x3e, r29	; 62
 16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
 16c:	11 e0       	ldi	r17, 0x01	; 1
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b1 e0       	ldi	r27, 0x01	; 1
 172:	ee e2       	ldi	r30, 0x2E	; 46
 174:	f8 e0       	ldi	r31, 0x08	; 8
 176:	02 c0       	rjmp	.+4      	; 0x17c <__do_copy_data+0x10>
 178:	05 90       	lpm	r0, Z+
 17a:	0d 92       	st	X+, r0
 17c:	a8 30       	cpi	r26, 0x08	; 8
 17e:	b1 07       	cpc	r27, r17
 180:	d9 f7       	brne	.-10     	; 0x178 <__do_copy_data+0xc>

00000182 <__do_clear_bss>:
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	a8 e0       	ldi	r26, 0x08	; 8
 186:	b1 e0       	ldi	r27, 0x01	; 1
 188:	01 c0       	rjmp	.+2      	; 0x18c <.do_clear_bss_start>

0000018a <.do_clear_bss_loop>:
 18a:	1d 92       	st	X+, r1

0000018c <.do_clear_bss_start>:
 18c:	ab 30       	cpi	r26, 0x0B	; 11
 18e:	b2 07       	cpc	r27, r18
 190:	e1 f7       	brne	.-8      	; 0x18a <.do_clear_bss_loop>
 192:	0e 94 13 01 	call	0x226	; 0x226 <main>
 196:	0c 94 15 04 	jmp	0x82a	; 0x82a <_exit>

0000019a <__bad_interrupt>:
 19a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019e <init>:
		}
    }
}

void init() {
	m_usb_init(); //initialize USB communication 
 19e:	0e 94 1c 01 	call	0x238	; 0x238 <m_usb_init>
	m_clockdivide(CLOCK_DIVIDE); //set clock divide 
 1a2:	e1 e6       	ldi	r30, 0x61	; 97
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 e8       	ldi	r24, 0x80	; 128
 1a8:	80 83       	st	Z, r24
 1aa:	10 82       	st	Z, r1
	m_green(ON); 
 1ac:	6a 9a       	sbi	0x0d, 2	; 13
 1ae:	72 98       	cbi	0x0e, 2	; 14
	
	//Timer initialization
	clear(TCCR1B,CS12);	//start with timer1 off
 1b0:	e1 e8       	ldi	r30, 0x81	; 129
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	8b 7f       	andi	r24, 0xFB	; 251
 1b8:	80 83       	st	Z, r24
	clear(TCCR1B,CS11);
 1ba:	80 81       	ld	r24, Z
 1bc:	8d 7f       	andi	r24, 0xFD	; 253
 1be:	80 83       	st	Z, r24
	clear(TCCR1B,CS10);
 1c0:	80 81       	ld	r24, Z
 1c2:	8e 7f       	andi	r24, 0xFE	; 254
 1c4:	80 83       	st	Z, r24
	
	set(TCCR1B,WGM13);	//Use timer mode 15 (up to OCR1A, PWM mode)
 1c6:	80 81       	ld	r24, Z
 1c8:	80 61       	ori	r24, 0x10	; 16
 1ca:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
 1cc:	80 81       	ld	r24, Z
 1ce:	88 60       	ori	r24, 0x08	; 8
 1d0:	80 83       	st	Z, r24
	set(TCCR1A,WGM11);
 1d2:	e0 e8       	ldi	r30, 0x80	; 128
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	82 60       	ori	r24, 0x02	; 2
 1da:	80 83       	st	Z, r24
	set(TCCR1A,WGM10);
 1dc:	80 81       	ld	r24, Z
 1de:	81 60       	ori	r24, 0x01	; 1
 1e0:	80 83       	st	Z, r24
	
	set(DDRB,6);	//enable digital output on pin B6
 1e2:	26 9a       	sbi	0x04, 6	; 4
	
	set(TCCR1A,COM1B1);		//clear at OCR1B, set at OCR1A
 1e4:	80 81       	ld	r24, Z
 1e6:	80 62       	ori	r24, 0x20	; 32
 1e8:	80 83       	st	Z, r24
	clear(TCCR1A,COM1B0);
 1ea:	80 81       	ld	r24, Z
 1ec:	8f 7e       	andi	r24, 0xEF	; 239
 1ee:	80 83       	st	Z, r24
	
	OCR1A = CLOCK_SPEED/PWM_FREQ;
 1f0:	e8 e8       	ldi	r30, 0x88	; 136
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 e4       	ldi	r24, 0x40	; 64
 1f6:	9c e9       	ldi	r25, 0x9C	; 156
 1f8:	91 83       	std	Z+1, r25	; 0x01
 1fa:	80 83       	st	Z, r24
	OCR1B = (float)OCR1A*DUTY_CYCLE;
 1fc:	60 81       	ld	r22, Z
 1fe:	71 81       	ldd	r23, Z+1	; 0x01
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 24 03 	call	0x648	; 0x648 <__floatunsisf>
 208:	2d ec       	ldi	r18, 0xCD	; 205
 20a:	3c ec       	ldi	r19, 0xCC	; 204
 20c:	4c ec       	ldi	r20, 0xCC	; 204
 20e:	5e e3       	ldi	r21, 0x3E	; 62
 210:	0e 94 8a 03 	call	0x714	; 0x714 <__mulsf3>
 214:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__fixunssfsi>
 218:	70 93 8b 00 	sts	0x008B, r23
 21c:	60 93 8a 00 	sts	0x008A, r22
	
	//IO initalization 
	set(DDRC,6);	//enable digital output on pin C6 (invert state)
 220:	3e 9a       	sbi	0x07, 6	; 7
	//set(DDRC,7);	//enable digital output on pin C7 
	clear(PORTC,6);	//start with both pins low 
 222:	46 98       	cbi	0x08, 6	; 8
 224:	08 95       	ret

00000226 <main>:
void init(); //function prototyping 


int main(void)
{
	init();
 226:	0e 94 cf 00 	call	0x19e	; 0x19e <init>
	set(TCCR1B,CS10);
 22a:	e1 e8       	ldi	r30, 0x81	; 129
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	81 60       	ori	r24, 0x01	; 1
 232:	80 83       	st	Z, r24
    while(1)
    {
        if(INVERT){
			set(PORTC,6);
 234:	46 9a       	sbi	0x08, 6	; 8
 236:	fe cf       	rjmp	.-4      	; 0x234 <main+0xe>

00000238 <m_usb_init>:
			case 51: UEDATX = *buffer++;
			case 50: UEDATX = *buffer++;
			case 49: UEDATX = *buffer++;
			case 48: UEDATX = *buffer++;
			case 47: UEDATX = *buffer++;
			case 46: UEDATX = *buffer++;
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	80 93 d7 00 	sts	0x00D7, r24
 23e:	80 ea       	ldi	r24, 0xA0	; 160
 240:	80 93 d8 00 	sts	0x00D8, r24
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 244:	82 e1       	ldi	r24, 0x12	; 18
			case 50: UEDATX = *buffer++;
			case 49: UEDATX = *buffer++;
			case 48: UEDATX = *buffer++;
			case 47: UEDATX = *buffer++;
			case 46: UEDATX = *buffer++;
			case 45: UEDATX = *buffer++;
 246:	89 bd       	out	0x29, r24	; 41
 248:	09 b4       	in	r0, 0x29	; 41
 24a:	00 fe       	sbrs	r0, 0
 24c:	fd cf       	rjmp	.-6      	; 0x248 <m_usb_init+0x10>
 24e:	80 e9       	ldi	r24, 0x90	; 144
 250:	80 93 d8 00 	sts	0x00D8, r24
 254:	10 92 e0 00 	sts	0x00E0, r1
			case 44: UEDATX = *buffer++;
 258:	10 92 0a 01 	sts	0x010A, r1
 25c:	10 92 08 01 	sts	0x0108, r1
 260:	8c e0       	ldi	r24, 0x0C	; 12
 262:	80 93 e2 00 	sts	0x00E2, r24
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 266:	78 94       	sei
			case 48: UEDATX = *buffer++;
			case 47: UEDATX = *buffer++;
			case 46: UEDATX = *buffer++;
			case 45: UEDATX = *buffer++;
			case 44: UEDATX = *buffer++;
			case 43: UEDATX = *buffer++;
 268:	08 95       	ret

0000026a <__vector_10>:
 26a:	1f 92       	push	r1
 26c:	0f 92       	push	r0
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	0f 92       	push	r0
 272:	11 24       	eor	r1, r1
 274:	8f 93       	push	r24
 276:	9f 93       	push	r25
			case 42: UEDATX = *buffer++;
 278:	ef 93       	push	r30
 27a:	ff 93       	push	r31
 27c:	e1 ee       	ldi	r30, 0xE1	; 225
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	10 82       	st	Z, r1
 284:	83 ff       	sbrs	r24, 3
 286:	11 c0       	rjmp	.+34     	; 0x2aa <__vector_10+0x40>
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 288:	10 92 e9 00 	sts	0x00E9, r1
			case 46: UEDATX = *buffer++;
			case 45: UEDATX = *buffer++;
			case 44: UEDATX = *buffer++;
			case 43: UEDATX = *buffer++;
			case 42: UEDATX = *buffer++;
			case 41: UEDATX = *buffer++;
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	90 93 eb 00 	sts	0x00EB, r25
 292:	10 92 ec 00 	sts	0x00EC, r1
 296:	92 e1       	ldi	r25, 0x12	; 18
 298:	90 93 ed 00 	sts	0x00ED, r25
			case 40: UEDATX = *buffer++;
 29c:	98 e0       	ldi	r25, 0x08	; 8
 29e:	90 93 f0 00 	sts	0x00F0, r25
 2a2:	10 92 0a 01 	sts	0x010A, r1
 2a6:	10 92 08 01 	sts	0x0108, r1
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 2aa:	82 ff       	sbrs	r24, 2
			case 44: UEDATX = *buffer++;
			case 43: UEDATX = *buffer++;
			case 42: UEDATX = *buffer++;
			case 41: UEDATX = *buffer++;
			case 40: UEDATX = *buffer++;
			case 39: UEDATX = *buffer++;
 2ac:	13 c0       	rjmp	.+38     	; 0x2d4 <__vector_10+0x6a>
 2ae:	80 91 0a 01 	lds	r24, 0x010A
 2b2:	88 23       	and	r24, r24
 2b4:	79 f0       	breq	.+30     	; 0x2d4 <__vector_10+0x6a>
 2b6:	80 91 09 01 	lds	r24, 0x0109
 2ba:	88 23       	and	r24, r24
			case 38: UEDATX = *buffer++;
 2bc:	59 f0       	breq	.+22     	; 0x2d4 <__vector_10+0x6a>
 2be:	81 50       	subi	r24, 0x01	; 1
 2c0:	80 93 09 01 	sts	0x0109, r24
 2c4:	81 11       	cpse	r24, r1
 2c6:	06 c0       	rjmp	.+12     	; 0x2d4 <__vector_10+0x6a>
 2c8:	84 e0       	ldi	r24, 0x04	; 4
 2ca:	80 93 e9 00 	sts	0x00E9, r24
			case 37: UEDATX = *buffer++;
 2ce:	8a e3       	ldi	r24, 0x3A	; 58
 2d0:	80 93 e8 00 	sts	0x00E8, r24
 2d4:	ff 91       	pop	r31
 2d6:	ef 91       	pop	r30
 2d8:	9f 91       	pop	r25
 2da:	8f 91       	pop	r24
 2dc:	0f 90       	pop	r0
			case 36: UEDATX = *buffer++;
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <__vector_11>:
 2e6:	1f 92       	push	r1
 2e8:	0f 92       	push	r0
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	0f 92       	push	r0
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 2ee:	11 24       	eor	r1, r1
			case 40: UEDATX = *buffer++;
			case 39: UEDATX = *buffer++;
			case 38: UEDATX = *buffer++;
			case 37: UEDATX = *buffer++;
			case 36: UEDATX = *buffer++;
			case 35: UEDATX = *buffer++;
 2f0:	0f 93       	push	r16
 2f2:	1f 93       	push	r17
 2f4:	2f 93       	push	r18
 2f6:	3f 93       	push	r19
 2f8:	4f 93       	push	r20
 2fa:	5f 93       	push	r21
 2fc:	6f 93       	push	r22
 2fe:	7f 93       	push	r23
			case 34: UEDATX = *buffer++;
 300:	8f 93       	push	r24
 302:	9f 93       	push	r25
 304:	af 93       	push	r26
 306:	bf 93       	push	r27
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	ef 93       	push	r30
 30e:	ff 93       	push	r31
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 310:	10 92 e9 00 	sts	0x00E9, r1
			case 38: UEDATX = *buffer++;
			case 37: UEDATX = *buffer++;
			case 36: UEDATX = *buffer++;
			case 35: UEDATX = *buffer++;
			case 34: UEDATX = *buffer++;
			case 33: UEDATX = *buffer++;
 314:	80 91 e8 00 	lds	r24, 0x00E8
 318:	83 ff       	sbrs	r24, 3
 31a:	4e c1       	rjmp	.+668    	; 0x5b8 <__vector_11+0x2d2>
 31c:	e1 ef       	ldi	r30, 0xF1	; 241
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	c0 81       	ld	r28, Z
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
 322:	40 81       	ld	r20, Z
 324:	20 81       	ld	r18, Z
 326:	80 81       	ld	r24, Z
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	38 2b       	or	r19, r24
 32c:	80 81       	ld	r24, Z
 32e:	50 81       	ld	r21, Z
 330:	90 e0       	ldi	r25, 0x00	; 0
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 332:	bc 01       	movw	r22, r24
			case 34: UEDATX = *buffer++;
			case 33: UEDATX = *buffer++;
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
			case 31: UEDATX = *buffer++;
 334:	75 2b       	or	r23, r21
 336:	b0 81       	ld	r27, Z
 338:	a0 81       	ld	r26, Z
 33a:	82 ef       	ldi	r24, 0xF2	; 242
 33c:	80 93 e8 00 	sts	0x00E8, r24
 340:	46 30       	cpi	r20, 0x06	; 6
 342:	09 f0       	breq	.+2      	; 0x346 <__vector_11+0x60>
			case 30: UEDATX = *buffer++;
 344:	58 c0       	rjmp	.+176    	; 0x3f6 <__vector_11+0x110>
 346:	04 c0       	rjmp	.+8      	; 0x350 <__vector_11+0x6a>
 348:	81 e2       	ldi	r24, 0x21	; 33
 34a:	80 93 eb 00 	sts	0x00EB, r24
 34e:	3b c1       	rjmp	.+630    	; 0x5c6 <__vector_11+0x2e0>
 350:	c6 e0       	ldi	r28, 0x06	; 6
 352:	8c ea       	ldi	r24, 0xAC	; 172
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 354:	90 e0       	ldi	r25, 0x00	; 0
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
			case 31: UEDATX = *buffer++;
			case 30: UEDATX = *buffer++;
			case 29: UEDATX = *buffer++;
 356:	fc 01       	movw	r30, r24
 358:	45 91       	lpm	r20, Z+
 35a:	54 91       	lpm	r21, Z
 35c:	24 17       	cp	r18, r20
 35e:	35 07       	cpc	r19, r21
 360:	11 f0       	breq	.+4      	; 0x366 <__vector_11+0x80>
 362:	07 96       	adiw	r24, 0x07	; 7
 364:	23 c0       	rjmp	.+70     	; 0x3ac <__vector_11+0xc6>
			case 28: UEDATX = *buffer++;
 366:	fc 01       	movw	r30, r24
 368:	32 96       	adiw	r30, 0x02	; 2
 36a:	45 91       	lpm	r20, Z+
 36c:	54 91       	lpm	r21, Z
 36e:	64 17       	cp	r22, r20
 370:	75 07       	cpc	r23, r21
 372:	11 f0       	breq	.+4      	; 0x378 <__vector_11+0x92>
 374:	07 96       	adiw	r24, 0x07	; 7
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 376:	1a c0       	rjmp	.+52     	; 0x3ac <__vector_11+0xc6>
			case 32: UEDATX = *buffer++;
			case 31: UEDATX = *buffer++;
			case 30: UEDATX = *buffer++;
			case 29: UEDATX = *buffer++;
			case 28: UEDATX = *buffer++;
			case 27: UEDATX = *buffer++;
 378:	fc 01       	movw	r30, r24
 37a:	34 96       	adiw	r30, 0x04	; 4
 37c:	25 91       	lpm	r18, Z+
 37e:	34 91       	lpm	r19, Z
 380:	fc 01       	movw	r30, r24
 382:	36 96       	adiw	r30, 0x06	; 6
 384:	54 91       	lpm	r21, Z
 386:	8b 2f       	mov	r24, r27
			case 26: UEDATX = *buffer++;
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	9a 2b       	or	r25, r26
 38c:	8f 3f       	cpi	r24, 0xFF	; 255
 38e:	91 05       	cpc	r25, r1
 390:	19 f0       	breq	.+6      	; 0x398 <__vector_11+0xb2>
 392:	10 f0       	brcs	.+4      	; 0x398 <__vector_11+0xb2>
 394:	8f ef       	ldi	r24, 0xFF	; 255
 396:	90 e0       	ldi	r25, 0x00	; 0
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 398:	85 17       	cp	r24, r21
			case 30: UEDATX = *buffer++;
			case 29: UEDATX = *buffer++;
			case 28: UEDATX = *buffer++;
			case 27: UEDATX = *buffer++;
			case 26: UEDATX = *buffer++;
			case 25: UEDATX = *buffer++;
 39a:	08 f4       	brcc	.+2      	; 0x39e <__vector_11+0xb8>
 39c:	58 2f       	mov	r21, r24
 39e:	a8 ee       	ldi	r26, 0xE8	; 232
 3a0:	b0 e0       	ldi	r27, 0x00	; 0
 3a2:	70 e1       	ldi	r23, 0x10	; 16
 3a4:	6e ef       	ldi	r22, 0xFE	; 254
 3a6:	c1 ef       	ldi	r28, 0xF1	; 241
 3a8:	d0 e0       	ldi	r29, 0x00	; 0
			case 24: UEDATX = *buffer++;
 3aa:	03 c0       	rjmp	.+6      	; 0x3b2 <__vector_11+0xcc>
 3ac:	c1 50       	subi	r28, 0x01	; 1
 3ae:	99 f6       	brne	.-90     	; 0x356 <__vector_11+0x70>
 3b0:	cb cf       	rjmp	.-106    	; 0x348 <__vector_11+0x62>
 3b2:	8c 91       	ld	r24, X
 3b4:	98 2f       	mov	r25, r24
 3b6:	95 70       	andi	r25, 0x05	; 5
 3b8:	e1 f3       	breq	.-8      	; 0x3b2 <__vector_11+0xcc>
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 3ba:	82 fd       	sbrc	r24, 2
			case 28: UEDATX = *buffer++;
			case 27: UEDATX = *buffer++;
			case 26: UEDATX = *buffer++;
			case 25: UEDATX = *buffer++;
			case 24: UEDATX = *buffer++;
			case 23: UEDATX = *buffer++;
 3bc:	04 c1       	rjmp	.+520    	; 0x5c6 <__vector_11+0x2e0>
 3be:	45 2f       	mov	r20, r21
 3c0:	51 31       	cpi	r21, 0x11	; 17
 3c2:	08 f0       	brcs	.+2      	; 0x3c6 <__vector_11+0xe0>
 3c4:	47 2f       	mov	r20, r23
 3c6:	44 23       	and	r20, r20
 3c8:	09 f4       	brne	.+2      	; 0x3cc <__vector_11+0xe6>
 3ca:	fa c0       	rjmp	.+500    	; 0x5c0 <__vector_11+0x2da>
			case 22: UEDATX = *buffer++;
 3cc:	f9 01       	movw	r30, r18
 3ce:	84 2f       	mov	r24, r20
 3d0:	94 91       	lpm	r25, Z
 3d2:	98 83       	st	Y, r25
 3d4:	81 50       	subi	r24, 0x01	; 1
 3d6:	31 96       	adiw	r30, 0x01	; 1
 3d8:	81 11       	cpse	r24, r1
 3da:	fa cf       	rjmp	.-12     	; 0x3d0 <__vector_11+0xea>
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 3dc:	8f ef       	ldi	r24, 0xFF	; 255
			case 26: UEDATX = *buffer++;
			case 25: UEDATX = *buffer++;
			case 24: UEDATX = *buffer++;
			case 23: UEDATX = *buffer++;
			case 22: UEDATX = *buffer++;
			case 21: UEDATX = *buffer++;
 3de:	84 0f       	add	r24, r20
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	01 96       	adiw	r24, 0x01	; 1
 3e4:	28 0f       	add	r18, r24
 3e6:	39 1f       	adc	r19, r25
 3e8:	54 1b       	sub	r21, r20
 3ea:	6c 93       	st	X, r22
 3ec:	51 11       	cpse	r21, r1
			case 20: UEDATX = *buffer++;
 3ee:	e1 cf       	rjmp	.-62     	; 0x3b2 <__vector_11+0xcc>
 3f0:	40 31       	cpi	r20, 0x10	; 16
 3f2:	f9 f2       	breq	.-66     	; 0x3b2 <__vector_11+0xcc>
 3f4:	e8 c0       	rjmp	.+464    	; 0x5c6 <__vector_11+0x2e0>
 3f6:	45 30       	cpi	r20, 0x05	; 5
 3f8:	61 f4       	brne	.+24     	; 0x412 <__vector_11+0x12c>
 3fa:	8e ef       	ldi	r24, 0xFE	; 254
 3fc:	80 93 e8 00 	sts	0x00E8, r24
			case 19: UEDATX = *buffer++;
 400:	e8 ee       	ldi	r30, 0xE8	; 232
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	80 ff       	sbrs	r24, 0
 408:	fd cf       	rjmp	.-6      	; 0x404 <__vector_11+0x11e>
 40a:	20 68       	ori	r18, 0x80	; 128
 40c:	20 93 e3 00 	sts	0x00E3, r18
			case 18: UEDATX = *buffer++;
 410:	da c0       	rjmp	.+436    	; 0x5c6 <__vector_11+0x2e0>
 412:	49 30       	cpi	r20, 0x09	; 9
 414:	09 f0       	breq	.+2      	; 0x418 <__vector_11+0x132>
 416:	36 c0       	rjmp	.+108    	; 0x484 <__vector_11+0x19e>
 418:	c1 11       	cpse	r28, r1
 41a:	5f c0       	rjmp	.+190    	; 0x4da <__vector_11+0x1f4>
 41c:	20 93 0a 01 	sts	0x010A, r18
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 420:	10 92 08 01 	sts	0x0108, r1
			case 22: UEDATX = *buffer++;
			case 21: UEDATX = *buffer++;
			case 20: UEDATX = *buffer++;
			case 19: UEDATX = *buffer++;
			case 18: UEDATX = *buffer++;
			case 17: UEDATX = *buffer++;
 424:	10 92 09 01 	sts	0x0109, r1
 428:	8e ef       	ldi	r24, 0xFE	; 254
 42a:	80 93 e8 00 	sts	0x00E8, r24
 42e:	11 e0       	ldi	r17, 0x01	; 1
 430:	85 e5       	ldi	r24, 0x55	; 85
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	c9 ee       	ldi	r28, 0xE9	; 233
 436:	d0 e0       	ldi	r29, 0x00	; 0
 438:	ab ee       	ldi	r26, 0xEB	; 235
 43a:	b0 e0       	ldi	r27, 0x00	; 0
 43c:	6c ee       	ldi	r22, 0xEC	; 236
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	4d ee       	ldi	r20, 0xED	; 237
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 442:	50 e0       	ldi	r21, 0x00	; 0
			case 18: UEDATX = *buffer++;
			case 17: UEDATX = *buffer++;
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
			case 15: UEDATX = *buffer++;
 444:	18 83       	st	Y, r17
 446:	9c 01       	movw	r18, r24
 448:	2f 5f       	subi	r18, 0xFF	; 255
 44a:	3f 4f       	sbci	r19, 0xFF	; 255
 44c:	fc 01       	movw	r30, r24
 44e:	04 91       	lpm	r16, Z
 450:	0c 93       	st	X, r16
 452:	00 23       	and	r16, r16
			case 14: UEDATX = *buffer++;
 454:	61 f0       	breq	.+24     	; 0x46e <__vector_11+0x188>
 456:	f9 01       	movw	r30, r18
 458:	24 91       	lpm	r18, Z
 45a:	fb 01       	movw	r30, r22
 45c:	20 83       	st	Z, r18
 45e:	9c 01       	movw	r18, r24
 460:	2d 5f       	subi	r18, 0xFD	; 253
 462:	3f 4f       	sbci	r19, 0xFF	; 255
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 464:	fc 01       	movw	r30, r24
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
			case 15: UEDATX = *buffer++;
			case 14: UEDATX = *buffer++;
			case 13: UEDATX = *buffer++;
 466:	32 96       	adiw	r30, 0x02	; 2
 468:	84 91       	lpm	r24, Z
 46a:	fa 01       	movw	r30, r20
 46c:	80 83       	st	Z, r24
 46e:	1f 5f       	subi	r17, 0xFF	; 255
 470:	15 30       	cpi	r17, 0x05	; 5
 472:	11 f0       	breq	.+4      	; 0x478 <__vector_11+0x192>
 474:	c9 01       	movw	r24, r18
			case 12: UEDATX = *buffer++;
 476:	e6 cf       	rjmp	.-52     	; 0x444 <__vector_11+0x15e>
 478:	ea ee       	ldi	r30, 0xEA	; 234
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	8e e1       	ldi	r24, 0x1E	; 30
 47e:	80 83       	st	Z, r24
 480:	10 82       	st	Z, r1
 482:	a1 c0       	rjmp	.+322    	; 0x5c6 <__vector_11+0x2e0>
 484:	48 30       	cpi	r20, 0x08	; 8
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 486:	81 f4       	brne	.+32     	; 0x4a8 <__vector_11+0x1c2>
			case 16: UEDATX = *buffer++;
			case 15: UEDATX = *buffer++;
			case 14: UEDATX = *buffer++;
			case 13: UEDATX = *buffer++;
			case 12: UEDATX = *buffer++;
			case 11: UEDATX = *buffer++;
 488:	c0 38       	cpi	r28, 0x80	; 128
 48a:	09 f0       	breq	.+2      	; 0x48e <__vector_11+0x1a8>
 48c:	42 c0       	rjmp	.+132    	; 0x512 <__vector_11+0x22c>
 48e:	e8 ee       	ldi	r30, 0xE8	; 232
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	80 ff       	sbrs	r24, 0
 496:	fd cf       	rjmp	.-6      	; 0x492 <__vector_11+0x1ac>
			case 10: UEDATX = *buffer++;
 498:	80 91 0a 01 	lds	r24, 0x010A
 49c:	80 93 f1 00 	sts	0x00F1, r24
 4a0:	8e ef       	ldi	r24, 0xFE	; 254
 4a2:	80 93 e8 00 	sts	0x00E8, r24
 4a6:	8f c0       	rjmp	.+286    	; 0x5c6 <__vector_11+0x2e0>
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 4a8:	41 32       	cpi	r20, 0x21	; 33
			case 14: UEDATX = *buffer++;
			case 13: UEDATX = *buffer++;
			case 12: UEDATX = *buffer++;
			case 11: UEDATX = *buffer++;
			case 10: UEDATX = *buffer++;
			case  9: UEDATX = *buffer++;
 4aa:	b9 f4       	brne	.+46     	; 0x4da <__vector_11+0x1f4>
 4ac:	c1 3a       	cpi	r28, 0xA1	; 161
 4ae:	09 f0       	breq	.+2      	; 0x4b2 <__vector_11+0x1cc>
 4b0:	40 c0       	rjmp	.+128    	; 0x532 <__vector_11+0x24c>
 4b2:	e8 ee       	ldi	r30, 0xE8	; 232
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	80 81       	ld	r24, Z
 4b8:	80 ff       	sbrs	r24, 0
			#endif
			case  8: UEDATX = *buffer++;
 4ba:	fd cf       	rjmp	.-6      	; 0x4b6 <__vector_11+0x1d0>
 4bc:	e0 e0       	ldi	r30, 0x00	; 0
 4be:	f1 e0       	ldi	r31, 0x01	; 1
 4c0:	87 e0       	ldi	r24, 0x07	; 7
 4c2:	91 e0       	ldi	r25, 0x01	; 1
 4c4:	a1 ef       	ldi	r26, 0xF1	; 241
 4c6:	b0 e0       	ldi	r27, 0x00	; 0
 4c8:	21 91       	ld	r18, Z+
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 4ca:	2c 93       	st	X, r18
			case 11: UEDATX = *buffer++;
			case 10: UEDATX = *buffer++;
			case  9: UEDATX = *buffer++;
			#endif
			case  8: UEDATX = *buffer++;
			case  7: UEDATX = *buffer++;
 4cc:	e8 17       	cp	r30, r24
 4ce:	f9 07       	cpc	r31, r25
 4d0:	d9 f7       	brne	.-10     	; 0x4c8 <__vector_11+0x1e2>
 4d2:	8e ef       	ldi	r24, 0xFE	; 254
 4d4:	80 93 e8 00 	sts	0x00E8, r24
 4d8:	76 c0       	rjmp	.+236    	; 0x5c6 <__vector_11+0x2e0>
 4da:	40 32       	cpi	r20, 0x20	; 32
			case  6: UEDATX = *buffer++;
 4dc:	d1 f4       	brne	.+52     	; 0x512 <__vector_11+0x22c>
 4de:	c1 32       	cpi	r28, 0x21	; 33
 4e0:	09 f0       	breq	.+2      	; 0x4e4 <__vector_11+0x1fe>
 4e2:	43 c0       	rjmp	.+134    	; 0x56a <__vector_11+0x284>
 4e4:	e8 ee       	ldi	r30, 0xE8	; 232
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	80 81       	ld	r24, Z
 4ea:	82 ff       	sbrs	r24, 2
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 4ec:	fd cf       	rjmp	.-6      	; 0x4e8 <__vector_11+0x202>
			case  9: UEDATX = *buffer++;
			#endif
			case  8: UEDATX = *buffer++;
			case  7: UEDATX = *buffer++;
			case  6: UEDATX = *buffer++;
			case  5: UEDATX = *buffer++;
 4ee:	e0 e0       	ldi	r30, 0x00	; 0
 4f0:	f1 e0       	ldi	r31, 0x01	; 1
 4f2:	87 e0       	ldi	r24, 0x07	; 7
 4f4:	91 e0       	ldi	r25, 0x01	; 1
 4f6:	a1 ef       	ldi	r26, 0xF1	; 241
 4f8:	b0 e0       	ldi	r27, 0x00	; 0
 4fa:	2c 91       	ld	r18, X
 4fc:	21 93       	st	Z+, r18
			case  4: UEDATX = *buffer++;
 4fe:	e8 17       	cp	r30, r24
 500:	f9 07       	cpc	r31, r25
 502:	d9 f7       	brne	.-10     	; 0x4fa <__vector_11+0x214>
 504:	e8 ee       	ldi	r30, 0xE8	; 232
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	8b ef       	ldi	r24, 0xFB	; 251
 50a:	80 83       	st	Z, r24
 50c:	8e ef       	ldi	r24, 0xFE	; 254
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 50e:	80 83       	st	Z, r24
			case  8: UEDATX = *buffer++;
			case  7: UEDATX = *buffer++;
			case  6: UEDATX = *buffer++;
			case  5: UEDATX = *buffer++;
			case  4: UEDATX = *buffer++;
			case  3: UEDATX = *buffer++;
 510:	5a c0       	rjmp	.+180    	; 0x5c6 <__vector_11+0x2e0>
 512:	42 32       	cpi	r20, 0x22	; 34
 514:	71 f4       	brne	.+28     	; 0x532 <__vector_11+0x24c>
 516:	c1 32       	cpi	r28, 0x21	; 33
 518:	09 f0       	breq	.+2      	; 0x51c <__vector_11+0x236>
 51a:	4e c0       	rjmp	.+156    	; 0x5b8 <__vector_11+0x2d2>
 51c:	20 93 08 01 	sts	0x0108, r18
			case  2: UEDATX = *buffer++;
 520:	e8 ee       	ldi	r30, 0xE8	; 232
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	80 81       	ld	r24, Z
 526:	80 ff       	sbrs	r24, 0
 528:	fd cf       	rjmp	.-6      	; 0x524 <__vector_11+0x23e>
 52a:	8e ef       	ldi	r24, 0xFE	; 254
 52c:	80 93 e8 00 	sts	0x00E8, r24
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 530:	4a c0       	rjmp	.+148    	; 0x5c6 <__vector_11+0x2e0>
			case  5: UEDATX = *buffer++;
			case  4: UEDATX = *buffer++;
			case  3: UEDATX = *buffer++;
			case  2: UEDATX = *buffer++;
			default:
			case  1: UEDATX = *buffer++;
 532:	41 11       	cpse	r20, r1
 534:	1a c0       	rjmp	.+52     	; 0x56a <__vector_11+0x284>
 536:	e8 ee       	ldi	r30, 0xE8	; 232
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	80 81       	ld	r24, Z
 53c:	80 ff       	sbrs	r24, 0
 53e:	fd cf       	rjmp	.-6      	; 0x53a <__vector_11+0x254>
 540:	c2 38       	cpi	r28, 0x82	; 130
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 542:	51 f4       	brne	.+20     	; 0x558 <__vector_11+0x272>
 544:	e9 ee       	ldi	r30, 0xE9	; 233
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	60 83       	st	Z, r22
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 54a:	80 91 eb 00 	lds	r24, 0x00EB
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
 54e:	85 fb       	bst	r24, 5
 550:	88 27       	eor	r24, r24
 552:	80 f9       	bld	r24, 0
 554:	10 82       	st	Z, r1
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
 556:	01 c0       	rjmp	.+2      	; 0x55a <__vector_11+0x274>
	return 0;
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	e1 ef       	ldi	r30, 0xF1	; 241
int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	80 83       	st	Z, r24
			if (UDFNUML == timeout) {
				transmit_previous_timeout = 1;
				return -1;
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
 560:	10 82       	st	Z, r1
 562:	8e ef       	ldi	r24, 0xFE	; 254
 564:	80 93 e8 00 	sts	0x00E8, r24
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
	return 0;
}
 568:	2e c0       	rjmp	.+92     	; 0x5c6 <__vector_11+0x2e0>
 56a:	84 2f       	mov	r24, r20
 56c:	8d 7f       	andi	r24, 0xFD	; 253
 56e:	81 30       	cpi	r24, 0x01	; 1
 570:	19 f5       	brne	.+70     	; 0x5b8 <__vector_11+0x2d2>
 572:	c2 30       	cpi	r28, 0x02	; 2
 574:	09 f5       	brne	.+66     	; 0x5b8 <__vector_11+0x2d2>
 576:	23 2b       	or	r18, r19
 578:	f9 f4       	brne	.+62     	; 0x5b8 <__vector_11+0x2d2>
 57a:	6f 77       	andi	r22, 0x7F	; 127
 57c:	8f ef       	ldi	r24, 0xFF	; 255
 57e:	86 0f       	add	r24, r22
 580:	84 30       	cpi	r24, 0x04	; 4
 582:	d0 f4       	brcc	.+52     	; 0x5b8 <__vector_11+0x2d2>
 584:	8e ef       	ldi	r24, 0xFE	; 254
 586:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 58a:	60 93 e9 00 	sts	0x00E9, r22
				if (bRequest == SET_FEATURE) {
 58e:	43 30       	cpi	r20, 0x03	; 3
 590:	21 f4       	brne	.+8      	; 0x59a <__vector_11+0x2b4>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
 592:	81 e2       	ldi	r24, 0x21	; 33
 594:	80 93 eb 00 	sts	0x00EB, r24
 598:	16 c0       	rjmp	.+44     	; 0x5c6 <__vector_11+0x2e0>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 59a:	89 e1       	ldi	r24, 0x19	; 25
 59c:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <__vector_11+0x2c4>
 5a6:	88 0f       	add	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	6a 95       	dec	r22
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <__vector_11+0x2c0>
 5ae:	ea ee       	ldi	r30, 0xEA	; 234
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	80 83       	st	Z, r24
					UERST = 0;
 5b4:	10 82       	st	Z, r1
 5b6:	07 c0       	rjmp	.+14     	; 0x5c6 <__vector_11+0x2e0>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 5b8:	81 e2       	ldi	r24, 0x21	; 33
 5ba:	80 93 eb 00 	sts	0x00EB, r24
 5be:	03 c0       	rjmp	.+6      	; 0x5c6 <__vector_11+0x2e0>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5c0:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 5c2:	51 11       	cpse	r21, r1
 5c4:	f6 ce       	rjmp	.-532    	; 0x3b2 <__vector_11+0xcc>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 5c6:	ff 91       	pop	r31
 5c8:	ef 91       	pop	r30
 5ca:	df 91       	pop	r29
 5cc:	cf 91       	pop	r28
 5ce:	bf 91       	pop	r27
 5d0:	af 91       	pop	r26
 5d2:	9f 91       	pop	r25
 5d4:	8f 91       	pop	r24
 5d6:	7f 91       	pop	r23
 5d8:	6f 91       	pop	r22
 5da:	5f 91       	pop	r21
 5dc:	4f 91       	pop	r20
 5de:	3f 91       	pop	r19
 5e0:	2f 91       	pop	r18
 5e2:	1f 91       	pop	r17
 5e4:	0f 91       	pop	r16
 5e6:	0f 90       	pop	r0
 5e8:	0f be       	out	0x3f, r0	; 63
 5ea:	0f 90       	pop	r0
 5ec:	1f 90       	pop	r1
 5ee:	18 95       	reti

000005f0 <__fixunssfsi>:
 5f0:	70 d0       	rcall	.+224    	; 0x6d2 <__fp_splitA>
 5f2:	88 f0       	brcs	.+34     	; 0x616 <__fixunssfsi+0x26>
 5f4:	9f 57       	subi	r25, 0x7F	; 127
 5f6:	90 f0       	brcs	.+36     	; 0x61c <__fixunssfsi+0x2c>
 5f8:	b9 2f       	mov	r27, r25
 5fa:	99 27       	eor	r25, r25
 5fc:	b7 51       	subi	r27, 0x17	; 23
 5fe:	a0 f0       	brcs	.+40     	; 0x628 <__fixunssfsi+0x38>
 600:	d1 f0       	breq	.+52     	; 0x636 <__fixunssfsi+0x46>
 602:	66 0f       	add	r22, r22
 604:	77 1f       	adc	r23, r23
 606:	88 1f       	adc	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	1a f0       	brmi	.+6      	; 0x612 <__fixunssfsi+0x22>
 60c:	ba 95       	dec	r27
 60e:	c9 f7       	brne	.-14     	; 0x602 <__fixunssfsi+0x12>
 610:	12 c0       	rjmp	.+36     	; 0x636 <__fixunssfsi+0x46>
 612:	b1 30       	cpi	r27, 0x01	; 1
 614:	81 f0       	breq	.+32     	; 0x636 <__fixunssfsi+0x46>
 616:	77 d0       	rcall	.+238    	; 0x706 <__fp_zero>
 618:	b1 e0       	ldi	r27, 0x01	; 1
 61a:	08 95       	ret
 61c:	74 c0       	rjmp	.+232    	; 0x706 <__fp_zero>
 61e:	67 2f       	mov	r22, r23
 620:	78 2f       	mov	r23, r24
 622:	88 27       	eor	r24, r24
 624:	b8 5f       	subi	r27, 0xF8	; 248
 626:	39 f0       	breq	.+14     	; 0x636 <__fixunssfsi+0x46>
 628:	b9 3f       	cpi	r27, 0xF9	; 249
 62a:	cc f3       	brlt	.-14     	; 0x61e <__fixunssfsi+0x2e>
 62c:	86 95       	lsr	r24
 62e:	77 95       	ror	r23
 630:	67 95       	ror	r22
 632:	b3 95       	inc	r27
 634:	d9 f7       	brne	.-10     	; 0x62c <__fixunssfsi+0x3c>
 636:	3e f4       	brtc	.+14     	; 0x646 <__fixunssfsi+0x56>
 638:	90 95       	com	r25
 63a:	80 95       	com	r24
 63c:	70 95       	com	r23
 63e:	61 95       	neg	r22
 640:	7f 4f       	sbci	r23, 0xFF	; 255
 642:	8f 4f       	sbci	r24, 0xFF	; 255
 644:	9f 4f       	sbci	r25, 0xFF	; 255
 646:	08 95       	ret

00000648 <__floatunsisf>:
 648:	e8 94       	clt
 64a:	09 c0       	rjmp	.+18     	; 0x65e <__floatsisf+0x12>

0000064c <__floatsisf>:
 64c:	97 fb       	bst	r25, 7
 64e:	3e f4       	brtc	.+14     	; 0x65e <__floatsisf+0x12>
 650:	90 95       	com	r25
 652:	80 95       	com	r24
 654:	70 95       	com	r23
 656:	61 95       	neg	r22
 658:	7f 4f       	sbci	r23, 0xFF	; 255
 65a:	8f 4f       	sbci	r24, 0xFF	; 255
 65c:	9f 4f       	sbci	r25, 0xFF	; 255
 65e:	99 23       	and	r25, r25
 660:	a9 f0       	breq	.+42     	; 0x68c <__floatsisf+0x40>
 662:	f9 2f       	mov	r31, r25
 664:	96 e9       	ldi	r25, 0x96	; 150
 666:	bb 27       	eor	r27, r27
 668:	93 95       	inc	r25
 66a:	f6 95       	lsr	r31
 66c:	87 95       	ror	r24
 66e:	77 95       	ror	r23
 670:	67 95       	ror	r22
 672:	b7 95       	ror	r27
 674:	f1 11       	cpse	r31, r1
 676:	f8 cf       	rjmp	.-16     	; 0x668 <__floatsisf+0x1c>
 678:	fa f4       	brpl	.+62     	; 0x6b8 <__floatsisf+0x6c>
 67a:	bb 0f       	add	r27, r27
 67c:	11 f4       	brne	.+4      	; 0x682 <__floatsisf+0x36>
 67e:	60 ff       	sbrs	r22, 0
 680:	1b c0       	rjmp	.+54     	; 0x6b8 <__floatsisf+0x6c>
 682:	6f 5f       	subi	r22, 0xFF	; 255
 684:	7f 4f       	sbci	r23, 0xFF	; 255
 686:	8f 4f       	sbci	r24, 0xFF	; 255
 688:	9f 4f       	sbci	r25, 0xFF	; 255
 68a:	16 c0       	rjmp	.+44     	; 0x6b8 <__floatsisf+0x6c>
 68c:	88 23       	and	r24, r24
 68e:	11 f0       	breq	.+4      	; 0x694 <__floatsisf+0x48>
 690:	96 e9       	ldi	r25, 0x96	; 150
 692:	11 c0       	rjmp	.+34     	; 0x6b6 <__floatsisf+0x6a>
 694:	77 23       	and	r23, r23
 696:	21 f0       	breq	.+8      	; 0x6a0 <__floatsisf+0x54>
 698:	9e e8       	ldi	r25, 0x8E	; 142
 69a:	87 2f       	mov	r24, r23
 69c:	76 2f       	mov	r23, r22
 69e:	05 c0       	rjmp	.+10     	; 0x6aa <__floatsisf+0x5e>
 6a0:	66 23       	and	r22, r22
 6a2:	71 f0       	breq	.+28     	; 0x6c0 <__floatsisf+0x74>
 6a4:	96 e8       	ldi	r25, 0x86	; 134
 6a6:	86 2f       	mov	r24, r22
 6a8:	70 e0       	ldi	r23, 0x00	; 0
 6aa:	60 e0       	ldi	r22, 0x00	; 0
 6ac:	2a f0       	brmi	.+10     	; 0x6b8 <__floatsisf+0x6c>
 6ae:	9a 95       	dec	r25
 6b0:	66 0f       	add	r22, r22
 6b2:	77 1f       	adc	r23, r23
 6b4:	88 1f       	adc	r24, r24
 6b6:	da f7       	brpl	.-10     	; 0x6ae <__floatsisf+0x62>
 6b8:	88 0f       	add	r24, r24
 6ba:	96 95       	lsr	r25
 6bc:	87 95       	ror	r24
 6be:	97 f9       	bld	r25, 7
 6c0:	08 95       	ret

000006c2 <__fp_split3>:
 6c2:	57 fd       	sbrc	r21, 7
 6c4:	90 58       	subi	r25, 0x80	; 128
 6c6:	44 0f       	add	r20, r20
 6c8:	55 1f       	adc	r21, r21
 6ca:	59 f0       	breq	.+22     	; 0x6e2 <__fp_splitA+0x10>
 6cc:	5f 3f       	cpi	r21, 0xFF	; 255
 6ce:	71 f0       	breq	.+28     	; 0x6ec <__fp_splitA+0x1a>
 6d0:	47 95       	ror	r20

000006d2 <__fp_splitA>:
 6d2:	88 0f       	add	r24, r24
 6d4:	97 fb       	bst	r25, 7
 6d6:	99 1f       	adc	r25, r25
 6d8:	61 f0       	breq	.+24     	; 0x6f2 <__fp_splitA+0x20>
 6da:	9f 3f       	cpi	r25, 0xFF	; 255
 6dc:	79 f0       	breq	.+30     	; 0x6fc <__fp_splitA+0x2a>
 6de:	87 95       	ror	r24
 6e0:	08 95       	ret
 6e2:	12 16       	cp	r1, r18
 6e4:	13 06       	cpc	r1, r19
 6e6:	14 06       	cpc	r1, r20
 6e8:	55 1f       	adc	r21, r21
 6ea:	f2 cf       	rjmp	.-28     	; 0x6d0 <__fp_split3+0xe>
 6ec:	46 95       	lsr	r20
 6ee:	f1 df       	rcall	.-30     	; 0x6d2 <__fp_splitA>
 6f0:	08 c0       	rjmp	.+16     	; 0x702 <__fp_splitA+0x30>
 6f2:	16 16       	cp	r1, r22
 6f4:	17 06       	cpc	r1, r23
 6f6:	18 06       	cpc	r1, r24
 6f8:	99 1f       	adc	r25, r25
 6fa:	f1 cf       	rjmp	.-30     	; 0x6de <__fp_splitA+0xc>
 6fc:	86 95       	lsr	r24
 6fe:	71 05       	cpc	r23, r1
 700:	61 05       	cpc	r22, r1
 702:	08 94       	sec
 704:	08 95       	ret

00000706 <__fp_zero>:
 706:	e8 94       	clt

00000708 <__fp_szero>:
 708:	bb 27       	eor	r27, r27
 70a:	66 27       	eor	r22, r22
 70c:	77 27       	eor	r23, r23
 70e:	cb 01       	movw	r24, r22
 710:	97 f9       	bld	r25, 7
 712:	08 95       	ret

00000714 <__mulsf3>:
 714:	0b d0       	rcall	.+22     	; 0x72c <__mulsf3x>
 716:	78 c0       	rjmp	.+240    	; 0x808 <__fp_round>
 718:	69 d0       	rcall	.+210    	; 0x7ec <__fp_pscA>
 71a:	28 f0       	brcs	.+10     	; 0x726 <__mulsf3+0x12>
 71c:	6e d0       	rcall	.+220    	; 0x7fa <__fp_pscB>
 71e:	18 f0       	brcs	.+6      	; 0x726 <__mulsf3+0x12>
 720:	95 23       	and	r25, r21
 722:	09 f0       	breq	.+2      	; 0x726 <__mulsf3+0x12>
 724:	5a c0       	rjmp	.+180    	; 0x7da <__fp_inf>
 726:	5f c0       	rjmp	.+190    	; 0x7e6 <__fp_nan>
 728:	11 24       	eor	r1, r1
 72a:	ee cf       	rjmp	.-36     	; 0x708 <__fp_szero>

0000072c <__mulsf3x>:
 72c:	ca df       	rcall	.-108    	; 0x6c2 <__fp_split3>
 72e:	a0 f3       	brcs	.-24     	; 0x718 <__mulsf3+0x4>

00000730 <__mulsf3_pse>:
 730:	95 9f       	mul	r25, r21
 732:	d1 f3       	breq	.-12     	; 0x728 <__mulsf3+0x14>
 734:	95 0f       	add	r25, r21
 736:	50 e0       	ldi	r21, 0x00	; 0
 738:	55 1f       	adc	r21, r21
 73a:	62 9f       	mul	r22, r18
 73c:	f0 01       	movw	r30, r0
 73e:	72 9f       	mul	r23, r18
 740:	bb 27       	eor	r27, r27
 742:	f0 0d       	add	r31, r0
 744:	b1 1d       	adc	r27, r1
 746:	63 9f       	mul	r22, r19
 748:	aa 27       	eor	r26, r26
 74a:	f0 0d       	add	r31, r0
 74c:	b1 1d       	adc	r27, r1
 74e:	aa 1f       	adc	r26, r26
 750:	64 9f       	mul	r22, r20
 752:	66 27       	eor	r22, r22
 754:	b0 0d       	add	r27, r0
 756:	a1 1d       	adc	r26, r1
 758:	66 1f       	adc	r22, r22
 75a:	82 9f       	mul	r24, r18
 75c:	22 27       	eor	r18, r18
 75e:	b0 0d       	add	r27, r0
 760:	a1 1d       	adc	r26, r1
 762:	62 1f       	adc	r22, r18
 764:	73 9f       	mul	r23, r19
 766:	b0 0d       	add	r27, r0
 768:	a1 1d       	adc	r26, r1
 76a:	62 1f       	adc	r22, r18
 76c:	83 9f       	mul	r24, r19
 76e:	a0 0d       	add	r26, r0
 770:	61 1d       	adc	r22, r1
 772:	22 1f       	adc	r18, r18
 774:	74 9f       	mul	r23, r20
 776:	33 27       	eor	r19, r19
 778:	a0 0d       	add	r26, r0
 77a:	61 1d       	adc	r22, r1
 77c:	23 1f       	adc	r18, r19
 77e:	84 9f       	mul	r24, r20
 780:	60 0d       	add	r22, r0
 782:	21 1d       	adc	r18, r1
 784:	82 2f       	mov	r24, r18
 786:	76 2f       	mov	r23, r22
 788:	6a 2f       	mov	r22, r26
 78a:	11 24       	eor	r1, r1
 78c:	9f 57       	subi	r25, 0x7F	; 127
 78e:	50 40       	sbci	r21, 0x00	; 0
 790:	8a f0       	brmi	.+34     	; 0x7b4 <__mulsf3_pse+0x84>
 792:	e1 f0       	breq	.+56     	; 0x7cc <__mulsf3_pse+0x9c>
 794:	88 23       	and	r24, r24
 796:	4a f0       	brmi	.+18     	; 0x7aa <__mulsf3_pse+0x7a>
 798:	ee 0f       	add	r30, r30
 79a:	ff 1f       	adc	r31, r31
 79c:	bb 1f       	adc	r27, r27
 79e:	66 1f       	adc	r22, r22
 7a0:	77 1f       	adc	r23, r23
 7a2:	88 1f       	adc	r24, r24
 7a4:	91 50       	subi	r25, 0x01	; 1
 7a6:	50 40       	sbci	r21, 0x00	; 0
 7a8:	a9 f7       	brne	.-22     	; 0x794 <__mulsf3_pse+0x64>
 7aa:	9e 3f       	cpi	r25, 0xFE	; 254
 7ac:	51 05       	cpc	r21, r1
 7ae:	70 f0       	brcs	.+28     	; 0x7cc <__mulsf3_pse+0x9c>
 7b0:	14 c0       	rjmp	.+40     	; 0x7da <__fp_inf>
 7b2:	aa cf       	rjmp	.-172    	; 0x708 <__fp_szero>
 7b4:	5f 3f       	cpi	r21, 0xFF	; 255
 7b6:	ec f3       	brlt	.-6      	; 0x7b2 <__mulsf3_pse+0x82>
 7b8:	98 3e       	cpi	r25, 0xE8	; 232
 7ba:	dc f3       	brlt	.-10     	; 0x7b2 <__mulsf3_pse+0x82>
 7bc:	86 95       	lsr	r24
 7be:	77 95       	ror	r23
 7c0:	67 95       	ror	r22
 7c2:	b7 95       	ror	r27
 7c4:	f7 95       	ror	r31
 7c6:	e7 95       	ror	r30
 7c8:	9f 5f       	subi	r25, 0xFF	; 255
 7ca:	c1 f7       	brne	.-16     	; 0x7bc <__mulsf3_pse+0x8c>
 7cc:	fe 2b       	or	r31, r30
 7ce:	88 0f       	add	r24, r24
 7d0:	91 1d       	adc	r25, r1
 7d2:	96 95       	lsr	r25
 7d4:	87 95       	ror	r24
 7d6:	97 f9       	bld	r25, 7
 7d8:	08 95       	ret

000007da <__fp_inf>:
 7da:	97 f9       	bld	r25, 7
 7dc:	9f 67       	ori	r25, 0x7F	; 127
 7de:	80 e8       	ldi	r24, 0x80	; 128
 7e0:	70 e0       	ldi	r23, 0x00	; 0
 7e2:	60 e0       	ldi	r22, 0x00	; 0
 7e4:	08 95       	ret

000007e6 <__fp_nan>:
 7e6:	9f ef       	ldi	r25, 0xFF	; 255
 7e8:	80 ec       	ldi	r24, 0xC0	; 192
 7ea:	08 95       	ret

000007ec <__fp_pscA>:
 7ec:	00 24       	eor	r0, r0
 7ee:	0a 94       	dec	r0
 7f0:	16 16       	cp	r1, r22
 7f2:	17 06       	cpc	r1, r23
 7f4:	18 06       	cpc	r1, r24
 7f6:	09 06       	cpc	r0, r25
 7f8:	08 95       	ret

000007fa <__fp_pscB>:
 7fa:	00 24       	eor	r0, r0
 7fc:	0a 94       	dec	r0
 7fe:	12 16       	cp	r1, r18
 800:	13 06       	cpc	r1, r19
 802:	14 06       	cpc	r1, r20
 804:	05 06       	cpc	r0, r21
 806:	08 95       	ret

00000808 <__fp_round>:
 808:	09 2e       	mov	r0, r25
 80a:	03 94       	inc	r0
 80c:	00 0c       	add	r0, r0
 80e:	11 f4       	brne	.+4      	; 0x814 <__fp_round+0xc>
 810:	88 23       	and	r24, r24
 812:	52 f0       	brmi	.+20     	; 0x828 <__fp_round+0x20>
 814:	bb 0f       	add	r27, r27
 816:	40 f4       	brcc	.+16     	; 0x828 <__fp_round+0x20>
 818:	bf 2b       	or	r27, r31
 81a:	11 f4       	brne	.+4      	; 0x820 <__fp_round+0x18>
 81c:	60 ff       	sbrs	r22, 0
 81e:	04 c0       	rjmp	.+8      	; 0x828 <__fp_round+0x20>
 820:	6f 5f       	subi	r22, 0xFF	; 255
 822:	7f 4f       	sbci	r23, 0xFF	; 255
 824:	8f 4f       	sbci	r24, 0xFF	; 255
 826:	9f 4f       	sbci	r25, 0xFF	; 255
 828:	08 95       	ret

0000082a <_exit>:
 82a:	f8 94       	cli

0000082c <__stop_program>:
 82c:	ff cf       	rjmp	.-2      	; 0x82c <__stop_program>
