
wireless_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000009d0  00000a64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800108  00800108  00000a6c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001728  00000000  00000000  00000c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000063b  00000000  00000000  000023b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009e2  00000000  00000000  000029ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000508  00000000  00000000  000033d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000067e  00000000  00000000  000038dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e98  00000000  00000000  00003f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00005df2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__ctors_end>
   4:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
   8:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
   c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_3>
  10:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  14:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  18:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  1c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  20:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  24:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  28:	0c 94 a0 02 	jmp	0x540	; 0x540 <__vector_10>
  2c:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__vector_11>
  30:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  34:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  38:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  3c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  40:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  44:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  48:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  4c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  50:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  54:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  58:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  5c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  60:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  64:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  68:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  6c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  70:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  74:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  78:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  7c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  80:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  84:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  88:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  8c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  90:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  94:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  98:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  9c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  a0:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  a4:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  a8:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>

000000ac <__trampolines_end>:
  ac:	0a 00       	.word	0x000a	; ????

000000ae <__c.2041>:
  ae:	20 20 20 20 20 4b 64 3d 20 00                            Kd= .

000000b8 <__c.2039>:
  b8:	20 20 20 20 20 4b 69 3d 20 00                            Ki= .

000000c2 <__c.2037>:
  c2:	4b 70 3d 20 00                                      Kp= .

000000c7 <descriptor_list>:
  c7:	00 01 00 00 5e 01 12 00 02 00 00 1b 01 43 00 03     ....^........C..
  d7:	00 00 17 01 04 01 03 09 04 03 01 12 02 03 09 04     ................
  e7:	fb 00 06 03 03 09 04 f1 00 08                       ..........

000000f1 <string3>:
  f1:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000000fb <string2>:
  fb:	06 03 4d 00 32 00 00 00                             ..M.2...

00000103 <string1>:
 103:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
 113:	65 00 00 00                                         e...

00000117 <string0>:
 117:	04 03 09 04                                         ....

0000011b <config1_descriptor>:
 11b:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 12b:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 13b:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 14b:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 15b:	40 00 00                                            @..

0000015e <device_descriptor>:
 15e:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 16e:	03 01                                               ..

00000170 <endpoint_config_table>:
 170:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000017a <__ctors_end>:
 17a:	11 24       	eor	r1, r1
 17c:	1f be       	out	0x3f, r1	; 63
 17e:	cf ef       	ldi	r28, 0xFF	; 255
 180:	da e0       	ldi	r29, 0x0A	; 10
 182:	de bf       	out	0x3e, r29	; 62
 184:	cd bf       	out	0x3d, r28	; 61

00000186 <__do_copy_data>:
 186:	11 e0       	ldi	r17, 0x01	; 1
 188:	a0 e0       	ldi	r26, 0x00	; 0
 18a:	b1 e0       	ldi	r27, 0x01	; 1
 18c:	e0 ed       	ldi	r30, 0xD0	; 208
 18e:	f9 e0       	ldi	r31, 0x09	; 9
 190:	02 c0       	rjmp	.+4      	; 0x196 <__do_copy_data+0x10>
 192:	05 90       	lpm	r0, Z+
 194:	0d 92       	st	X+, r0
 196:	a8 30       	cpi	r26, 0x08	; 8
 198:	b1 07       	cpc	r27, r17
 19a:	d9 f7       	brne	.-10     	; 0x192 <__do_copy_data+0xc>

0000019c <__do_clear_bss>:
 19c:	21 e0       	ldi	r18, 0x01	; 1
 19e:	a8 e0       	ldi	r26, 0x08	; 8
 1a0:	b1 e0       	ldi	r27, 0x01	; 1
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <.do_clear_bss_start>

000001a4 <.do_clear_bss_loop>:
 1a4:	1d 92       	st	X+, r1

000001a6 <.do_clear_bss_start>:
 1a6:	a8 31       	cpi	r26, 0x18	; 24
 1a8:	b2 07       	cpc	r27, r18
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <.do_clear_bss_loop>
 1ac:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <main>
 1b0:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <_exit>

000001b4 <__bad_interrupt>:
 1b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b8 <init>:
Subroutines and Functions
************************************************************/

/* Initialization of Pins and System Clock */
void init(void){
	m_clockdivide(3); // Set to 2 MHz
 1b8:	e1 e6       	ldi	r30, 0x61	; 97
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 e8       	ldi	r24, 0x80	; 128
 1be:	80 83       	st	Z, r24
 1c0:	83 e0       	ldi	r24, 0x03	; 3
 1c2:	80 83       	st	Z, r24
	
	sei(); // Enable global interrupts
 1c4:	78 94       	sei
 1c6:	08 95       	ret

000001c8 <usb_enable>:
}

/* Setup USB */
void usb_enable(void)
{
	m_usb_init();
 1c8:	0e 94 29 02 	call	0x452	; 0x452 <m_usb_init>
	while(!m_usb_isconnected());
 1cc:	0e 94 42 02 	call	0x484	; 0x484 <m_usb_isconnected>
 1d0:	88 23       	and	r24, r24
 1d2:	e1 f3       	breq	.-8      	; 0x1cc <usb_enable+0x4>
}
 1d4:	08 95       	ret

000001d6 <wireless_enable>:

/* Initialize the Wireless System */
void wireless_enable(void)
{
	m_bus_init(); // Enable mBUS
 1d6:	0e 94 5e 01 	call	0x2bc	; 0x2bc <m_bus_init>
	m_rf_open(CHANNEL,RXADDRESS,PACKET_LENGTH); // Configure mRF
 1da:	46 e0       	ldi	r20, 0x06	; 6
 1dc:	6c e7       	ldi	r22, 0x7C	; 124
 1de:	87 e0       	ldi	r24, 0x07	; 7
 1e0:	0e 94 6f 01 	call	0x2de	; 0x2de <m_rf_open>
 1e4:	08 95       	ret

000001e6 <main>:
************************************************************/

int main(void)
{
	/* Confirm Power */
	m_red(ON);
 1e6:	6e 9a       	sbi	0x0d, 6	; 13
 1e8:	76 98       	cbi	0x0e, 6	; 14

	/* Initializations */
	init();
 1ea:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <init>
	usb_enable();
 1ee:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <usb_enable>
	wireless_enable();
 1f2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <wireless_enable>

	/* Confirm successful initialization(s) */
	m_green(ON);
 1f6:	6a 9a       	sbi	0x0d, 2	; 13
 1f8:	72 98       	cbi	0x0e, 2	; 14
	
    while (1) 
    {}
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <main+0x14>

000001fc <wireless_recieve>:
}

/* Send Wireless Data */
void wireless_recieve(void)
{
	m_rf_read(buffer,PACKET_LENGTH); // Read RF Signal
 1fc:	66 e0       	ldi	r22, 0x06	; 6
 1fe:	8e e0       	ldi	r24, 0x0E	; 14
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	0e 94 c5 01 	call	0x38a	; 0x38a <m_rf_read>
	Kp = *(int*)&buffer[0];
 206:	ee e0       	ldi	r30, 0x0E	; 14
 208:	f1 e0       	ldi	r31, 0x01	; 1
 20a:	80 81       	ld	r24, Z
 20c:	91 81       	ldd	r25, Z+1	; 0x01
 20e:	90 93 0d 01 	sts	0x010D, r25
 212:	80 93 0c 01 	sts	0x010C, r24
	Ki = *(int*)&buffer[2];
 216:	82 81       	ldd	r24, Z+2	; 0x02
 218:	93 81       	ldd	r25, Z+3	; 0x03
 21a:	90 93 0b 01 	sts	0x010B, r25
 21e:	80 93 0a 01 	sts	0x010A, r24
	Kd = *(int*)&buffer[4];
 222:	84 81       	ldd	r24, Z+4	; 0x04
 224:	95 81       	ldd	r25, Z+5	; 0x05
 226:	90 93 09 01 	sts	0x0109, r25
 22a:	80 93 08 01 	sts	0x0108, r24
	
	m_usb_tx_string("Kp= ");
 22e:	82 ec       	ldi	r24, 0xC2	; 194
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 61 04 	call	0x8c2	; 0x8c2 <print_P>
	m_usb_tx_int(Kp);
 236:	80 91 0c 01 	lds	r24, 0x010C
 23a:	90 91 0d 01 	lds	r25, 0x010D
 23e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <m_usb_tx_int>
	m_usb_tx_string("     Ki= ");
 242:	88 eb       	ldi	r24, 0xB8	; 184
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 61 04 	call	0x8c2	; 0x8c2 <print_P>
	m_usb_tx_int(Ki);
 24a:	80 91 0a 01 	lds	r24, 0x010A
 24e:	90 91 0b 01 	lds	r25, 0x010B
 252:	0e 94 7d 04 	call	0x8fa	; 0x8fa <m_usb_tx_int>
	m_usb_tx_string("     Kd= ");
 256:	8e ea       	ldi	r24, 0xAE	; 174
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 61 04 	call	0x8c2	; 0x8c2 <print_P>
	m_usb_tx_int(Kd);
 25e:	80 91 08 01 	lds	r24, 0x0108
 262:	90 91 09 01 	lds	r25, 0x0109
 266:	0e 94 7d 04 	call	0x8fa	; 0x8fa <m_usb_tx_int>
	m_usb_tx_string("\n");
 26a:	8c ea       	ldi	r24, 0xAC	; 172
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 61 04 	call	0x8c2	; 0x8c2 <print_P>
 272:	08 95       	ret

00000274 <__vector_3>:

/************************************************************
Interrupts
************************************************************/

ISR(INT2_vect){
 274:	1f 92       	push	r1
 276:	0f 92       	push	r0
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	0f 92       	push	r0
 27c:	11 24       	eor	r1, r1
 27e:	2f 93       	push	r18
 280:	3f 93       	push	r19
 282:	4f 93       	push	r20
 284:	5f 93       	push	r21
 286:	6f 93       	push	r22
 288:	7f 93       	push	r23
 28a:	8f 93       	push	r24
 28c:	9f 93       	push	r25
 28e:	af 93       	push	r26
 290:	bf 93       	push	r27
 292:	ef 93       	push	r30
 294:	ff 93       	push	r31
	wireless_recieve();
 296:	0e 94 fe 00 	call	0x1fc	; 0x1fc <wireless_recieve>
}
 29a:	ff 91       	pop	r31
 29c:	ef 91       	pop	r30
 29e:	bf 91       	pop	r27
 2a0:	af 91       	pop	r26
 2a2:	9f 91       	pop	r25
 2a4:	8f 91       	pop	r24
 2a6:	7f 91       	pop	r23
 2a8:	6f 91       	pop	r22
 2aa:	5f 91       	pop	r21
 2ac:	4f 91       	pop	r20
 2ae:	3f 91       	pop	r19
 2b0:	2f 91       	pop	r18
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
 2bc:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
 2be:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
 2c0:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
 2c2:	8c e0       	ldi	r24, 0x0C	; 12
 2c4:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
 2c8:	e9 e6       	ldi	r30, 0x69	; 105
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	80 81       	ld	r24, Z
 2ce:	80 62       	ori	r24, 0x20	; 32
 2d0:	80 83       	st	Z, r24
 2d2:	80 81       	ld	r24, Z
 2d4:	8f 7e       	andi	r24, 0xEF	; 239
 2d6:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
 2d8:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
 2da:	78 94       	sei
 2dc:	08 95       	ret

000002de <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
 2de:	1f 93       	push	r17
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	18 2f       	mov	r17, r24
 2e6:	d6 2f       	mov	r29, r22
 2e8:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
 2ea:	0e 94 5e 01 	call	0x2bc	; 0x2bc <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 2ee:	94 ea       	ldi	r25, 0xA4	; 164
 2f0:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
 2f4:	ec eb       	ldi	r30, 0xBC	; 188
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	90 81       	ld	r25, Z
 2fa:	99 23       	and	r25, r25
 2fc:	ec f7       	brge	.-6      	; 0x2f8 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
 2fe:	90 e5       	ldi	r25, 0x50	; 80
 300:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
 304:	94 e8       	ldi	r25, 0x84	; 132
 306:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
 30a:	ec eb       	ldi	r30, 0xBC	; 188
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	90 81       	ld	r25, Z
 310:	99 23       	and	r25, r25
 312:	ec f7       	brge	.-6      	; 0x30e <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
 314:	90 91 b9 00 	lds	r25, 0x00B9
 318:	98 7f       	andi	r25, 0xF8	; 248
 31a:	90 32       	cpi	r25, 0x20	; 32
 31c:	29 f4       	brne	.+10     	; 0x328 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 31e:	84 e9       	ldi	r24, 0x94	; 148
 320:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	2d c0       	rjmp	.+90     	; 0x382 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 32e:	84 e8       	ldi	r24, 0x84	; 132
 330:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 334:	ec eb       	ldi	r30, 0xBC	; 188
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	90 81       	ld	r25, Z
 33a:	99 23       	and	r25, r25
 33c:	ec f7       	brge	.-6      	; 0x338 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
 33e:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
 342:	84 e8       	ldi	r24, 0x84	; 132
 344:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 348:	ec eb       	ldi	r30, 0xBC	; 188
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	88 23       	and	r24, r24
 350:	ec f7       	brge	.-6      	; 0x34c <m_rf_open+0x6e>
	
	TWDR = RXaddress;
 352:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
 356:	84 e8       	ldi	r24, 0x84	; 132
 358:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 35c:	ec eb       	ldi	r30, 0xBC	; 188
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	80 81       	ld	r24, Z
 362:	88 23       	and	r24, r24
 364:	ec f7       	brge	.-6      	; 0x360 <m_rf_open+0x82>
	
	TWDR = packet_length;
 366:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
 36a:	84 e8       	ldi	r24, 0x84	; 132
 36c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 370:	ec eb       	ldi	r30, 0xBC	; 188
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	88 23       	and	r24, r24
 378:	ec f7       	brge	.-6      	; 0x374 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 37a:	84 e9       	ldi	r24, 0x94	; 148
 37c:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
 380:	81 e0       	ldi	r24, 0x01	; 1
}
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	08 95       	ret

0000038a <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	9c 01       	movw	r18, r24

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 390:	84 ea       	ldi	r24, 0xA4	; 164
 392:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 396:	ec eb       	ldi	r30, 0xBC	; 188
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	90 81       	ld	r25, Z
 39c:	99 23       	and	r25, r25
 39e:	ec f7       	brge	.-6      	; 0x39a <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
 3a0:	81 e5       	ldi	r24, 0x51	; 81
 3a2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 3a6:	84 e8       	ldi	r24, 0x84	; 132
 3a8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
 3ac:	ec eb       	ldi	r30, 0xBC	; 188
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	90 81       	ld	r25, Z
 3b2:	99 23       	and	r25, r25
 3b4:	ec f7       	brge	.-6      	; 0x3b0 <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
 3b6:	80 91 b9 00 	lds	r24, 0x00B9
 3ba:	88 7f       	andi	r24, 0xF8	; 248
 3bc:	88 34       	cpi	r24, 0x48	; 72
 3be:	29 f4       	brne	.+10     	; 0x3ca <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 3c0:	84 e9       	ldi	r24, 0x94	; 148
 3c2:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	41 c0       	rjmp	.+130    	; 0x44c <m_rf_read+0xc2>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
 3ca:	84 ec       	ldi	r24, 0xC4	; 196
 3cc:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
 3d0:	ec eb       	ldi	r30, 0xBC	; 188
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	90 81       	ld	r25, Z
 3d6:	99 23       	and	r25, r25
 3d8:	ec f7       	brge	.-6      	; 0x3d4 <m_rf_read+0x4a>
	bytes = TWDR;
 3da:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
 3de:	46 13       	cpse	r20, r22
 3e0:	09 c0       	rjmp	.+18     	; 0x3f4 <m_rf_read+0x6a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
 3e2:	84 2f       	mov	r24, r20
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	18 16       	cp	r1, r24
 3ea:	19 06       	cpc	r1, r25
 3ec:	44 f0       	brlt	.+16     	; 0x3fe <m_rf_read+0x74>
 3ee:	40 e0       	ldi	r20, 0x00	; 0
 3f0:	50 e0       	ldi	r21, 0x00	; 0
 3f2:	1a c0       	rjmp	.+52     	; 0x428 <m_rf_read+0x9e>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 3f4:	84 e9       	ldi	r24, 0x94	; 148
 3f6:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	27 c0       	rjmp	.+78     	; 0x44c <m_rf_read+0xc2>
 3fe:	d9 01       	movw	r26, r18
 400:	50 e0       	ldi	r21, 0x00	; 0
 402:	41 50       	subi	r20, 0x01	; 1
 404:	51 09       	sbc	r21, r1
 406:	b9 01       	movw	r22, r18
 408:	64 0f       	add	r22, r20
 40a:	75 1f       	adc	r23, r21
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
 40c:	ec eb       	ldi	r30, 0xBC	; 188
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
 412:	cb eb       	ldi	r28, 0xBB	; 187
 414:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
 416:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
 418:	90 81       	ld	r25, Z
 41a:	99 23       	and	r25, r25
 41c:	ec f7       	brge	.-6      	; 0x418 <m_rf_read+0x8e>
		buffer[i] = TWDR;
 41e:	98 81       	ld	r25, Y
 420:	9d 93       	st	X+, r25
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
 422:	a6 17       	cp	r26, r22
 424:	b7 07       	cpc	r27, r23
 426:	b9 f7       	brne	.-18     	; 0x416 <m_rf_read+0x8c>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
 428:	84 e8       	ldi	r24, 0x84	; 132
 42a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
 42e:	ec eb       	ldi	r30, 0xBC	; 188
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	90 81       	ld	r25, Z
 434:	99 23       	and	r25, r25
 436:	ec f7       	brge	.-6      	; 0x432 <m_rf_read+0xa8>
	buffer[i++] = TWDR;
 438:	80 91 bb 00 	lds	r24, 0x00BB
 43c:	f9 01       	movw	r30, r18
 43e:	e4 0f       	add	r30, r20
 440:	f5 1f       	adc	r31, r21
 442:	80 83       	st	Z, r24
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 444:	84 e9       	ldi	r24, 0x94	; 148
 446:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
 44a:	81 e0       	ldi	r24, 0x01	; 1
}
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	08 95       	ret

00000452 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
 458:	80 ea       	ldi	r24, 0xA0	; 160
 45a:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
 45e:	82 e1       	ldi	r24, 0x12	; 18
 460:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 462:	09 b4       	in	r0, 0x29	; 41
 464:	00 fe       	sbrs	r0, 0
 466:	fd cf       	rjmp	.-6      	; 0x462 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
 468:	80 e9       	ldi	r24, 0x90	; 144
 46a:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
 46e:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
 472:	10 92 17 01 	sts	0x0117, r1
	cdc_line_rtsdtr = 0;
 476:	10 92 14 01 	sts	0x0114, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 47a:	8c e0       	ldi	r24, 0x0C	; 12
 47c:	80 93 e2 00 	sts	0x00E2, r24
	sei();
 480:	78 94       	sei
 482:	08 95       	ret

00000484 <m_usb_isconnected>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
char m_usb_isconnected(void)
{
	return (char)usb_configuration;
 484:	80 91 17 01 	lds	r24, 0x0117
}
 488:	08 95       	ret

0000048a <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 48e:	90 91 17 01 	lds	r25, 0x0117
 492:	99 23       	and	r25, r25
 494:	09 f4       	brne	.+2      	; 0x498 <m_usb_tx_char+0xe>
 496:	4c c0       	rjmp	.+152    	; 0x530 <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
 498:	9f b7       	in	r25, 0x3f	; 63
	cli();
 49a:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
 49c:	24 e0       	ldi	r18, 0x04	; 4
 49e:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
 4a2:	20 91 15 01 	lds	r18, 0x0115
 4a6:	22 23       	and	r18, r18
 4a8:	49 f0       	breq	.+18     	; 0x4bc <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
 4aa:	20 91 e8 00 	lds	r18, 0x00E8
 4ae:	25 fd       	sbrc	r18, 5
 4b0:	03 c0       	rjmp	.+6      	; 0x4b8 <m_usb_tx_char+0x2e>
			SREG = intr_state;
 4b2:	9f bf       	out	0x3f, r25	; 63
			return -1;
 4b4:	8f ef       	ldi	r24, 0xFF	; 255
 4b6:	41 c0       	rjmp	.+130    	; 0x53a <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
 4b8:	10 92 15 01 	sts	0x0115, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
 4bc:	30 91 e4 00 	lds	r19, 0x00E4
 4c0:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 4c2:	20 91 e8 00 	lds	r18, 0x00E8
 4c6:	25 fd       	sbrc	r18, 5
 4c8:	24 c0       	rjmp	.+72     	; 0x512 <m_usb_tx_char+0x88>
		SREG = intr_state;
 4ca:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
 4cc:	90 91 e4 00 	lds	r25, 0x00E4
 4d0:	93 17       	cp	r25, r19
 4d2:	81 f0       	breq	.+32     	; 0x4f4 <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 4d4:	90 91 17 01 	lds	r25, 0x0117
 4d8:	99 23       	and	r25, r25
 4da:	61 f1       	breq	.+88     	; 0x534 <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
 4dc:	a9 ee       	ldi	r26, 0xE9	; 233
 4de:	b0 e0       	ldi	r27, 0x00	; 0
 4e0:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 4e2:	e8 ee       	ldi	r30, 0xE8	; 232
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
 4e6:	c4 ee       	ldi	r28, 0xE4	; 228
 4e8:	d0 e0       	ldi	r29, 0x00	; 0
 4ea:	0d c0       	rjmp	.+26     	; 0x506 <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
 4ec:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
 4ee:	98 81       	ld	r25, Y
 4f0:	93 13       	cpse	r25, r19
 4f2:	05 c0       	rjmp	.+10     	; 0x4fe <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	80 93 15 01 	sts	0x0115, r24
			return -1;
 4fa:	8f ef       	ldi	r24, 0xFF	; 255
 4fc:	1e c0       	rjmp	.+60     	; 0x53a <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 4fe:	90 91 17 01 	lds	r25, 0x0117
 502:	99 23       	and	r25, r25
 504:	c9 f0       	breq	.+50     	; 0x538 <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
 506:	9f b7       	in	r25, 0x3f	; 63
		cli();
 508:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
 50a:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 50c:	20 81       	ld	r18, Z
 50e:	25 ff       	sbrs	r18, 5
 510:	ed cf       	rjmp	.-38     	; 0x4ec <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
 512:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 516:	80 91 e8 00 	lds	r24, 0x00E8
 51a:	85 fd       	sbrc	r24, 5
 51c:	03 c0       	rjmp	.+6      	; 0x524 <m_usb_tx_char+0x9a>
 51e:	8a e3       	ldi	r24, 0x3A	; 58
 520:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 524:	85 e0       	ldi	r24, 0x05	; 5
 526:	80 93 16 01 	sts	0x0116, r24
	SREG = intr_state;
 52a:	9f bf       	out	0x3f, r25	; 63
	return 0;
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	05 c0       	rjmp	.+10     	; 0x53a <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 530:	8f ef       	ldi	r24, 0xFF	; 255
 532:	03 c0       	rjmp	.+6      	; 0x53a <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 534:	8f ef       	ldi	r24, 0xFF	; 255
 536:	01 c0       	rjmp	.+2      	; 0x53a <m_usb_tx_char+0xb0>
 538:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	08 95       	ret

00000540 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 540:	1f 92       	push	r1
 542:	0f 92       	push	r0
 544:	0f b6       	in	r0, 0x3f	; 63
 546:	0f 92       	push	r0
 548:	11 24       	eor	r1, r1
 54a:	8f 93       	push	r24
 54c:	9f 93       	push	r25
 54e:	ef 93       	push	r30
 550:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
 552:	e1 ee       	ldi	r30, 0xE1	; 225
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	80 81       	ld	r24, Z
        UDINT = 0;
 558:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
 55a:	83 ff       	sbrs	r24, 3
 55c:	11 c0       	rjmp	.+34     	; 0x580 <__vector_10+0x40>
		UENUM = 0;
 55e:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 562:	91 e0       	ldi	r25, 0x01	; 1
 564:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
 568:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 56c:	92 e1       	ldi	r25, 0x12	; 18
 56e:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
 572:	98 e0       	ldi	r25, 0x08	; 8
 574:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
 578:	10 92 17 01 	sts	0x0117, r1
		cdc_line_rtsdtr = 0;
 57c:	10 92 14 01 	sts	0x0114, r1
        }
	if (intbits & (1<<SOFI)) {
 580:	82 ff       	sbrs	r24, 2
 582:	13 c0       	rjmp	.+38     	; 0x5aa <__vector_10+0x6a>
		if (usb_configuration) {
 584:	80 91 17 01 	lds	r24, 0x0117
 588:	88 23       	and	r24, r24
 58a:	79 f0       	breq	.+30     	; 0x5aa <__vector_10+0x6a>
			t = transmit_flush_timer;
 58c:	80 91 16 01 	lds	r24, 0x0116
			if (t) {
 590:	88 23       	and	r24, r24
 592:	59 f0       	breq	.+22     	; 0x5aa <__vector_10+0x6a>
				transmit_flush_timer = --t;
 594:	81 50       	subi	r24, 0x01	; 1
 596:	80 93 16 01 	sts	0x0116, r24
				if (!t) {
 59a:	81 11       	cpse	r24, r1
 59c:	06 c0       	rjmp	.+12     	; 0x5aa <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
 59e:	84 e0       	ldi	r24, 0x04	; 4
 5a0:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
 5a4:	8a e3       	ldi	r24, 0x3A	; 58
 5a6:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 5aa:	ff 91       	pop	r31
 5ac:	ef 91       	pop	r30
 5ae:	9f 91       	pop	r25
 5b0:	8f 91       	pop	r24
 5b2:	0f 90       	pop	r0
 5b4:	0f be       	out	0x3f, r0	; 63
 5b6:	0f 90       	pop	r0
 5b8:	1f 90       	pop	r1
 5ba:	18 95       	reti

000005bc <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 5bc:	1f 92       	push	r1
 5be:	0f 92       	push	r0
 5c0:	0f b6       	in	r0, 0x3f	; 63
 5c2:	0f 92       	push	r0
 5c4:	11 24       	eor	r1, r1
 5c6:	0f 93       	push	r16
 5c8:	1f 93       	push	r17
 5ca:	2f 93       	push	r18
 5cc:	3f 93       	push	r19
 5ce:	4f 93       	push	r20
 5d0:	5f 93       	push	r21
 5d2:	6f 93       	push	r22
 5d4:	7f 93       	push	r23
 5d6:	8f 93       	push	r24
 5d8:	9f 93       	push	r25
 5da:	af 93       	push	r26
 5dc:	bf 93       	push	r27
 5de:	cf 93       	push	r28
 5e0:	df 93       	push	r29
 5e2:	ef 93       	push	r30
 5e4:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 5e6:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 5ea:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 5ee:	83 ff       	sbrs	r24, 3
 5f0:	4c c1       	rjmp	.+664    	; 0x88a <__vector_11+0x2ce>
                bmRequestType = UEDATX;
 5f2:	e1 ef       	ldi	r30, 0xF1	; 241
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	60 81       	ld	r22, Z
                bRequest = UEDATX;
 5f8:	80 81       	ld	r24, Z
                wValue = UEDATX;
 5fa:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
 5fc:	90 81       	ld	r25, Z
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	39 2b       	or	r19, r25
                wIndex = UEDATX;
 602:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
 604:	90 81       	ld	r25, Z
 606:	50 e0       	ldi	r21, 0x00	; 0
 608:	59 2b       	or	r21, r25
                wLength = UEDATX;
 60a:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
 60c:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 60e:	92 ef       	ldi	r25, 0xF2	; 242
 610:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
 614:	86 30       	cpi	r24, 0x06	; 6
 616:	09 f0       	breq	.+2      	; 0x61a <__vector_11+0x5e>
 618:	58 c0       	rjmp	.+176    	; 0x6ca <__vector_11+0x10e>
 61a:	04 c0       	rjmp	.+8      	; 0x624 <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 61c:	81 e2       	ldi	r24, 0x21	; 33
 61e:	80 93 eb 00 	sts	0x00EB, r24
					return;
 622:	3a c1       	rjmp	.+628    	; 0x898 <__vector_11+0x2dc>
 624:	66 e0       	ldi	r22, 0x06	; 6
 626:	87 ec       	ldi	r24, 0xC7	; 199
 628:	90 e0       	ldi	r25, 0x00	; 0
				}
				desc_val = pgm_read_word(list);
 62a:	fc 01       	movw	r30, r24
 62c:	a5 91       	lpm	r26, Z+
 62e:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
 630:	2a 17       	cp	r18, r26
 632:	3b 07       	cpc	r19, r27
 634:	11 f0       	breq	.+4      	; 0x63a <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
 636:	07 96       	adiw	r24, 0x07	; 7
					continue;
 638:	23 c0       	rjmp	.+70     	; 0x680 <__vector_11+0xc4>
				}
				list += 2;
 63a:	fc 01       	movw	r30, r24
 63c:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
 63e:	a5 91       	lpm	r26, Z+
 640:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
 642:	4a 17       	cp	r20, r26
 644:	5b 07       	cpc	r21, r27
 646:	11 f0       	breq	.+4      	; 0x64c <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
 648:	07 96       	adiw	r24, 0x07	; 7
					continue;
 64a:	1a c0       	rjmp	.+52     	; 0x680 <__vector_11+0xc4>
				}
				list += 2;
 64c:	fc 01       	movw	r30, r24
 64e:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 650:	45 91       	lpm	r20, Z+
 652:	54 91       	lpm	r21, Z
				list += 2;
 654:	fc 01       	movw	r30, r24
 656:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 658:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
 65a:	87 2f       	mov	r24, r23
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 660:	8f 3f       	cpi	r24, 0xFF	; 255
 662:	91 05       	cpc	r25, r1
 664:	19 f0       	breq	.+6      	; 0x66c <__vector_11+0xb0>
 666:	10 f0       	brcs	.+4      	; 0x66c <__vector_11+0xb0>
 668:	8f ef       	ldi	r24, 0xFF	; 255
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	82 17       	cp	r24, r18
 66e:	08 f4       	brcc	.+2      	; 0x672 <__vector_11+0xb6>
 670:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 672:	a8 ee       	ldi	r26, 0xE8	; 232
 674:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 676:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 678:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
 67a:	c1 ef       	ldi	r28, 0xF1	; 241
 67c:	d0 e0       	ldi	r29, 0x00	; 0
 67e:	03 c0       	rjmp	.+6      	; 0x686 <__vector_11+0xca>
 680:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 682:	99 f6       	brne	.-90     	; 0x62a <__vector_11+0x6e>
 684:	cb cf       	rjmp	.-106    	; 0x61c <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 686:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 688:	98 2f       	mov	r25, r24
 68a:	95 70       	andi	r25, 0x05	; 5
 68c:	e1 f3       	breq	.-8      	; 0x686 <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
 68e:	82 fd       	sbrc	r24, 2
 690:	03 c1       	rjmp	.+518    	; 0x898 <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 692:	32 2f       	mov	r19, r18
 694:	21 31       	cpi	r18, 0x11	; 17
 696:	08 f0       	brcs	.+2      	; 0x69a <__vector_11+0xde>
 698:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
 69a:	33 23       	and	r19, r19
 69c:	09 f4       	brne	.+2      	; 0x6a0 <__vector_11+0xe4>
 69e:	f9 c0       	rjmp	.+498    	; 0x892 <__vector_11+0x2d6>
 6a0:	fa 01       	movw	r30, r20
 6a2:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
 6a4:	94 91       	lpm	r25, Z
 6a6:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 6a8:	81 50       	subi	r24, 0x01	; 1
 6aa:	31 96       	adiw	r30, 0x01	; 1
 6ac:	81 11       	cpse	r24, r1
 6ae:	fa cf       	rjmp	.-12     	; 0x6a4 <__vector_11+0xe8>
 6b0:	8f ef       	ldi	r24, 0xFF	; 255
 6b2:	83 0f       	add	r24, r19
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	01 96       	adiw	r24, 0x01	; 1
 6b8:	48 0f       	add	r20, r24
 6ba:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 6bc:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6be:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 6c0:	21 11       	cpse	r18, r1
 6c2:	e1 cf       	rjmp	.-62     	; 0x686 <__vector_11+0xca>
 6c4:	30 31       	cpi	r19, 0x10	; 16
 6c6:	f9 f2       	breq	.-66     	; 0x686 <__vector_11+0xca>
 6c8:	e7 c0       	rjmp	.+462    	; 0x898 <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 6ca:	85 30       	cpi	r24, 0x05	; 5
 6cc:	61 f4       	brne	.+24     	; 0x6e6 <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6ce:	8e ef       	ldi	r24, 0xFE	; 254
 6d0:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 6d4:	e8 ee       	ldi	r30, 0xE8	; 232
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	80 81       	ld	r24, Z
 6da:	80 ff       	sbrs	r24, 0
 6dc:	fd cf       	rjmp	.-6      	; 0x6d8 <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 6de:	20 68       	ori	r18, 0x80	; 128
 6e0:	20 93 e3 00 	sts	0x00E3, r18
			return;
 6e4:	d9 c0       	rjmp	.+434    	; 0x898 <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 6e6:	89 30       	cpi	r24, 0x09	; 9
 6e8:	09 f0       	breq	.+2      	; 0x6ec <__vector_11+0x130>
 6ea:	35 c0       	rjmp	.+106    	; 0x756 <__vector_11+0x19a>
 6ec:	61 11       	cpse	r22, r1
 6ee:	cd c0       	rjmp	.+410    	; 0x88a <__vector_11+0x2ce>
			usb_configuration = wValue;
 6f0:	20 93 17 01 	sts	0x0117, r18
			cdc_line_rtsdtr = 0;
 6f4:	10 92 14 01 	sts	0x0114, r1
			transmit_flush_timer = 0;
 6f8:	10 92 16 01 	sts	0x0116, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6fc:	8e ef       	ldi	r24, 0xFE	; 254
 6fe:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 702:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
 704:	20 e7       	ldi	r18, 0x70	; 112
 706:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
 708:	c9 ee       	ldi	r28, 0xE9	; 233
 70a:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
 70c:	ab ee       	ldi	r26, 0xEB	; 235
 70e:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
 710:	0c ee       	ldi	r16, 0xEC	; 236
 712:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
 714:	6d ee       	ldi	r22, 0xED	; 237
 716:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 718:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
 71a:	a9 01       	movw	r20, r18
 71c:	4f 5f       	subi	r20, 0xFF	; 255
 71e:	5f 4f       	sbci	r21, 0xFF	; 255
 720:	f9 01       	movw	r30, r18
 722:	94 91       	lpm	r25, Z
				UECONX = en;
 724:	9c 93       	st	X, r25
				if (en) {
 726:	99 23       	and	r25, r25
 728:	61 f0       	breq	.+24     	; 0x742 <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
 72a:	fa 01       	movw	r30, r20
 72c:	44 91       	lpm	r20, Z
 72e:	f8 01       	movw	r30, r16
 730:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
 732:	f9 01       	movw	r30, r18
 734:	32 96       	adiw	r30, 0x02	; 2
 736:	94 91       	lpm	r25, Z
 738:	2d 5f       	subi	r18, 0xFD	; 253
 73a:	3f 4f       	sbci	r19, 0xFF	; 255
 73c:	fb 01       	movw	r30, r22
 73e:	90 83       	st	Z, r25
 740:	01 c0       	rjmp	.+2      	; 0x744 <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
 742:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 744:	8f 5f       	subi	r24, 0xFF	; 255
 746:	85 30       	cpi	r24, 0x05	; 5
 748:	39 f7       	brne	.-50     	; 0x718 <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 74a:	ea ee       	ldi	r30, 0xEA	; 234
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	8e e1       	ldi	r24, 0x1E	; 30
 750:	80 83       	st	Z, r24
        		UERST = 0;
 752:	10 82       	st	Z, r1
			return;
 754:	a1 c0       	rjmp	.+322    	; 0x898 <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 756:	88 30       	cpi	r24, 0x08	; 8
 758:	81 f4       	brne	.+32     	; 0x77a <__vector_11+0x1be>
 75a:	60 38       	cpi	r22, 0x80	; 128
 75c:	09 f0       	breq	.+2      	; 0x760 <__vector_11+0x1a4>
 75e:	95 c0       	rjmp	.+298    	; 0x88a <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 760:	e8 ee       	ldi	r30, 0xE8	; 232
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	80 81       	ld	r24, Z
 766:	80 ff       	sbrs	r24, 0
 768:	fd cf       	rjmp	.-6      	; 0x764 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 76a:	80 91 17 01 	lds	r24, 0x0117
 76e:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 772:	8e ef       	ldi	r24, 0xFE	; 254
 774:	80 93 e8 00 	sts	0x00E8, r24
 778:	8f c0       	rjmp	.+286    	; 0x898 <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 77a:	81 32       	cpi	r24, 0x21	; 33
 77c:	b9 f4       	brne	.+46     	; 0x7ac <__vector_11+0x1f0>
 77e:	61 3a       	cpi	r22, 0xA1	; 161
 780:	09 f0       	breq	.+2      	; 0x784 <__vector_11+0x1c8>
 782:	83 c0       	rjmp	.+262    	; 0x88a <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 784:	e8 ee       	ldi	r30, 0xE8	; 232
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	80 81       	ld	r24, Z
 78a:	80 ff       	sbrs	r24, 0
 78c:	fd cf       	rjmp	.-6      	; 0x788 <__vector_11+0x1cc>
 78e:	e0 e0       	ldi	r30, 0x00	; 0
 790:	f1 e0       	ldi	r31, 0x01	; 1
 792:	27 e0       	ldi	r18, 0x07	; 7
 794:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 796:	a1 ef       	ldi	r26, 0xF1	; 241
 798:	b0 e0       	ldi	r27, 0x00	; 0
 79a:	81 91       	ld	r24, Z+
 79c:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 79e:	e2 17       	cp	r30, r18
 7a0:	f3 07       	cpc	r31, r19
 7a2:	d9 f7       	brne	.-10     	; 0x79a <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 7a4:	8e ef       	ldi	r24, 0xFE	; 254
 7a6:	80 93 e8 00 	sts	0x00E8, r24
 7aa:	76 c0       	rjmp	.+236    	; 0x898 <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 7ac:	80 32       	cpi	r24, 0x20	; 32
 7ae:	d1 f4       	brne	.+52     	; 0x7e4 <__vector_11+0x228>
 7b0:	61 32       	cpi	r22, 0x21	; 33
 7b2:	09 f0       	breq	.+2      	; 0x7b6 <__vector_11+0x1fa>
 7b4:	6a c0       	rjmp	.+212    	; 0x88a <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 7b6:	e8 ee       	ldi	r30, 0xE8	; 232
 7b8:	f0 e0       	ldi	r31, 0x00	; 0
 7ba:	80 81       	ld	r24, Z
 7bc:	82 ff       	sbrs	r24, 2
 7be:	fd cf       	rjmp	.-6      	; 0x7ba <__vector_11+0x1fe>
 7c0:	e0 e0       	ldi	r30, 0x00	; 0
 7c2:	f1 e0       	ldi	r31, 0x01	; 1
 7c4:	27 e0       	ldi	r18, 0x07	; 7
 7c6:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 7c8:	a1 ef       	ldi	r26, 0xF1	; 241
 7ca:	b0 e0       	ldi	r27, 0x00	; 0
 7cc:	8c 91       	ld	r24, X
 7ce:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 7d0:	e2 17       	cp	r30, r18
 7d2:	f3 07       	cpc	r31, r19
 7d4:	d9 f7       	brne	.-10     	; 0x7cc <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 7d6:	e8 ee       	ldi	r30, 0xE8	; 232
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	8b ef       	ldi	r24, 0xFB	; 251
 7dc:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 7de:	8e ef       	ldi	r24, 0xFE	; 254
 7e0:	80 83       	st	Z, r24
 7e2:	5a c0       	rjmp	.+180    	; 0x898 <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 7e4:	82 32       	cpi	r24, 0x22	; 34
 7e6:	71 f4       	brne	.+28     	; 0x804 <__vector_11+0x248>
 7e8:	61 32       	cpi	r22, 0x21	; 33
 7ea:	09 f0       	breq	.+2      	; 0x7ee <__vector_11+0x232>
 7ec:	4e c0       	rjmp	.+156    	; 0x88a <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
 7ee:	20 93 14 01 	sts	0x0114, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 7f2:	e8 ee       	ldi	r30, 0xE8	; 232
 7f4:	f0 e0       	ldi	r31, 0x00	; 0
 7f6:	80 81       	ld	r24, Z
 7f8:	80 ff       	sbrs	r24, 0
 7fa:	fd cf       	rjmp	.-6      	; 0x7f6 <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 7fc:	8e ef       	ldi	r24, 0xFE	; 254
 7fe:	80 93 e8 00 	sts	0x00E8, r24
 802:	4a c0       	rjmp	.+148    	; 0x898 <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 804:	81 11       	cpse	r24, r1
 806:	1a c0       	rjmp	.+52     	; 0x83c <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 808:	e8 ee       	ldi	r30, 0xE8	; 232
 80a:	f0 e0       	ldi	r31, 0x00	; 0
 80c:	80 81       	ld	r24, Z
 80e:	80 ff       	sbrs	r24, 0
 810:	fd cf       	rjmp	.-6      	; 0x80c <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 812:	62 38       	cpi	r22, 0x82	; 130
 814:	51 f4       	brne	.+20     	; 0x82a <__vector_11+0x26e>
				UENUM = wIndex;
 816:	e9 ee       	ldi	r30, 0xE9	; 233
 818:	f0 e0       	ldi	r31, 0x00	; 0
 81a:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
 81c:	80 91 eb 00 	lds	r24, 0x00EB
 820:	85 fb       	bst	r24, 5
 822:	88 27       	eor	r24, r24
 824:	80 f9       	bld	r24, 0
				UENUM = 0;
 826:	10 82       	st	Z, r1
 828:	01 c0       	rjmp	.+2      	; 0x82c <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 82a:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 82c:	e1 ef       	ldi	r30, 0xF1	; 241
 82e:	f0 e0       	ldi	r31, 0x00	; 0
 830:	80 83       	st	Z, r24
			UEDATX = 0;
 832:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 834:	8e ef       	ldi	r24, 0xFE	; 254
 836:	80 93 e8 00 	sts	0x00E8, r24
 83a:	2e c0       	rjmp	.+92     	; 0x898 <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 83c:	98 2f       	mov	r25, r24
 83e:	9d 7f       	andi	r25, 0xFD	; 253
 840:	91 30       	cpi	r25, 0x01	; 1
 842:	19 f5       	brne	.+70     	; 0x88a <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
 844:	62 30       	cpi	r22, 0x02	; 2
 846:	09 f5       	brne	.+66     	; 0x88a <__vector_11+0x2ce>
 848:	23 2b       	or	r18, r19
 84a:	f9 f4       	brne	.+62     	; 0x88a <__vector_11+0x2ce>
			i = wIndex & 0x7F;
 84c:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 84e:	9f ef       	ldi	r25, 0xFF	; 255
 850:	94 0f       	add	r25, r20
 852:	94 30       	cpi	r25, 0x04	; 4
 854:	d0 f4       	brcc	.+52     	; 0x88a <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 856:	9e ef       	ldi	r25, 0xFE	; 254
 858:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 85c:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
 860:	83 30       	cpi	r24, 0x03	; 3
 862:	21 f4       	brne	.+8      	; 0x86c <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
 864:	81 e2       	ldi	r24, 0x21	; 33
 866:	80 93 eb 00 	sts	0x00EB, r24
 86a:	16 c0       	rjmp	.+44     	; 0x898 <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 86c:	89 e1       	ldi	r24, 0x19	; 25
 86e:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	02 c0       	rjmp	.+4      	; 0x87c <__vector_11+0x2c0>
 878:	88 0f       	add	r24, r24
 87a:	99 1f       	adc	r25, r25
 87c:	4a 95       	dec	r20
 87e:	e2 f7       	brpl	.-8      	; 0x878 <__vector_11+0x2bc>
 880:	ea ee       	ldi	r30, 0xEA	; 234
 882:	f0 e0       	ldi	r31, 0x00	; 0
 884:	80 83       	st	Z, r24
					UERST = 0;
 886:	10 82       	st	Z, r1
 888:	07 c0       	rjmp	.+14     	; 0x898 <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 88a:	81 e2       	ldi	r24, 0x21	; 33
 88c:	80 93 eb 00 	sts	0x00EB, r24
 890:	03 c0       	rjmp	.+6      	; 0x898 <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 892:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 894:	21 11       	cpse	r18, r1
 896:	f7 ce       	rjmp	.-530    	; 0x686 <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 898:	ff 91       	pop	r31
 89a:	ef 91       	pop	r30
 89c:	df 91       	pop	r29
 89e:	cf 91       	pop	r28
 8a0:	bf 91       	pop	r27
 8a2:	af 91       	pop	r26
 8a4:	9f 91       	pop	r25
 8a6:	8f 91       	pop	r24
 8a8:	7f 91       	pop	r23
 8aa:	6f 91       	pop	r22
 8ac:	5f 91       	pop	r21
 8ae:	4f 91       	pop	r20
 8b0:	3f 91       	pop	r19
 8b2:	2f 91       	pop	r18
 8b4:	1f 91       	pop	r17
 8b6:	0f 91       	pop	r16
 8b8:	0f 90       	pop	r0
 8ba:	0f be       	out	0x3f, r0	; 63
 8bc:	0f 90       	pop	r0
 8be:	1f 90       	pop	r1
 8c0:	18 95       	reti

000008c2 <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
 8c2:	0f 93       	push	r16
 8c4:	1f 93       	push	r17
 8c6:	cf 93       	push	r28
	char c;

	while (1) {
		c = pgm_read_byte(s++);
 8c8:	8c 01       	movw	r16, r24
 8ca:	0f 5f       	subi	r16, 0xFF	; 255
 8cc:	1f 4f       	sbci	r17, 0xFF	; 255
 8ce:	fc 01       	movw	r30, r24
 8d0:	c4 91       	lpm	r28, Z
		if (!c) break;
 8d2:	cc 23       	and	r28, r28
 8d4:	71 f0       	breq	.+28     	; 0x8f2 <print_P+0x30>
		if (c == '\n') usb_tx_char('\r');
 8d6:	ca 30       	cpi	r28, 0x0A	; 10
 8d8:	19 f4       	brne	.+6      	; 0x8e0 <print_P+0x1e>
 8da:	8d e0       	ldi	r24, 0x0D	; 13
 8dc:	0e 94 45 02 	call	0x48a	; 0x48a <m_usb_tx_char>
		usb_tx_char(c);
 8e0:	8c 2f       	mov	r24, r28
 8e2:	0e 94 45 02 	call	0x48a	; 0x48a <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
 8e6:	f8 01       	movw	r30, r16
 8e8:	c4 91       	lpm	r28, Z
 8ea:	0f 5f       	subi	r16, 0xFF	; 255
 8ec:	1f 4f       	sbci	r17, 0xFF	; 255
		if (!c) break;
 8ee:	c1 11       	cpse	r28, r1
 8f0:	f2 cf       	rjmp	.-28     	; 0x8d6 <print_P+0x14>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
 8f2:	cf 91       	pop	r28
 8f4:	1f 91       	pop	r17
 8f6:	0f 91       	pop	r16
 8f8:	08 95       	ret

000008fa <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
 8fa:	ef 92       	push	r14
 8fc:	ff 92       	push	r15
 8fe:	0f 93       	push	r16
 900:	1f 93       	push	r17
 902:	cf 93       	push	r28
 904:	df 93       	push	r29
 906:	cd b7       	in	r28, 0x3d	; 61
 908:	de b7       	in	r29, 0x3e	; 62
 90a:	27 97       	sbiw	r28, 0x07	; 7
 90c:	0f b6       	in	r0, 0x3f	; 63
 90e:	f8 94       	cli
 910:	de bf       	out	0x3e, r29	; 62
 912:	0f be       	out	0x3f, r0	; 63
 914:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
 916:	8e 01       	movw	r16, r28
 918:	0f 5f       	subi	r16, 0xFF	; 255
 91a:	1f 4f       	sbci	r17, 0xFF	; 255
 91c:	27 e0       	ldi	r18, 0x07	; 7
 91e:	f8 01       	movw	r30, r16
 920:	11 92       	st	Z+, r1
 922:	2a 95       	dec	r18
 924:	e9 f7       	brne	.-6      	; 0x920 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 926:	4a e0       	ldi	r20, 0x0A	; 10
 928:	b8 01       	movw	r22, r16
 92a:	0e 94 b1 04 	call	0x962	; 0x962 <__itoa_ncheck>
 92e:	7e 01       	movw	r14, r28
 930:	f8 e0       	ldi	r31, 0x08	; 8
 932:	ef 0e       	add	r14, r31
 934:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
 936:	f8 01       	movw	r30, r16
 938:	81 91       	ld	r24, Z+
 93a:	8f 01       	movw	r16, r30
 93c:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
 93e:	0e 94 45 02 	call	0x48a	; 0x48a <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
 942:	0e 15       	cp	r16, r14
 944:	1f 05       	cpc	r17, r15
 946:	b9 f7       	brne	.-18     	; 0x936 <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
 948:	27 96       	adiw	r28, 0x07	; 7
 94a:	0f b6       	in	r0, 0x3f	; 63
 94c:	f8 94       	cli
 94e:	de bf       	out	0x3e, r29	; 62
 950:	0f be       	out	0x3f, r0	; 63
 952:	cd bf       	out	0x3d, r28	; 61
 954:	df 91       	pop	r29
 956:	cf 91       	pop	r28
 958:	1f 91       	pop	r17
 95a:	0f 91       	pop	r16
 95c:	ff 90       	pop	r15
 95e:	ef 90       	pop	r14
 960:	08 95       	ret

00000962 <__itoa_ncheck>:
 962:	bb 27       	eor	r27, r27
 964:	4a 30       	cpi	r20, 0x0A	; 10
 966:	31 f4       	brne	.+12     	; 0x974 <__itoa_ncheck+0x12>
 968:	99 23       	and	r25, r25
 96a:	22 f4       	brpl	.+8      	; 0x974 <__itoa_ncheck+0x12>
 96c:	bd e2       	ldi	r27, 0x2D	; 45
 96e:	90 95       	com	r25
 970:	81 95       	neg	r24
 972:	9f 4f       	sbci	r25, 0xFF	; 255
 974:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__utoa_common>

00000978 <__utoa_ncheck>:
 978:	bb 27       	eor	r27, r27

0000097a <__utoa_common>:
 97a:	fb 01       	movw	r30, r22
 97c:	55 27       	eor	r21, r21
 97e:	aa 27       	eor	r26, r26
 980:	88 0f       	add	r24, r24
 982:	99 1f       	adc	r25, r25
 984:	aa 1f       	adc	r26, r26
 986:	a4 17       	cp	r26, r20
 988:	10 f0       	brcs	.+4      	; 0x98e <__utoa_common+0x14>
 98a:	a4 1b       	sub	r26, r20
 98c:	83 95       	inc	r24
 98e:	50 51       	subi	r21, 0x10	; 16
 990:	b9 f7       	brne	.-18     	; 0x980 <__utoa_common+0x6>
 992:	a0 5d       	subi	r26, 0xD0	; 208
 994:	aa 33       	cpi	r26, 0x3A	; 58
 996:	08 f0       	brcs	.+2      	; 0x99a <__utoa_common+0x20>
 998:	a9 5d       	subi	r26, 0xD9	; 217
 99a:	a1 93       	st	Z+, r26
 99c:	00 97       	sbiw	r24, 0x00	; 0
 99e:	79 f7       	brne	.-34     	; 0x97e <__utoa_common+0x4>
 9a0:	b1 11       	cpse	r27, r1
 9a2:	b1 93       	st	Z+, r27
 9a4:	11 92       	st	Z+, r1
 9a6:	cb 01       	movw	r24, r22
 9a8:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <strrev>

000009ac <strrev>:
 9ac:	dc 01       	movw	r26, r24
 9ae:	fc 01       	movw	r30, r24
 9b0:	67 2f       	mov	r22, r23
 9b2:	71 91       	ld	r23, Z+
 9b4:	77 23       	and	r23, r23
 9b6:	e1 f7       	brne	.-8      	; 0x9b0 <strrev+0x4>
 9b8:	32 97       	sbiw	r30, 0x02	; 2
 9ba:	04 c0       	rjmp	.+8      	; 0x9c4 <strrev+0x18>
 9bc:	7c 91       	ld	r23, X
 9be:	6d 93       	st	X+, r22
 9c0:	70 83       	st	Z, r23
 9c2:	62 91       	ld	r22, -Z
 9c4:	ae 17       	cp	r26, r30
 9c6:	bf 07       	cpc	r27, r31
 9c8:	c8 f3       	brcs	.-14     	; 0x9bc <strrev+0x10>
 9ca:	08 95       	ret

000009cc <_exit>:
 9cc:	f8 94       	cli

000009ce <__stop_program>:
 9ce:	ff cf       	rjmp	.-2      	; 0x9ce <__stop_program>
