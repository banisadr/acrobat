
acrobat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000d4c  00000de0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  0080010a  0080010a  00000dea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a8b  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e7  00000000  00000000  00002a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ee  00000000  00000000  00003186  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d4  00000000  00000000  00003b74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e7  00000000  00000000  00004148  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023e3  00000000  00000000  0000482f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00006c12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__ctors_end>
   4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  10:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  14:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  18:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  1c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  20:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  24:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  28:	0c 94 45 03 	jmp	0x68a	; 0x68a <__vector_10>
  2c:	0c 94 83 03 	jmp	0x706	; 0x706 <__vector_11>
  30:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  34:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  38:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  3c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  40:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  44:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  48:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  4c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  54:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  58:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  5c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  60:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  64:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  68:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  6c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  70:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  74:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  78:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  7c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  80:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  84:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  88:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  8c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  90:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  94:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  98:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  9c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>

000000ac <__trampolines_end>:
  ac:	00 01       	movw	r0, r0
  ae:	00 00       	nop
  b0:	43 01       	movw	r8, r6
  b2:	12 00       	.word	0x0012	; ????
  b4:	02 00       	.word	0x0002	; ????
  b6:	00 00       	nop
  b8:	01 43       	sbci	r16, 0x31	; 49
  ba:	00 03       	mulsu	r16, r16
  bc:	00 00       	nop
  be:	fc 00       	.word	0x00fc	; ????
  c0:	04 01       	movw	r0, r8
  c2:	03 09       	sbc	r16, r3
  c4:	04 e8       	ldi	r16, 0x84	; 132
  c6:	00 12       	cpse	r0, r16
  c8:	02 03       	mulsu	r16, r18
  ca:	09 04       	cpc	r0, r9
  cc:	e0 00       	.word	0x00e0	; ????
  ce:	06 03       	mulsu	r16, r22
  d0:	03 09       	sbc	r16, r3
  d2:	04 d6       	rcall	.+3080   	; 0xcdc <__mulsf3_pse+0x42>
  d4:	00 08       	sbc	r0, r0

000000d6 <string3>:
  d6:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000000e0 <string2>:
  e0:	06 03 4d 00 32 00 00 00                             ..M.2...

000000e8 <string1>:
  e8:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
  f8:	65 00 00 00                                         e...

000000fc <string0>:
  fc:	04 03 09 04                                         ....

00000100 <config1_descriptor>:
 100:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 110:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 120:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 130:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 140:	40 00 00                                            @..

00000143 <device_descriptor>:
 143:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 153:	03 01                                               ..

00000155 <endpoint_config_table>:
 155:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

00000160 <__ctors_end>:
 160:	11 24       	eor	r1, r1
 162:	1f be       	out	0x3f, r1	; 63
 164:	cf ef       	ldi	r28, 0xFF	; 255
 166:	da e0       	ldi	r29, 0x0A	; 10
 168:	de bf       	out	0x3e, r29	; 62
 16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
 16c:	11 e0       	ldi	r17, 0x01	; 1
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b1 e0       	ldi	r27, 0x01	; 1
 172:	ec e4       	ldi	r30, 0x4C	; 76
 174:	fd e0       	ldi	r31, 0x0D	; 13
 176:	02 c0       	rjmp	.+4      	; 0x17c <__do_copy_data+0x10>
 178:	05 90       	lpm	r0, Z+
 17a:	0d 92       	st	X+, r0
 17c:	aa 30       	cpi	r26, 0x0A	; 10
 17e:	b1 07       	cpc	r27, r17
 180:	d9 f7       	brne	.-10     	; 0x178 <__do_copy_data+0xc>

00000182 <__do_clear_bss>:
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	aa e0       	ldi	r26, 0x0A	; 10
 186:	b1 e0       	ldi	r27, 0x01	; 1
 188:	01 c0       	rjmp	.+2      	; 0x18c <.do_clear_bss_start>

0000018a <.do_clear_bss_loop>:
 18a:	1d 92       	st	X+, r1

0000018c <.do_clear_bss_start>:
 18c:	a5 32       	cpi	r26, 0x25	; 37
 18e:	b2 07       	cpc	r27, r18
 190:	e1 f7       	brne	.-8      	; 0x18a <.do_clear_bss_loop>
 192:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <main>
 196:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <_exit>

0000019a <__bad_interrupt>:
 19a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019e <init>:
************************************************************/

/* Initialization of Pins and System Clock */
void init(void){
	
	m_clockdivide(3); // Set to 2 MHz
 19e:	e1 e6       	ldi	r30, 0x61	; 97
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 e8       	ldi	r24, 0x80	; 128
 1a4:	80 83       	st	Z, r24
 1a6:	83 e0       	ldi	r24, 0x03	; 3
 1a8:	80 83       	st	Z, r24
	
	//Set to Input
	clear(DDRD,0); // D0
 1aa:	50 98       	cbi	0x0a, 0	; 10
	clear(DDRD,1); // D1
 1ac:	51 98       	cbi	0x0a, 1	; 10
	clear(DDRD,2); // D2
 1ae:	52 98       	cbi	0x0a, 2	; 10
	
	//Set to Output
	
	while(!m_imu_init(accel_scale,gyro_scale)); //Initialize IMU
 1b0:	60 91 00 01 	lds	r22, 0x0100
 1b4:	80 91 01 01 	lds	r24, 0x0101
 1b8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <m_imu_init>
 1bc:	88 23       	and	r24, r24
 1be:	c1 f3       	breq	.-16     	; 0x1b0 <init+0x12>
	
	sei(); // Enable global interrupts
 1c0:	78 94       	sei
 1c2:	08 95       	ret

000001c4 <usb_enable>:
}

/* Setup USB */
void usb_enable(void)
{
	m_usb_init();
 1c4:	0e 94 29 03 	call	0x652	; 0x652 <m_usb_init>
	while(!m_usb_isconnected());
 1c8:	0e 94 42 03 	call	0x684	; 0x684 <m_usb_isconnected>
 1cc:	88 23       	and	r24, r24
 1ce:	e1 f3       	breq	.-8      	; 0x1c8 <usb_enable+0x4>
}
 1d0:	08 95       	ret

000001d2 <lowpass>:

/* Lowpass Filter using Alpha_low */
int lowpass(float alpha, int previous_output, int reading)
{
 1d2:	8f 92       	push	r8
 1d4:	9f 92       	push	r9
 1d6:	af 92       	push	r10
 1d8:	bf 92       	push	r11
 1da:	cf 92       	push	r12
 1dc:	df 92       	push	r13
 1de:	ef 92       	push	r14
 1e0:	ff 92       	push	r15
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	6b 01       	movw	r12, r22
 1e8:	7c 01       	movw	r14, r24
 1ea:	ea 01       	movw	r28, r20
	return (int)((float)reading*alpha +(1-alpha)*(float)previous_output);
 1ec:	b9 01       	movw	r22, r18
 1ee:	33 0f       	add	r19, r19
 1f0:	88 0b       	sbc	r24, r24
 1f2:	99 0b       	sbc	r25, r25
 1f4:	0e 94 ab 05 	call	0xb56	; 0xb56 <__floatsisf>
 1f8:	a7 01       	movw	r20, r14
 1fa:	96 01       	movw	r18, r12
 1fc:	0e 94 37 06 	call	0xc6e	; 0xc6e <__mulsf3>
 200:	4b 01       	movw	r8, r22
 202:	5c 01       	movw	r10, r24
 204:	a7 01       	movw	r20, r14
 206:	96 01       	movw	r18, r12
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	80 e8       	ldi	r24, 0x80	; 128
 20e:	9f e3       	ldi	r25, 0x3F	; 63
 210:	0e 94 06 05 	call	0xa0c	; 0xa0c <__subsf3>
 214:	6b 01       	movw	r12, r22
 216:	7c 01       	movw	r14, r24
 218:	be 01       	movw	r22, r28
 21a:	dd 0f       	add	r29, r29
 21c:	88 0b       	sbc	r24, r24
 21e:	99 0b       	sbc	r25, r25
 220:	0e 94 ab 05 	call	0xb56	; 0xb56 <__floatsisf>
 224:	9b 01       	movw	r18, r22
 226:	ac 01       	movw	r20, r24
 228:	c7 01       	movw	r24, r14
 22a:	b6 01       	movw	r22, r12
 22c:	0e 94 37 06 	call	0xc6e	; 0xc6e <__mulsf3>
 230:	9b 01       	movw	r18, r22
 232:	ac 01       	movw	r20, r24
 234:	c5 01       	movw	r24, r10
 236:	b4 01       	movw	r22, r8
 238:	0e 94 07 05 	call	0xa0e	; 0xa0e <__addsf3>
 23c:	0e 94 73 05 	call	0xae6	; 0xae6 <__fixsfsi>
}
 240:	cb 01       	movw	r24, r22
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	ff 90       	pop	r15
 248:	ef 90       	pop	r14
 24a:	df 90       	pop	r13
 24c:	cf 90       	pop	r12
 24e:	bf 90       	pop	r11
 250:	af 90       	pop	r10
 252:	9f 90       	pop	r9
 254:	8f 90       	pop	r8
 256:	08 95       	ret

00000258 <highpass>:

/* Highpass Filter using Aplha_high */
int highpass(float alpha, int previous_output, int previous_reading, int reading)
{
 258:	8f 92       	push	r8
 25a:	9f 92       	push	r9
 25c:	af 92       	push	r10
 25e:	bf 92       	push	r11
 260:	cf 92       	push	r12
 262:	df 92       	push	r13
 264:	ef 92       	push	r14
 266:	ff 92       	push	r15
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	6b 01       	movw	r12, r22
 272:	7c 01       	movw	r14, r24
 274:	e9 01       	movw	r28, r18
	return (int)((float)previous_output*alpha + alpha*(float)(reading-previous_reading));
 276:	ba 01       	movw	r22, r20
 278:	55 0f       	add	r21, r21
 27a:	88 0b       	sbc	r24, r24
 27c:	99 0b       	sbc	r25, r25
 27e:	0e 94 ab 05 	call	0xb56	; 0xb56 <__floatsisf>
 282:	a7 01       	movw	r20, r14
 284:	96 01       	movw	r18, r12
 286:	0e 94 37 06 	call	0xc6e	; 0xc6e <__mulsf3>
 28a:	4b 01       	movw	r8, r22
 28c:	5c 01       	movw	r10, r24
 28e:	b8 01       	movw	r22, r16
 290:	6c 1b       	sub	r22, r28
 292:	7d 0b       	sbc	r23, r29
 294:	07 2e       	mov	r0, r23
 296:	00 0c       	add	r0, r0
 298:	88 0b       	sbc	r24, r24
 29a:	99 0b       	sbc	r25, r25
 29c:	0e 94 ab 05 	call	0xb56	; 0xb56 <__floatsisf>
 2a0:	a7 01       	movw	r20, r14
 2a2:	96 01       	movw	r18, r12
 2a4:	0e 94 37 06 	call	0xc6e	; 0xc6e <__mulsf3>
 2a8:	9b 01       	movw	r18, r22
 2aa:	ac 01       	movw	r20, r24
 2ac:	c5 01       	movw	r24, r10
 2ae:	b4 01       	movw	r22, r8
 2b0:	0e 94 07 05 	call	0xa0e	; 0xa0e <__addsf3>
 2b4:	0e 94 73 05 	call	0xae6	; 0xae6 <__fixsfsi>
}
 2b8:	cb 01       	movw	r24, r22
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	1f 91       	pop	r17
 2c0:	0f 91       	pop	r16
 2c2:	ff 90       	pop	r15
 2c4:	ef 90       	pop	r14
 2c6:	df 90       	pop	r13
 2c8:	cf 90       	pop	r12
 2ca:	bf 90       	pop	r11
 2cc:	af 90       	pop	r10
 2ce:	9f 90       	pop	r9
 2d0:	8f 90       	pop	r8
 2d2:	08 95       	ret

000002d4 <main>:
Main Loop
************************************************************/
int main(void)
{
	/* Confirm Power */
	m_red(ON);
 2d4:	6e 9a       	sbi	0x0d, 6	; 13
 2d6:	76 98       	cbi	0x0e, 6	; 14

	/* Initializations */
	init();
 2d8:	0e 94 cf 00 	call	0x19e	; 0x19e <init>
	usb_enable();
 2dc:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <usb_enable>
	int gy_previous_reading = 0;

	/* Confirm successful initialization(s) */
	m_green(ON);
 2e0:	6a 9a       	sbi	0x0d, 2	; 13
 2e2:	72 98       	cbi	0x0e, 2	; 14
	m_red(ON);

	/* Initializations */
	init();
	usb_enable();
	int gy_previous_reading = 0;
 2e4:	d1 2c       	mov	r13, r1
 2e6:	e1 2c       	mov	r14, r1
	/* Confirm successful initialization(s) */
	m_green(ON);

	/* Run */
	while (1){
		if (m_imu_raw(data))
 2e8:	80 e1       	ldi	r24, 0x10	; 16
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	0e 94 d7 02 	call	0x5ae	; 0x5ae <m_imu_raw>
 2f0:	88 23       	and	r24, r24
 2f2:	09 f4       	brne	.+2      	; 0x2f6 <main+0x22>
 2f4:	4b c0       	rjmp	.+150    	; 0x38c <main+0xb8>
		{
			m_green(ON);
 2f6:	6a 9a       	sbi	0x0d, 2	; 13
 2f8:	72 98       	cbi	0x0e, 2	; 14
			m_red(OFF);
 2fa:	6e 9a       	sbi	0x0d, 6	; 13
 2fc:	76 9a       	sbi	0x0e, 6	; 14
			
			
			ax = lowpass(0.85,ax,data[0])+AX_OFFSET;
 2fe:	c0 e1       	ldi	r28, 0x10	; 16
 300:	d1 e0       	ldi	r29, 0x01	; 1
 302:	28 81       	ld	r18, Y
 304:	39 81       	ldd	r19, Y+1	; 0x01
 306:	40 91 0e 01 	lds	r20, 0x010E
 30a:	50 91 0f 01 	lds	r21, 0x010F
 30e:	6a e9       	ldi	r22, 0x9A	; 154
 310:	79 e9       	ldi	r23, 0x99	; 153
 312:	89 e5       	ldi	r24, 0x59	; 89
 314:	9f e3       	ldi	r25, 0x3F	; 63
 316:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lowpass>
 31a:	88 58       	subi	r24, 0x88	; 136
 31c:	91 09       	sbc	r25, r1
 31e:	90 93 0f 01 	sts	0x010F, r25
 322:	80 93 0e 01 	sts	0x010E, r24
			az = lowpass(0.85,az,data[2])+AZ_OFFSET;
 326:	2c 81       	ldd	r18, Y+4	; 0x04
 328:	3d 81       	ldd	r19, Y+5	; 0x05
 32a:	40 91 0c 01 	lds	r20, 0x010C
 32e:	50 91 0d 01 	lds	r21, 0x010D
 332:	6a e9       	ldi	r22, 0x9A	; 154
 334:	79 e9       	ldi	r23, 0x99	; 153
 336:	89 e5       	ldi	r24, 0x59	; 89
 338:	9f e3       	ldi	r25, 0x3F	; 63
 33a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lowpass>
 33e:	87 96       	adiw	r24, 0x27	; 39
 340:	90 93 0d 01 	sts	0x010D, r25
 344:	80 93 0c 01 	sts	0x010C, r24
			gy = lowpass(ALPHA_LOW,gy,data[4])+GY_OFFSET;
 348:	f8 84       	ldd	r15, Y+8	; 0x08
 34a:	c9 85       	ldd	r28, Y+9	; 0x09
 34c:	40 91 0a 01 	lds	r20, 0x010A
 350:	50 91 0b 01 	lds	r21, 0x010B
 354:	2f 2d       	mov	r18, r15
 356:	3c 2f       	mov	r19, r28
 358:	63 e3       	ldi	r22, 0x33	; 51
 35a:	73 e3       	ldi	r23, 0x33	; 51
 35c:	83 e7       	ldi	r24, 0x73	; 115
 35e:	9f e3       	ldi	r25, 0x3F	; 63
 360:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lowpass>
 364:	ac 01       	movw	r20, r24
 366:	49 57       	subi	r20, 0x79	; 121
 368:	51 09       	sbc	r21, r1
			gy = highpass(ALPHA_HIGH,gy,gy_previous_reading,data[4]);
 36a:	0f 2d       	mov	r16, r15
 36c:	1c 2f       	mov	r17, r28
 36e:	2d 2d       	mov	r18, r13
 370:	3e 2d       	mov	r19, r14
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	9f e3       	ldi	r25, 0x3F	; 63
 37a:	0e 94 2c 01 	call	0x258	; 0x258 <highpass>
 37e:	90 93 0b 01 	sts	0x010B, r25
 382:	80 93 0a 01 	sts	0x010A, r24
			gy_previous_reading = data[4];
 386:	df 2c       	mov	r13, r15
 388:	ec 2e       	mov	r14, r28
 38a:	ae cf       	rjmp	.-164    	; 0x2e8 <main+0x14>
			*/
			
		} 
		else
		{
			m_green(OFF);
 38c:	6a 9a       	sbi	0x0d, 2	; 13
 38e:	72 9a       	sbi	0x0e, 2	; 14
			m_red(ON);
 390:	6e 9a       	sbi	0x0d, 6	; 13
 392:	76 98       	cbi	0x0e, 6	; 14
 394:	a9 cf       	rjmp	.-174    	; 0x2e8 <main+0x14>

00000396 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
 396:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
 398:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
 39a:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
 39c:	8c e0       	ldi	r24, 0x0C	; 12
 39e:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
 3a2:	e9 e6       	ldi	r30, 0x69	; 105
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	80 62       	ori	r24, 0x20	; 32
 3aa:	80 83       	st	Z, r24
 3ac:	80 81       	ld	r24, Z
 3ae:	8f 7e       	andi	r24, 0xEF	; 239
 3b0:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
 3b2:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
 3b4:	78 94       	sei
 3b6:	08 95       	ret

000003b8 <twi_read_byte>:
}

// TWI: read BYTE, NACK, STOP
unsigned char twi_read_byte(void)
{
    TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, NACK, and wait for another byte
 3b8:	84 e8       	ldi	r24, 0x84	; 132
 3ba:	80 93 bc 00 	sts	0x00BC, r24
    while(!(TWCR & (1<<TWINT))){};  // wait for an interrupt to signal that a new byte is available
 3be:	ec eb       	ldi	r30, 0xBC	; 188
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	80 81       	ld	r24, Z
 3c4:	88 23       	and	r24, r24
 3c6:	ec f7       	brge	.-6      	; 0x3c2 <twi_read_byte+0xa>
    return TWDR;
 3c8:	80 91 bb 00 	lds	r24, 0x00BB
    twi_stop();
}
 3cc:	08 95       	ret

000003ce <twi_wait_for_ack>:
}

// TWI:  wait for ACK packet (0=fail, 1=success)
unsigned char twi_wait_for_ack(void)
{
	unsigned int wait=0;
 3ce:	20 e0       	ldi	r18, 0x00	; 0
 3d0:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<MAX_WAIT)){};	// wait for acknowledgement that the byte was sent
 3d2:	ec eb       	ldi	r30, 0xBC	; 188
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	88 23       	and	r24, r24
 3da:	34 f0       	brlt	.+12     	; 0x3e8 <twi_wait_for_ack+0x1a>
 3dc:	2f 5f       	subi	r18, 0xFF	; 255
 3de:	3f 4f       	sbci	r19, 0xFF	; 255
 3e0:	29 3e       	cpi	r18, 0xE9	; 233
 3e2:	83 e0       	ldi	r24, 0x03	; 3
 3e4:	38 07       	cpc	r19, r24
 3e6:	b9 f7       	brne	.-18     	; 0x3d6 <twi_wait_for_ack+0x8>
    return (wait==MAX_WAIT? 0 : 1);
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	28 3e       	cpi	r18, 0xE8	; 232
 3ec:	33 40       	sbci	r19, 0x03	; 3
 3ee:	09 f4       	brne	.+2      	; 0x3f2 <twi_wait_for_ack+0x24>
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	08 95       	ret

000003f4 <twi_send_byte>:
}

// TWI: send BYTE, wait for ACK
unsigned char twi_send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
 3f4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
 3f8:	84 e8       	ldi	r24, 0x84	; 132
 3fa:	80 93 bc 00 	sts	0x00BC, r24
	return (twi_wait_for_ack()) ? (TWSR & 0xF8) : 0 ;
 3fe:	0e 94 e7 01 	call	0x3ce	; 0x3ce <twi_wait_for_ack>
 402:	88 23       	and	r24, r24
 404:	19 f0       	breq	.+6      	; 0x40c <twi_send_byte+0x18>
 406:	80 91 b9 00 	lds	r24, 0x00B9
 40a:	88 7f       	andi	r24, 0xF8	; 248
}
 40c:	08 95       	ret

0000040e <twi_start>:
// PRIVATE FUNCTIONS:

// TWI: send START condition, wait for ACK, send ADDRESS with R/W flag
// readwrite = 1 for read, 0 for write
unsigned char twi_start(unsigned char address, unsigned char readwrite)
{
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	c8 2f       	mov	r28, r24
 414:	d6 2f       	mov	r29, r22
    unsigned char status;
    
    // START packet:
    TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 416:	84 ea       	ldi	r24, 0xA4	; 164
 418:	80 93 bc 00 	sts	0x00BC, r24
    if(!twi_wait_for_ack()){
 41c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <twi_wait_for_ack>
 420:	81 11       	cpse	r24, r1
 422:	04 c0       	rjmp	.+8      	; 0x42c <twi_start+0x1e>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 424:	94 e9       	ldi	r25, 0x94	; 148
 426:	90 93 bc 00 	sts	0x00BC, r25
 42a:	1c c0       	rjmp	.+56     	; 0x464 <twi_start+0x56>
        twi_stop();
        return 0; // COMM failure
    }
    
    // ADDRESS packet:
    if(readwrite)
 42c:	dd 23       	and	r29, r29
 42e:	61 f0       	breq	.+24     	; 0x448 <twi_start+0x3a>
    { // READ
        status = twi_send_byte(((address<<1) + 1));
 430:	8c 2f       	mov	r24, r28
 432:	88 0f       	add	r24, r24
 434:	8f 5f       	subi	r24, 0xFF	; 255
 436:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <twi_send_byte>
        if(status== 0x48){ // ACK was not received - may not be connected/listening
 43a:	88 34       	cpi	r24, 0x48	; 72
 43c:	81 f4       	brne	.+32     	; 0x45e <twi_start+0x50>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 43e:	84 e9       	ldi	r24, 0x94	; 148
 440:	80 93 bc 00 	sts	0x00BC, r24
    if(readwrite)
    { // READ
        status = twi_send_byte(((address<<1) + 1));
        if(status== 0x48){ // ACK was not received - may not be connected/listening
            twi_stop();    
            return 0;	// failure
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	0e c0       	rjmp	.+28     	; 0x464 <twi_start+0x56>
        }	
    } else { // WRITE
        status = twi_send_byte(address<<1);
 448:	8c 2f       	mov	r24, r28
 44a:	88 0f       	add	r24, r24
 44c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <twi_send_byte>
        if(status== 0x20){ // ACK was not received - may not be connected/listening
 450:	80 32       	cpi	r24, 0x20	; 32
 452:	39 f4       	brne	.+14     	; 0x462 <twi_start+0x54>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 454:	84 e9       	ldi	r24, 0x94	; 148
 456:	80 93 bc 00 	sts	0x00BC, r24
        }	
    } else { // WRITE
        status = twi_send_byte(address<<1);
        if(status== 0x20){ // ACK was not received - may not be connected/listening
            twi_stop();
            return 0;	// failure
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	03 c0       	rjmp	.+6      	; 0x464 <twi_start+0x56>
        }	        
    }
    return 1;	// success
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	01 c0       	rjmp	.+2      	; 0x464 <twi_start+0x56>
 462:	81 e0       	ldi	r24, 0x01	; 1
    
}
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	08 95       	ret

0000046a <m_read_register>:
	set(EIMSK,INT2); // demask the interrupt
	sei(); // enable global interrupts
}

unsigned char m_read_register(unsigned char addr, unsigned char reg)
{
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	c8 2f       	mov	r28, r24
 470:	d6 2f       	mov	r29, r22
    if(!twi_start(addr,WRITE)) return 0; // START + W
 472:	60 e0       	ldi	r22, 0x00	; 0
 474:	0e 94 07 02 	call	0x40e	; 0x40e <twi_start>
 478:	88 23       	and	r24, r24
 47a:	79 f0       	breq	.+30     	; 0x49a <m_read_register+0x30>
	if(!twi_send_byte(reg)) return 0;    // register to read
 47c:	8d 2f       	mov	r24, r29
 47e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <twi_send_byte>
 482:	88 23       	and	r24, r24
 484:	51 f0       	breq	.+20     	; 0x49a <m_read_register+0x30>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 486:	84 e9       	ldi	r24, 0x94	; 148
 488:	80 93 bc 00 	sts	0x00BC, r24
unsigned char m_read_register(unsigned char addr, unsigned char reg)
{
    if(!twi_start(addr,WRITE)) return 0; // START + W
	if(!twi_send_byte(reg)) return 0;    // register to read
    twi_stop();                          // STOP
    if(!twi_start(addr,READ)) return 0;  // START + R
 48c:	61 e0       	ldi	r22, 0x01	; 1
 48e:	8c 2f       	mov	r24, r28
 490:	0e 94 07 02 	call	0x40e	; 0x40e <twi_start>
 494:	81 11       	cpse	r24, r1
	return(twi_read_byte());             // return register value
 496:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <twi_read_byte>
}
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	08 95       	ret

000004a0 <m_write_register>:

unsigned char m_write_register(unsigned char addr, unsigned char reg, unsigned char value)
{
 4a0:	cf 93       	push	r28
 4a2:	df 93       	push	r29
 4a4:	c6 2f       	mov	r28, r22
 4a6:	d4 2f       	mov	r29, r20
    if(!twi_start(addr,WRITE)) return 0; // START + W
 4a8:	60 e0       	ldi	r22, 0x00	; 0
 4aa:	0e 94 07 02 	call	0x40e	; 0x40e <twi_start>
 4ae:	88 23       	and	r24, r24
 4b0:	71 f0       	breq	.+28     	; 0x4ce <m_write_register+0x2e>
	if(!twi_send_byte(reg)) return 0;    // register to write to
 4b2:	8c 2f       	mov	r24, r28
 4b4:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <twi_send_byte>
 4b8:	88 23       	and	r24, r24
 4ba:	49 f0       	breq	.+18     	; 0x4ce <m_write_register+0x2e>
    if(!twi_send_byte(value)) return 0;  // value
 4bc:	8d 2f       	mov	r24, r29
 4be:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <twi_send_byte>
 4c2:	88 23       	and	r24, r24
 4c4:	21 f0       	breq	.+8      	; 0x4ce <m_write_register+0x2e>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 4c6:	84 e9       	ldi	r24, 0x94	; 148
 4c8:	80 93 bc 00 	sts	0x00BC, r24
{
    if(!twi_start(addr,WRITE)) return 0; // START + W
	if(!twi_send_byte(reg)) return 0;    // register to write to
    if(!twi_send_byte(value)) return 0;  // value
    twi_stop();                          // STOP
    return(1);
 4cc:	81 e0       	ldi	r24, 0x01	; 1
}
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	08 95       	ret

000004d4 <m_imu_init>:
#define MIMU            0x69

// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
 4d8:	84 30       	cpi	r24, 0x04	; 4
 4da:	08 f0       	brcs	.+2      	; 0x4de <m_imu_init+0xa>
 4dc:	60 c0       	rjmp	.+192    	; 0x59e <m_imu_init+0xca>
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
 4de:	64 30       	cpi	r22, 0x04	; 4
 4e0:	08 f0       	brcs	.+2      	; 0x4e4 <m_imu_init+0x10>
 4e2:	5f c0       	rjmp	.+190    	; 0x5a2 <m_imu_init+0xce>
 4e4:	d6 2f       	mov	r29, r22
 4e6:	c8 2f       	mov	r28, r24

	m_bus_init();
 4e8:	0e 94 cb 01 	call	0x396	; 0x396 <m_bus_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ec:	2f e5       	ldi	r18, 0x5F	; 95
 4ee:	8a ee       	ldi	r24, 0xEA	; 234
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	21 50       	subi	r18, 0x01	; 1
 4f4:	80 40       	sbci	r24, 0x00	; 0
 4f6:	90 40       	sbci	r25, 0x00	; 0
 4f8:	e1 f7       	brne	.-8      	; 0x4f2 <m_imu_init+0x1e>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <m_imu_init+0x28>
 4fc:	00 00       	nop
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
 4fe:	65 e7       	ldi	r22, 0x75	; 117
 500:	89 e6       	ldi	r24, 0x69	; 105
 502:	0e 94 35 02 	call	0x46a	; 0x46a <m_read_register>
 506:	88 36       	cpi	r24, 0x68	; 104
 508:	09 f0       	breq	.+2      	; 0x50c <m_imu_init+0x38>
 50a:	4d c0       	rjmp	.+154    	; 0x5a6 <m_imu_init+0xd2>
    
    // SET THE CLOCK SOURCE TO X-AXIS GYRO
    // reg: 0x68 (PWR_MGMT_1)
    // bits 0-2 control clock source
    // value: 0x01 (clock to PLL on X-axis gyro reference)
    m_write_register(MIMU,0x6B,0x01);
 50c:	41 e0       	ldi	r20, 0x01	; 1
 50e:	6b e6       	ldi	r22, 0x6B	; 107
 510:	89 e6       	ldi	r24, 0x69	; 105
 512:	0e 94 50 02 	call	0x4a0	; 0x4a0 <m_write_register>

    // SET THE ACCEL FULL-SCALE +/- RANGE (0=2G, 1=4G, 2=8G, 3=16G)
    // reg: 0x1C (ACCEL_CONFIG)
    // bits: 3-4 set +/- full-scale range
    m_write_register(MIMU,0x1C,accel_scale<<3);
 516:	4c 2f       	mov	r20, r28
 518:	44 0f       	add	r20, r20
 51a:	44 0f       	add	r20, r20
 51c:	44 0f       	add	r20, r20
 51e:	6c e1       	ldi	r22, 0x1C	; 28
 520:	89 e6       	ldi	r24, 0x69	; 105
 522:	0e 94 50 02 	call	0x4a0	; 0x4a0 <m_write_register>

    // SET THE GYRO FULL-SCALE +/- RANGE (0=250, 1=500, 2=1000, 3=2000 DEG/SEC)
    // reg: 0x1B (GYRO_CONFIG)
    // bits: 3-4 set +/- full-scale range
    // value: 0x00
    m_write_register(MIMU,0x1B,gyro_scale<<3); // this shouldn't be doing anything
 526:	4d 2f       	mov	r20, r29
 528:	44 0f       	add	r20, r20
 52a:	44 0f       	add	r20, r20
 52c:	44 0f       	add	r20, r20
 52e:	6b e1       	ldi	r22, 0x1B	; 27
 530:	89 e6       	ldi	r24, 0x69	; 105
 532:	0e 94 50 02 	call	0x4a0	; 0x4a0 <m_write_register>
      
    // SET THE MPU INTO I2C BYPASS MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 1 (1=bypass, 0=normal op)
    m_write_register(MIMU,0x37,0x02); // switch the MPU into bypass mode
 536:	42 e0       	ldi	r20, 0x02	; 2
 538:	67 e3       	ldi	r22, 0x37	; 55
 53a:	89 e6       	ldi	r24, 0x69	; 105
 53c:	0e 94 50 02 	call	0x4a0	; 0x4a0 <m_write_register>
    
    // CONFIGURE THE MAGNETOMETER
    // address: 0x1E (for the magnetometer)
    // reg: 2 (mode register)
    // val: 0 (continuous output)
    m_write_register(0x1E,2,0); // set the mag. to continuous output mode
 540:	40 e0       	ldi	r20, 0x00	; 0
 542:	62 e0       	ldi	r22, 0x02	; 2
 544:	8e e1       	ldi	r24, 0x1E	; 30
 546:	0e 94 50 02 	call	0x4a0	; 0x4a0 <m_write_register>
    
    // SET THE MPU TO NORMAL I2C MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 5 (1=master, 0=passthrough)
    m_write_register(MIMU,0x37,0);    // switch the MPU out of bypass mode
 54a:	40 e0       	ldi	r20, 0x00	; 0
 54c:	67 e3       	ldi	r22, 0x37	; 55
 54e:	89 e6       	ldi	r24, 0x69	; 105
 550:	0e 94 50 02 	call	0x4a0	; 0x4a0 <m_write_register>
    // SET THE AUXILLIARY I2C SAMPLE RATE
    // reg: 0x34 (I2C_SLC4_CTRL) 
    // value: 0x1E (30 > 8000/30 = 266.6Hz)
    // reg: 0x67 (MST_DELAY_CTRL)
    // bit: 0 (1=slowed down, 0=full speed)
    m_write_register(MIMU,0x34,0x1E);
 554:	4e e1       	ldi	r20, 0x1E	; 30
 556:	64 e3       	ldi	r22, 0x34	; 52
 558:	89 e6       	ldi	r24, 0x69	; 105
 55a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <m_write_register>
    m_write_register(MIMU,0x67,0x01);
 55e:	41 e0       	ldi	r20, 0x01	; 1
 560:	67 e6       	ldi	r22, 0x67	; 103
 562:	89 e6       	ldi	r24, 0x69	; 105
 564:	0e 94 50 02 	call	0x4a0	; 0x4a0 <m_write_register>
    // ADJUST the auxilliary I2C port clock speed, etc.
    // reg: 0x24 (MST_CTRL)
    // bit: 4 = 1 (stop then start), 2 (restart)
    // bit: 0-3 = clock prescaler (0x0D = 400kHz)
    // not necessary, perhaps.  We shall see?
    m_write_register(MIMU,0x24,0x1D);
 568:	4d e1       	ldi	r20, 0x1D	; 29
 56a:	64 e2       	ldi	r22, 0x24	; 36
 56c:	89 e6       	ldi	r24, 0x69	; 105
 56e:	0e 94 50 02 	call	0x4a0	; 0x4a0 <m_write_register>

    // SET THE MAGNETOMETER ADDRESS
    // reg: 0x25 (I2C_SLC0_ADDR)
    // value: 0x1E (from the magnetometer datasheet)
    // notes: for read from slave, set bit 7 to 1; to write, set bit 7 to 0
    m_write_register(MIMU,0x25,0x9E);
 572:	4e e9       	ldi	r20, 0x9E	; 158
 574:	65 e2       	ldi	r22, 0x25	; 37
 576:	89 e6       	ldi	r24, 0x69	; 105
 578:	0e 94 50 02 	call	0x4a0	; 0x4a0 <m_write_register>

    // SET THE MAGNETOMETER DATA START ADDRESS
    // reg: 0x26 (I2C_SLV0_REG)
    // val: 3 (X high byte)
    m_write_register(MIMU,0x26,3);
 57c:	43 e0       	ldi	r20, 0x03	; 3
 57e:	66 e2       	ldi	r22, 0x26	; 38
 580:	89 e6       	ldi	r24, 0x69	; 105
 582:	0e 94 50 02 	call	0x4a0	; 0x4a0 <m_write_register>
    // reg: 0x27 (I2C_SLV0_CTRL
    // bit: 0-3 (# of bytes to ingest) = 6
    //      4: byte/word grouping control
    //      6: swap bytes
    //      7: enable slave (1=on, 0=off)
    m_write_register(MIMU,0x27,0x96);
 586:	46 e9       	ldi	r20, 0x96	; 150
 588:	67 e2       	ldi	r22, 0x27	; 39
 58a:	89 e6       	ldi	r24, 0x69	; 105
 58c:	0e 94 50 02 	call	0x4a0	; 0x4a0 <m_write_register>
    
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
 590:	40 e2       	ldi	r20, 0x20	; 32
 592:	6a e6       	ldi	r22, 0x6A	; 106
 594:	89 e6       	ldi	r24, 0x69	; 105
 596:	0e 94 50 02 	call	0x4a0	; 0x4a0 <m_write_register>
    
    return 1;   // SUCCESS!
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	05 c0       	rjmp	.+10     	; 0x5a8 <m_imu_init+0xd4>
// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	03 c0       	rjmp	.+6      	; 0x5a8 <m_imu_init+0xd4>
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	01 c0       	rjmp	.+2      	; 0x5a8 <m_imu_init+0xd4>

	m_bus_init();
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
 5a6:	80 e0       	ldi	r24, 0x00	; 0
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
    
    return 1;   // SUCCESS!
}
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	08 95       	ret

000005ae <m_imu_raw>:
// (41:42) TH:TL
// (43:44) GXH:GXL, (45:46) GYH:GYL, (47:48) GZH:GZL
// (49:4A) MXH:MXL, (4B:4C) MYH:MYL, (4D:4E) MZH:MZL

unsigned char m_imu_raw(int* raw_data)
{
 5ae:	cf 92       	push	r12
 5b0:	df 92       	push	r13
 5b2:	ef 92       	push	r14
 5b4:	ff 92       	push	r15
 5b6:	1f 93       	push	r17
 5b8:	cf 93       	push	r28
 5ba:	df 93       	push	r29
 5bc:	cd b7       	in	r28, 0x3d	; 61
 5be:	de b7       	in	r29, 0x3e	; 62
 5c0:	64 97       	sbiw	r28, 0x14	; 20
 5c2:	0f b6       	in	r0, 0x3f	; 63
 5c4:	f8 94       	cli
 5c6:	de bf       	out	0x3e, r29	; 62
 5c8:	0f be       	out	0x3f, r0	; 63
 5ca:	cd bf       	out	0x3d, r28	; 61
 5cc:	6c 01       	movw	r12, r24
 5ce:	ce 01       	movw	r24, r28
 5d0:	01 96       	adiw	r24, 0x01	; 1
 5d2:	7c 01       	movw	r14, r24
 5d4:	1e e4       	ldi	r17, 0x4E	; 78
    unsigned char buffer[20]; 
    int i;
    
    for(i=0;i<20;i++) // read 20 bytes (6 accel + 2 temp + 6 gyro + 6 mag)
    {
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
 5d6:	61 2f       	mov	r22, r17
 5d8:	89 e6       	ldi	r24, 0x69	; 105
 5da:	0e 94 35 02 	call	0x46a	; 0x46a <m_read_register>
 5de:	f7 01       	movw	r30, r14
 5e0:	81 93       	st	Z+, r24
 5e2:	7f 01       	movw	r14, r30
 5e4:	11 50       	subi	r17, 0x01	; 1
unsigned char m_imu_raw(int* raw_data)
{
    unsigned char buffer[20]; 
    int i;
    
    for(i=0;i<20;i++) // read 20 bytes (6 accel + 2 temp + 6 gyro + 6 mag)
 5e6:	1a 33       	cpi	r17, 0x3A	; 58
 5e8:	b1 f7       	brne	.-20     	; 0x5d6 <m_imu_raw+0x28>
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
    }
    // buffer: [MZL, MZH, MYL, MYH, MXL, MXH, GZL, GZH, GYL, GYH, GXL, GXH, TL, TH, AZL, AZH, AYL, AYH, AXL, AXH]
    for(i=0;i<3;i++)
    {
        raw_data[2-i] = *(int*)&buffer[14+2*i]; // [2] = [AZL:AZH], [1] = [AYL:AYH], [0] = [AXL:AXH]
 5ea:	8f 85       	ldd	r24, Y+15	; 0x0f
 5ec:	98 89       	ldd	r25, Y+16	; 0x10
 5ee:	f6 01       	movw	r30, r12
 5f0:	95 83       	std	Z+5, r25	; 0x05
 5f2:	84 83       	std	Z+4, r24	; 0x04
        raw_data[5-i] = *(int*)&buffer[6+2*i];  // [5] = [GZL:GZH], [4] = [GYL:GYH], [3] = [GXL:GXH]
 5f4:	8f 81       	ldd	r24, Y+7	; 0x07
 5f6:	98 85       	ldd	r25, Y+8	; 0x08
 5f8:	93 87       	std	Z+11, r25	; 0x0b
 5fa:	82 87       	std	Z+10, r24	; 0x0a
        raw_data[8-i] = *(int*)&buffer[2*i];    // [8] = [MZL:MZH], [7] = [MYL:MYH], [6] = [MXL:MXH]
 5fc:	89 81       	ldd	r24, Y+1	; 0x01
 5fe:	9a 81       	ldd	r25, Y+2	; 0x02
 600:	91 8b       	std	Z+17, r25	; 0x11
 602:	80 8b       	std	Z+16, r24	; 0x10
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
    }
    // buffer: [MZL, MZH, MYL, MYH, MXL, MXH, GZL, GZH, GYL, GYH, GXL, GXH, TL, TH, AZL, AZH, AYL, AYH, AXL, AXH]
    for(i=0;i<3;i++)
    {
        raw_data[2-i] = *(int*)&buffer[14+2*i]; // [2] = [AZL:AZH], [1] = [AYL:AYH], [0] = [AXL:AXH]
 604:	89 89       	ldd	r24, Y+17	; 0x11
 606:	9a 89       	ldd	r25, Y+18	; 0x12
 608:	93 83       	std	Z+3, r25	; 0x03
 60a:	82 83       	std	Z+2, r24	; 0x02
        raw_data[5-i] = *(int*)&buffer[6+2*i];  // [5] = [GZL:GZH], [4] = [GYL:GYH], [3] = [GXL:GXH]
 60c:	89 85       	ldd	r24, Y+9	; 0x09
 60e:	9a 85       	ldd	r25, Y+10	; 0x0a
 610:	91 87       	std	Z+9, r25	; 0x09
 612:	80 87       	std	Z+8, r24	; 0x08
        raw_data[8-i] = *(int*)&buffer[2*i];    // [8] = [MZL:MZH], [7] = [MYL:MYH], [6] = [MXL:MXH]
 614:	8b 81       	ldd	r24, Y+3	; 0x03
 616:	9c 81       	ldd	r25, Y+4	; 0x04
 618:	97 87       	std	Z+15, r25	; 0x0f
 61a:	86 87       	std	Z+14, r24	; 0x0e
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
    }
    // buffer: [MZL, MZH, MYL, MYH, MXL, MXH, GZL, GZH, GYL, GYH, GXL, GXH, TL, TH, AZL, AZH, AYL, AYH, AXL, AXH]
    for(i=0;i<3;i++)
    {
        raw_data[2-i] = *(int*)&buffer[14+2*i]; // [2] = [AZL:AZH], [1] = [AYL:AYH], [0] = [AXL:AXH]
 61c:	8b 89       	ldd	r24, Y+19	; 0x13
 61e:	9c 89       	ldd	r25, Y+20	; 0x14
 620:	91 83       	std	Z+1, r25	; 0x01
 622:	80 83       	st	Z, r24
        raw_data[5-i] = *(int*)&buffer[6+2*i];  // [5] = [GZL:GZH], [4] = [GYL:GYH], [3] = [GXL:GXH]
 624:	8b 85       	ldd	r24, Y+11	; 0x0b
 626:	9c 85       	ldd	r25, Y+12	; 0x0c
 628:	97 83       	std	Z+7, r25	; 0x07
 62a:	86 83       	std	Z+6, r24	; 0x06
        raw_data[8-i] = *(int*)&buffer[2*i];    // [8] = [MZL:MZH], [7] = [MYL:MYH], [6] = [MXL:MXH]
 62c:	8d 81       	ldd	r24, Y+5	; 0x05
 62e:	9e 81       	ldd	r25, Y+6	; 0x06
 630:	95 87       	std	Z+13, r25	; 0x0d
 632:	84 87       	std	Z+12, r24	; 0x0c
    }
    return 1;
}
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	64 96       	adiw	r28, 0x14	; 20
 638:	0f b6       	in	r0, 0x3f	; 63
 63a:	f8 94       	cli
 63c:	de bf       	out	0x3e, r29	; 62
 63e:	0f be       	out	0x3f, r0	; 63
 640:	cd bf       	out	0x3d, r28	; 61
 642:	df 91       	pop	r29
 644:	cf 91       	pop	r28
 646:	1f 91       	pop	r17
 648:	ff 90       	pop	r15
 64a:	ef 90       	pop	r14
 64c:	df 90       	pop	r13
 64e:	cf 90       	pop	r12
 650:	08 95       	ret

00000652 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
 658:	80 ea       	ldi	r24, 0xA0	; 160
 65a:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
 65e:	82 e1       	ldi	r24, 0x12	; 18
 660:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 662:	09 b4       	in	r0, 0x29	; 41
 664:	00 fe       	sbrs	r0, 0
 666:	fd cf       	rjmp	.-6      	; 0x662 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
 668:	80 e9       	ldi	r24, 0x90	; 144
 66a:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
 66e:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
 672:	10 92 24 01 	sts	0x0124, r1
	cdc_line_rtsdtr = 0;
 676:	10 92 22 01 	sts	0x0122, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 67a:	8c e0       	ldi	r24, 0x0C	; 12
 67c:	80 93 e2 00 	sts	0x00E2, r24
	sei();
 680:	78 94       	sei
 682:	08 95       	ret

00000684 <m_usb_isconnected>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
char m_usb_isconnected(void)
{
	return (char)usb_configuration;
 684:	80 91 24 01 	lds	r24, 0x0124
}
 688:	08 95       	ret

0000068a <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 68a:	1f 92       	push	r1
 68c:	0f 92       	push	r0
 68e:	0f b6       	in	r0, 0x3f	; 63
 690:	0f 92       	push	r0
 692:	11 24       	eor	r1, r1
 694:	8f 93       	push	r24
 696:	9f 93       	push	r25
 698:	ef 93       	push	r30
 69a:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
 69c:	e1 ee       	ldi	r30, 0xE1	; 225
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	80 81       	ld	r24, Z
        UDINT = 0;
 6a2:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
 6a4:	83 ff       	sbrs	r24, 3
 6a6:	11 c0       	rjmp	.+34     	; 0x6ca <__vector_10+0x40>
		UENUM = 0;
 6a8:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 6ac:	91 e0       	ldi	r25, 0x01	; 1
 6ae:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
 6b2:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 6b6:	92 e1       	ldi	r25, 0x12	; 18
 6b8:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
 6bc:	98 e0       	ldi	r25, 0x08	; 8
 6be:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
 6c2:	10 92 24 01 	sts	0x0124, r1
		cdc_line_rtsdtr = 0;
 6c6:	10 92 22 01 	sts	0x0122, r1
        }
	if (intbits & (1<<SOFI)) {
 6ca:	82 ff       	sbrs	r24, 2
 6cc:	13 c0       	rjmp	.+38     	; 0x6f4 <__vector_10+0x6a>
		if (usb_configuration) {
 6ce:	80 91 24 01 	lds	r24, 0x0124
 6d2:	88 23       	and	r24, r24
 6d4:	79 f0       	breq	.+30     	; 0x6f4 <__vector_10+0x6a>
			t = transmit_flush_timer;
 6d6:	80 91 23 01 	lds	r24, 0x0123
			if (t) {
 6da:	88 23       	and	r24, r24
 6dc:	59 f0       	breq	.+22     	; 0x6f4 <__vector_10+0x6a>
				transmit_flush_timer = --t;
 6de:	81 50       	subi	r24, 0x01	; 1
 6e0:	80 93 23 01 	sts	0x0123, r24
				if (!t) {
 6e4:	81 11       	cpse	r24, r1
 6e6:	06 c0       	rjmp	.+12     	; 0x6f4 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
 6e8:	84 e0       	ldi	r24, 0x04	; 4
 6ea:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
 6ee:	8a e3       	ldi	r24, 0x3A	; 58
 6f0:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 6f4:	ff 91       	pop	r31
 6f6:	ef 91       	pop	r30
 6f8:	9f 91       	pop	r25
 6fa:	8f 91       	pop	r24
 6fc:	0f 90       	pop	r0
 6fe:	0f be       	out	0x3f, r0	; 63
 700:	0f 90       	pop	r0
 702:	1f 90       	pop	r1
 704:	18 95       	reti

00000706 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 706:	1f 92       	push	r1
 708:	0f 92       	push	r0
 70a:	0f b6       	in	r0, 0x3f	; 63
 70c:	0f 92       	push	r0
 70e:	11 24       	eor	r1, r1
 710:	0f 93       	push	r16
 712:	1f 93       	push	r17
 714:	2f 93       	push	r18
 716:	3f 93       	push	r19
 718:	4f 93       	push	r20
 71a:	5f 93       	push	r21
 71c:	6f 93       	push	r22
 71e:	7f 93       	push	r23
 720:	8f 93       	push	r24
 722:	9f 93       	push	r25
 724:	af 93       	push	r26
 726:	bf 93       	push	r27
 728:	cf 93       	push	r28
 72a:	df 93       	push	r29
 72c:	ef 93       	push	r30
 72e:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 730:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 734:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 738:	83 ff       	sbrs	r24, 3
 73a:	4c c1       	rjmp	.+664    	; 0x9d4 <__vector_11+0x2ce>
                bmRequestType = UEDATX;
 73c:	e1 ef       	ldi	r30, 0xF1	; 241
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	60 81       	ld	r22, Z
                bRequest = UEDATX;
 742:	80 81       	ld	r24, Z
                wValue = UEDATX;
 744:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
 746:	90 81       	ld	r25, Z
 748:	30 e0       	ldi	r19, 0x00	; 0
 74a:	39 2b       	or	r19, r25
                wIndex = UEDATX;
 74c:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
 74e:	90 81       	ld	r25, Z
 750:	50 e0       	ldi	r21, 0x00	; 0
 752:	59 2b       	or	r21, r25
                wLength = UEDATX;
 754:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
 756:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 758:	92 ef       	ldi	r25, 0xF2	; 242
 75a:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
 75e:	86 30       	cpi	r24, 0x06	; 6
 760:	09 f0       	breq	.+2      	; 0x764 <__vector_11+0x5e>
 762:	58 c0       	rjmp	.+176    	; 0x814 <__vector_11+0x10e>
 764:	04 c0       	rjmp	.+8      	; 0x76e <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 766:	81 e2       	ldi	r24, 0x21	; 33
 768:	80 93 eb 00 	sts	0x00EB, r24
					return;
 76c:	3a c1       	rjmp	.+628    	; 0x9e2 <__vector_11+0x2dc>
 76e:	66 e0       	ldi	r22, 0x06	; 6
 770:	8c ea       	ldi	r24, 0xAC	; 172
 772:	90 e0       	ldi	r25, 0x00	; 0
				}
				desc_val = pgm_read_word(list);
 774:	fc 01       	movw	r30, r24
 776:	a5 91       	lpm	r26, Z+
 778:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
 77a:	2a 17       	cp	r18, r26
 77c:	3b 07       	cpc	r19, r27
 77e:	11 f0       	breq	.+4      	; 0x784 <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
 780:	07 96       	adiw	r24, 0x07	; 7
					continue;
 782:	23 c0       	rjmp	.+70     	; 0x7ca <__vector_11+0xc4>
				}
				list += 2;
 784:	fc 01       	movw	r30, r24
 786:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
 788:	a5 91       	lpm	r26, Z+
 78a:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
 78c:	4a 17       	cp	r20, r26
 78e:	5b 07       	cpc	r21, r27
 790:	11 f0       	breq	.+4      	; 0x796 <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
 792:	07 96       	adiw	r24, 0x07	; 7
					continue;
 794:	1a c0       	rjmp	.+52     	; 0x7ca <__vector_11+0xc4>
				}
				list += 2;
 796:	fc 01       	movw	r30, r24
 798:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 79a:	45 91       	lpm	r20, Z+
 79c:	54 91       	lpm	r21, Z
				list += 2;
 79e:	fc 01       	movw	r30, r24
 7a0:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 7a2:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
 7a4:	87 2f       	mov	r24, r23
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 7aa:	8f 3f       	cpi	r24, 0xFF	; 255
 7ac:	91 05       	cpc	r25, r1
 7ae:	19 f0       	breq	.+6      	; 0x7b6 <__vector_11+0xb0>
 7b0:	10 f0       	brcs	.+4      	; 0x7b6 <__vector_11+0xb0>
 7b2:	8f ef       	ldi	r24, 0xFF	; 255
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	82 17       	cp	r24, r18
 7b8:	08 f4       	brcc	.+2      	; 0x7bc <__vector_11+0xb6>
 7ba:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 7bc:	a8 ee       	ldi	r26, 0xE8	; 232
 7be:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 7c0:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 7c2:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
 7c4:	c1 ef       	ldi	r28, 0xF1	; 241
 7c6:	d0 e0       	ldi	r29, 0x00	; 0
 7c8:	03 c0       	rjmp	.+6      	; 0x7d0 <__vector_11+0xca>
 7ca:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 7cc:	99 f6       	brne	.-90     	; 0x774 <__vector_11+0x6e>
 7ce:	cb cf       	rjmp	.-106    	; 0x766 <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 7d0:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 7d2:	98 2f       	mov	r25, r24
 7d4:	95 70       	andi	r25, 0x05	; 5
 7d6:	e1 f3       	breq	.-8      	; 0x7d0 <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
 7d8:	82 fd       	sbrc	r24, 2
 7da:	03 c1       	rjmp	.+518    	; 0x9e2 <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 7dc:	32 2f       	mov	r19, r18
 7de:	21 31       	cpi	r18, 0x11	; 17
 7e0:	08 f0       	brcs	.+2      	; 0x7e4 <__vector_11+0xde>
 7e2:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
 7e4:	33 23       	and	r19, r19
 7e6:	09 f4       	brne	.+2      	; 0x7ea <__vector_11+0xe4>
 7e8:	f9 c0       	rjmp	.+498    	; 0x9dc <__vector_11+0x2d6>
 7ea:	fa 01       	movw	r30, r20
 7ec:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
 7ee:	94 91       	lpm	r25, Z
 7f0:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 7f2:	81 50       	subi	r24, 0x01	; 1
 7f4:	31 96       	adiw	r30, 0x01	; 1
 7f6:	81 11       	cpse	r24, r1
 7f8:	fa cf       	rjmp	.-12     	; 0x7ee <__vector_11+0xe8>
 7fa:	8f ef       	ldi	r24, 0xFF	; 255
 7fc:	83 0f       	add	r24, r19
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	01 96       	adiw	r24, 0x01	; 1
 802:	48 0f       	add	r20, r24
 804:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 806:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 808:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 80a:	21 11       	cpse	r18, r1
 80c:	e1 cf       	rjmp	.-62     	; 0x7d0 <__vector_11+0xca>
 80e:	30 31       	cpi	r19, 0x10	; 16
 810:	f9 f2       	breq	.-66     	; 0x7d0 <__vector_11+0xca>
 812:	e7 c0       	rjmp	.+462    	; 0x9e2 <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 814:	85 30       	cpi	r24, 0x05	; 5
 816:	61 f4       	brne	.+24     	; 0x830 <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 818:	8e ef       	ldi	r24, 0xFE	; 254
 81a:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 81e:	e8 ee       	ldi	r30, 0xE8	; 232
 820:	f0 e0       	ldi	r31, 0x00	; 0
 822:	80 81       	ld	r24, Z
 824:	80 ff       	sbrs	r24, 0
 826:	fd cf       	rjmp	.-6      	; 0x822 <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 828:	20 68       	ori	r18, 0x80	; 128
 82a:	20 93 e3 00 	sts	0x00E3, r18
			return;
 82e:	d9 c0       	rjmp	.+434    	; 0x9e2 <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 830:	89 30       	cpi	r24, 0x09	; 9
 832:	09 f0       	breq	.+2      	; 0x836 <__vector_11+0x130>
 834:	35 c0       	rjmp	.+106    	; 0x8a0 <__vector_11+0x19a>
 836:	61 11       	cpse	r22, r1
 838:	cd c0       	rjmp	.+410    	; 0x9d4 <__vector_11+0x2ce>
			usb_configuration = wValue;
 83a:	20 93 24 01 	sts	0x0124, r18
			cdc_line_rtsdtr = 0;
 83e:	10 92 22 01 	sts	0x0122, r1
			transmit_flush_timer = 0;
 842:	10 92 23 01 	sts	0x0123, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 846:	8e ef       	ldi	r24, 0xFE	; 254
 848:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 84c:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
 84e:	25 e5       	ldi	r18, 0x55	; 85
 850:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
 852:	c9 ee       	ldi	r28, 0xE9	; 233
 854:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
 856:	ab ee       	ldi	r26, 0xEB	; 235
 858:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
 85a:	0c ee       	ldi	r16, 0xEC	; 236
 85c:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
 85e:	6d ee       	ldi	r22, 0xED	; 237
 860:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 862:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
 864:	a9 01       	movw	r20, r18
 866:	4f 5f       	subi	r20, 0xFF	; 255
 868:	5f 4f       	sbci	r21, 0xFF	; 255
 86a:	f9 01       	movw	r30, r18
 86c:	94 91       	lpm	r25, Z
				UECONX = en;
 86e:	9c 93       	st	X, r25
				if (en) {
 870:	99 23       	and	r25, r25
 872:	61 f0       	breq	.+24     	; 0x88c <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
 874:	fa 01       	movw	r30, r20
 876:	44 91       	lpm	r20, Z
 878:	f8 01       	movw	r30, r16
 87a:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
 87c:	f9 01       	movw	r30, r18
 87e:	32 96       	adiw	r30, 0x02	; 2
 880:	94 91       	lpm	r25, Z
 882:	2d 5f       	subi	r18, 0xFD	; 253
 884:	3f 4f       	sbci	r19, 0xFF	; 255
 886:	fb 01       	movw	r30, r22
 888:	90 83       	st	Z, r25
 88a:	01 c0       	rjmp	.+2      	; 0x88e <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
 88c:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 88e:	8f 5f       	subi	r24, 0xFF	; 255
 890:	85 30       	cpi	r24, 0x05	; 5
 892:	39 f7       	brne	.-50     	; 0x862 <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 894:	ea ee       	ldi	r30, 0xEA	; 234
 896:	f0 e0       	ldi	r31, 0x00	; 0
 898:	8e e1       	ldi	r24, 0x1E	; 30
 89a:	80 83       	st	Z, r24
        		UERST = 0;
 89c:	10 82       	st	Z, r1
			return;
 89e:	a1 c0       	rjmp	.+322    	; 0x9e2 <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 8a0:	88 30       	cpi	r24, 0x08	; 8
 8a2:	81 f4       	brne	.+32     	; 0x8c4 <__vector_11+0x1be>
 8a4:	60 38       	cpi	r22, 0x80	; 128
 8a6:	09 f0       	breq	.+2      	; 0x8aa <__vector_11+0x1a4>
 8a8:	95 c0       	rjmp	.+298    	; 0x9d4 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 8aa:	e8 ee       	ldi	r30, 0xE8	; 232
 8ac:	f0 e0       	ldi	r31, 0x00	; 0
 8ae:	80 81       	ld	r24, Z
 8b0:	80 ff       	sbrs	r24, 0
 8b2:	fd cf       	rjmp	.-6      	; 0x8ae <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 8b4:	80 91 24 01 	lds	r24, 0x0124
 8b8:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 8bc:	8e ef       	ldi	r24, 0xFE	; 254
 8be:	80 93 e8 00 	sts	0x00E8, r24
 8c2:	8f c0       	rjmp	.+286    	; 0x9e2 <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 8c4:	81 32       	cpi	r24, 0x21	; 33
 8c6:	b9 f4       	brne	.+46     	; 0x8f6 <__vector_11+0x1f0>
 8c8:	61 3a       	cpi	r22, 0xA1	; 161
 8ca:	09 f0       	breq	.+2      	; 0x8ce <__vector_11+0x1c8>
 8cc:	83 c0       	rjmp	.+262    	; 0x9d4 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 8ce:	e8 ee       	ldi	r30, 0xE8	; 232
 8d0:	f0 e0       	ldi	r31, 0x00	; 0
 8d2:	80 81       	ld	r24, Z
 8d4:	80 ff       	sbrs	r24, 0
 8d6:	fd cf       	rjmp	.-6      	; 0x8d2 <__vector_11+0x1cc>
 8d8:	e2 e0       	ldi	r30, 0x02	; 2
 8da:	f1 e0       	ldi	r31, 0x01	; 1
 8dc:	29 e0       	ldi	r18, 0x09	; 9
 8de:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 8e0:	a1 ef       	ldi	r26, 0xF1	; 241
 8e2:	b0 e0       	ldi	r27, 0x00	; 0
 8e4:	81 91       	ld	r24, Z+
 8e6:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 8e8:	e2 17       	cp	r30, r18
 8ea:	f3 07       	cpc	r31, r19
 8ec:	d9 f7       	brne	.-10     	; 0x8e4 <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 8ee:	8e ef       	ldi	r24, 0xFE	; 254
 8f0:	80 93 e8 00 	sts	0x00E8, r24
 8f4:	76 c0       	rjmp	.+236    	; 0x9e2 <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 8f6:	80 32       	cpi	r24, 0x20	; 32
 8f8:	d1 f4       	brne	.+52     	; 0x92e <__vector_11+0x228>
 8fa:	61 32       	cpi	r22, 0x21	; 33
 8fc:	09 f0       	breq	.+2      	; 0x900 <__vector_11+0x1fa>
 8fe:	6a c0       	rjmp	.+212    	; 0x9d4 <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 900:	e8 ee       	ldi	r30, 0xE8	; 232
 902:	f0 e0       	ldi	r31, 0x00	; 0
 904:	80 81       	ld	r24, Z
 906:	82 ff       	sbrs	r24, 2
 908:	fd cf       	rjmp	.-6      	; 0x904 <__vector_11+0x1fe>
 90a:	e2 e0       	ldi	r30, 0x02	; 2
 90c:	f1 e0       	ldi	r31, 0x01	; 1
 90e:	29 e0       	ldi	r18, 0x09	; 9
 910:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 912:	a1 ef       	ldi	r26, 0xF1	; 241
 914:	b0 e0       	ldi	r27, 0x00	; 0
 916:	8c 91       	ld	r24, X
 918:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 91a:	e2 17       	cp	r30, r18
 91c:	f3 07       	cpc	r31, r19
 91e:	d9 f7       	brne	.-10     	; 0x916 <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 920:	e8 ee       	ldi	r30, 0xE8	; 232
 922:	f0 e0       	ldi	r31, 0x00	; 0
 924:	8b ef       	ldi	r24, 0xFB	; 251
 926:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 928:	8e ef       	ldi	r24, 0xFE	; 254
 92a:	80 83       	st	Z, r24
 92c:	5a c0       	rjmp	.+180    	; 0x9e2 <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 92e:	82 32       	cpi	r24, 0x22	; 34
 930:	71 f4       	brne	.+28     	; 0x94e <__vector_11+0x248>
 932:	61 32       	cpi	r22, 0x21	; 33
 934:	09 f0       	breq	.+2      	; 0x938 <__vector_11+0x232>
 936:	4e c0       	rjmp	.+156    	; 0x9d4 <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
 938:	20 93 22 01 	sts	0x0122, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 93c:	e8 ee       	ldi	r30, 0xE8	; 232
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	80 81       	ld	r24, Z
 942:	80 ff       	sbrs	r24, 0
 944:	fd cf       	rjmp	.-6      	; 0x940 <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 946:	8e ef       	ldi	r24, 0xFE	; 254
 948:	80 93 e8 00 	sts	0x00E8, r24
 94c:	4a c0       	rjmp	.+148    	; 0x9e2 <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 94e:	81 11       	cpse	r24, r1
 950:	1a c0       	rjmp	.+52     	; 0x986 <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 952:	e8 ee       	ldi	r30, 0xE8	; 232
 954:	f0 e0       	ldi	r31, 0x00	; 0
 956:	80 81       	ld	r24, Z
 958:	80 ff       	sbrs	r24, 0
 95a:	fd cf       	rjmp	.-6      	; 0x956 <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 95c:	62 38       	cpi	r22, 0x82	; 130
 95e:	51 f4       	brne	.+20     	; 0x974 <__vector_11+0x26e>
				UENUM = wIndex;
 960:	e9 ee       	ldi	r30, 0xE9	; 233
 962:	f0 e0       	ldi	r31, 0x00	; 0
 964:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
 966:	80 91 eb 00 	lds	r24, 0x00EB
 96a:	85 fb       	bst	r24, 5
 96c:	88 27       	eor	r24, r24
 96e:	80 f9       	bld	r24, 0
				UENUM = 0;
 970:	10 82       	st	Z, r1
 972:	01 c0       	rjmp	.+2      	; 0x976 <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 974:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 976:	e1 ef       	ldi	r30, 0xF1	; 241
 978:	f0 e0       	ldi	r31, 0x00	; 0
 97a:	80 83       	st	Z, r24
			UEDATX = 0;
 97c:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 97e:	8e ef       	ldi	r24, 0xFE	; 254
 980:	80 93 e8 00 	sts	0x00E8, r24
 984:	2e c0       	rjmp	.+92     	; 0x9e2 <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 986:	98 2f       	mov	r25, r24
 988:	9d 7f       	andi	r25, 0xFD	; 253
 98a:	91 30       	cpi	r25, 0x01	; 1
 98c:	19 f5       	brne	.+70     	; 0x9d4 <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
 98e:	62 30       	cpi	r22, 0x02	; 2
 990:	09 f5       	brne	.+66     	; 0x9d4 <__vector_11+0x2ce>
 992:	23 2b       	or	r18, r19
 994:	f9 f4       	brne	.+62     	; 0x9d4 <__vector_11+0x2ce>
			i = wIndex & 0x7F;
 996:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 998:	9f ef       	ldi	r25, 0xFF	; 255
 99a:	94 0f       	add	r25, r20
 99c:	94 30       	cpi	r25, 0x04	; 4
 99e:	d0 f4       	brcc	.+52     	; 0x9d4 <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 9a0:	9e ef       	ldi	r25, 0xFE	; 254
 9a2:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 9a6:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
 9aa:	83 30       	cpi	r24, 0x03	; 3
 9ac:	21 f4       	brne	.+8      	; 0x9b6 <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
 9ae:	81 e2       	ldi	r24, 0x21	; 33
 9b0:	80 93 eb 00 	sts	0x00EB, r24
 9b4:	16 c0       	rjmp	.+44     	; 0x9e2 <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 9b6:	89 e1       	ldi	r24, 0x19	; 25
 9b8:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 9bc:	81 e0       	ldi	r24, 0x01	; 1
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <__vector_11+0x2c0>
 9c2:	88 0f       	add	r24, r24
 9c4:	99 1f       	adc	r25, r25
 9c6:	4a 95       	dec	r20
 9c8:	e2 f7       	brpl	.-8      	; 0x9c2 <__vector_11+0x2bc>
 9ca:	ea ee       	ldi	r30, 0xEA	; 234
 9cc:	f0 e0       	ldi	r31, 0x00	; 0
 9ce:	80 83       	st	Z, r24
					UERST = 0;
 9d0:	10 82       	st	Z, r1
 9d2:	07 c0       	rjmp	.+14     	; 0x9e2 <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 9d4:	81 e2       	ldi	r24, 0x21	; 33
 9d6:	80 93 eb 00 	sts	0x00EB, r24
 9da:	03 c0       	rjmp	.+6      	; 0x9e2 <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 9dc:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 9de:	21 11       	cpse	r18, r1
 9e0:	f7 ce       	rjmp	.-530    	; 0x7d0 <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 9e2:	ff 91       	pop	r31
 9e4:	ef 91       	pop	r30
 9e6:	df 91       	pop	r29
 9e8:	cf 91       	pop	r28
 9ea:	bf 91       	pop	r27
 9ec:	af 91       	pop	r26
 9ee:	9f 91       	pop	r25
 9f0:	8f 91       	pop	r24
 9f2:	7f 91       	pop	r23
 9f4:	6f 91       	pop	r22
 9f6:	5f 91       	pop	r21
 9f8:	4f 91       	pop	r20
 9fa:	3f 91       	pop	r19
 9fc:	2f 91       	pop	r18
 9fe:	1f 91       	pop	r17
 a00:	0f 91       	pop	r16
 a02:	0f 90       	pop	r0
 a04:	0f be       	out	0x3f, r0	; 63
 a06:	0f 90       	pop	r0
 a08:	1f 90       	pop	r1
 a0a:	18 95       	reti

00000a0c <__subsf3>:
 a0c:	50 58       	subi	r21, 0x80	; 128

00000a0e <__addsf3>:
 a0e:	bb 27       	eor	r27, r27
 a10:	aa 27       	eor	r26, r26
 a12:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__addsf3x>
 a16:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <__fp_round>
 a1a:	0e 94 ef 05 	call	0xbde	; 0xbde <__fp_pscA>
 a1e:	38 f0       	brcs	.+14     	; 0xa2e <__addsf3+0x20>
 a20:	0e 94 f6 05 	call	0xbec	; 0xbec <__fp_pscB>
 a24:	20 f0       	brcs	.+8      	; 0xa2e <__addsf3+0x20>
 a26:	39 f4       	brne	.+14     	; 0xa36 <__addsf3+0x28>
 a28:	9f 3f       	cpi	r25, 0xFF	; 255
 a2a:	19 f4       	brne	.+6      	; 0xa32 <__addsf3+0x24>
 a2c:	26 f4       	brtc	.+8      	; 0xa36 <__addsf3+0x28>
 a2e:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__fp_nan>
 a32:	0e f4       	brtc	.+2      	; 0xa36 <__addsf3+0x28>
 a34:	e0 95       	com	r30
 a36:	e7 fb       	bst	r30, 7
 a38:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__fp_inf>

00000a3c <__addsf3x>:
 a3c:	e9 2f       	mov	r30, r25
 a3e:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fp_split3>
 a42:	58 f3       	brcs	.-42     	; 0xa1a <__addsf3+0xc>
 a44:	ba 17       	cp	r27, r26
 a46:	62 07       	cpc	r22, r18
 a48:	73 07       	cpc	r23, r19
 a4a:	84 07       	cpc	r24, r20
 a4c:	95 07       	cpc	r25, r21
 a4e:	20 f0       	brcs	.+8      	; 0xa58 <__addsf3x+0x1c>
 a50:	79 f4       	brne	.+30     	; 0xa70 <__addsf3x+0x34>
 a52:	a6 f5       	brtc	.+104    	; 0xabc <__addsf3x+0x80>
 a54:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__fp_zero>
 a58:	0e f4       	brtc	.+2      	; 0xa5c <__addsf3x+0x20>
 a5a:	e0 95       	com	r30
 a5c:	0b 2e       	mov	r0, r27
 a5e:	ba 2f       	mov	r27, r26
 a60:	a0 2d       	mov	r26, r0
 a62:	0b 01       	movw	r0, r22
 a64:	b9 01       	movw	r22, r18
 a66:	90 01       	movw	r18, r0
 a68:	0c 01       	movw	r0, r24
 a6a:	ca 01       	movw	r24, r20
 a6c:	a0 01       	movw	r20, r0
 a6e:	11 24       	eor	r1, r1
 a70:	ff 27       	eor	r31, r31
 a72:	59 1b       	sub	r21, r25
 a74:	99 f0       	breq	.+38     	; 0xa9c <__addsf3x+0x60>
 a76:	59 3f       	cpi	r21, 0xF9	; 249
 a78:	50 f4       	brcc	.+20     	; 0xa8e <__addsf3x+0x52>
 a7a:	50 3e       	cpi	r21, 0xE0	; 224
 a7c:	68 f1       	brcs	.+90     	; 0xad8 <__addsf3x+0x9c>
 a7e:	1a 16       	cp	r1, r26
 a80:	f0 40       	sbci	r31, 0x00	; 0
 a82:	a2 2f       	mov	r26, r18
 a84:	23 2f       	mov	r18, r19
 a86:	34 2f       	mov	r19, r20
 a88:	44 27       	eor	r20, r20
 a8a:	58 5f       	subi	r21, 0xF8	; 248
 a8c:	f3 cf       	rjmp	.-26     	; 0xa74 <__addsf3x+0x38>
 a8e:	46 95       	lsr	r20
 a90:	37 95       	ror	r19
 a92:	27 95       	ror	r18
 a94:	a7 95       	ror	r26
 a96:	f0 40       	sbci	r31, 0x00	; 0
 a98:	53 95       	inc	r21
 a9a:	c9 f7       	brne	.-14     	; 0xa8e <__addsf3x+0x52>
 a9c:	7e f4       	brtc	.+30     	; 0xabc <__addsf3x+0x80>
 a9e:	1f 16       	cp	r1, r31
 aa0:	ba 0b       	sbc	r27, r26
 aa2:	62 0b       	sbc	r22, r18
 aa4:	73 0b       	sbc	r23, r19
 aa6:	84 0b       	sbc	r24, r20
 aa8:	ba f0       	brmi	.+46     	; 0xad8 <__addsf3x+0x9c>
 aaa:	91 50       	subi	r25, 0x01	; 1
 aac:	a1 f0       	breq	.+40     	; 0xad6 <__addsf3x+0x9a>
 aae:	ff 0f       	add	r31, r31
 ab0:	bb 1f       	adc	r27, r27
 ab2:	66 1f       	adc	r22, r22
 ab4:	77 1f       	adc	r23, r23
 ab6:	88 1f       	adc	r24, r24
 ab8:	c2 f7       	brpl	.-16     	; 0xaaa <__addsf3x+0x6e>
 aba:	0e c0       	rjmp	.+28     	; 0xad8 <__addsf3x+0x9c>
 abc:	ba 0f       	add	r27, r26
 abe:	62 1f       	adc	r22, r18
 ac0:	73 1f       	adc	r23, r19
 ac2:	84 1f       	adc	r24, r20
 ac4:	48 f4       	brcc	.+18     	; 0xad8 <__addsf3x+0x9c>
 ac6:	87 95       	ror	r24
 ac8:	77 95       	ror	r23
 aca:	67 95       	ror	r22
 acc:	b7 95       	ror	r27
 ace:	f7 95       	ror	r31
 ad0:	9e 3f       	cpi	r25, 0xFE	; 254
 ad2:	08 f0       	brcs	.+2      	; 0xad6 <__addsf3x+0x9a>
 ad4:	b0 cf       	rjmp	.-160    	; 0xa36 <__addsf3+0x28>
 ad6:	93 95       	inc	r25
 ad8:	88 0f       	add	r24, r24
 ada:	08 f0       	brcs	.+2      	; 0xade <__addsf3x+0xa2>
 adc:	99 27       	eor	r25, r25
 ade:	ee 0f       	add	r30, r30
 ae0:	97 95       	ror	r25
 ae2:	87 95       	ror	r24
 ae4:	08 95       	ret

00000ae6 <__fixsfsi>:
 ae6:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fixunssfsi>
 aea:	68 94       	set
 aec:	b1 11       	cpse	r27, r1
 aee:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__fp_szero>
 af2:	08 95       	ret

00000af4 <__fixunssfsi>:
 af4:	0e 94 16 06 	call	0xc2c	; 0xc2c <__fp_splitA>
 af8:	88 f0       	brcs	.+34     	; 0xb1c <__stack+0x1d>
 afa:	9f 57       	subi	r25, 0x7F	; 127
 afc:	98 f0       	brcs	.+38     	; 0xb24 <__stack+0x25>
 afe:	b9 2f       	mov	r27, r25
 b00:	99 27       	eor	r25, r25
 b02:	b7 51       	subi	r27, 0x17	; 23
 b04:	b0 f0       	brcs	.+44     	; 0xb32 <__stack+0x33>
 b06:	e1 f0       	breq	.+56     	; 0xb40 <__stack+0x41>
 b08:	66 0f       	add	r22, r22
 b0a:	77 1f       	adc	r23, r23
 b0c:	88 1f       	adc	r24, r24
 b0e:	99 1f       	adc	r25, r25
 b10:	1a f0       	brmi	.+6      	; 0xb18 <__stack+0x19>
 b12:	ba 95       	dec	r27
 b14:	c9 f7       	brne	.-14     	; 0xb08 <__stack+0x9>
 b16:	14 c0       	rjmp	.+40     	; 0xb40 <__stack+0x41>
 b18:	b1 30       	cpi	r27, 0x01	; 1
 b1a:	91 f0       	breq	.+36     	; 0xb40 <__stack+0x41>
 b1c:	0e 94 30 06 	call	0xc60	; 0xc60 <__fp_zero>
 b20:	b1 e0       	ldi	r27, 0x01	; 1
 b22:	08 95       	ret
 b24:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__fp_zero>
 b28:	67 2f       	mov	r22, r23
 b2a:	78 2f       	mov	r23, r24
 b2c:	88 27       	eor	r24, r24
 b2e:	b8 5f       	subi	r27, 0xF8	; 248
 b30:	39 f0       	breq	.+14     	; 0xb40 <__stack+0x41>
 b32:	b9 3f       	cpi	r27, 0xF9	; 249
 b34:	cc f3       	brlt	.-14     	; 0xb28 <__stack+0x29>
 b36:	86 95       	lsr	r24
 b38:	77 95       	ror	r23
 b3a:	67 95       	ror	r22
 b3c:	b3 95       	inc	r27
 b3e:	d9 f7       	brne	.-10     	; 0xb36 <__stack+0x37>
 b40:	3e f4       	brtc	.+14     	; 0xb50 <__stack+0x51>
 b42:	90 95       	com	r25
 b44:	80 95       	com	r24
 b46:	70 95       	com	r23
 b48:	61 95       	neg	r22
 b4a:	7f 4f       	sbci	r23, 0xFF	; 255
 b4c:	8f 4f       	sbci	r24, 0xFF	; 255
 b4e:	9f 4f       	sbci	r25, 0xFF	; 255
 b50:	08 95       	ret

00000b52 <__floatunsisf>:
 b52:	e8 94       	clt
 b54:	09 c0       	rjmp	.+18     	; 0xb68 <__floatsisf+0x12>

00000b56 <__floatsisf>:
 b56:	97 fb       	bst	r25, 7
 b58:	3e f4       	brtc	.+14     	; 0xb68 <__floatsisf+0x12>
 b5a:	90 95       	com	r25
 b5c:	80 95       	com	r24
 b5e:	70 95       	com	r23
 b60:	61 95       	neg	r22
 b62:	7f 4f       	sbci	r23, 0xFF	; 255
 b64:	8f 4f       	sbci	r24, 0xFF	; 255
 b66:	9f 4f       	sbci	r25, 0xFF	; 255
 b68:	99 23       	and	r25, r25
 b6a:	a9 f0       	breq	.+42     	; 0xb96 <__floatsisf+0x40>
 b6c:	f9 2f       	mov	r31, r25
 b6e:	96 e9       	ldi	r25, 0x96	; 150
 b70:	bb 27       	eor	r27, r27
 b72:	93 95       	inc	r25
 b74:	f6 95       	lsr	r31
 b76:	87 95       	ror	r24
 b78:	77 95       	ror	r23
 b7a:	67 95       	ror	r22
 b7c:	b7 95       	ror	r27
 b7e:	f1 11       	cpse	r31, r1
 b80:	f8 cf       	rjmp	.-16     	; 0xb72 <__floatsisf+0x1c>
 b82:	fa f4       	brpl	.+62     	; 0xbc2 <__floatsisf+0x6c>
 b84:	bb 0f       	add	r27, r27
 b86:	11 f4       	brne	.+4      	; 0xb8c <__floatsisf+0x36>
 b88:	60 ff       	sbrs	r22, 0
 b8a:	1b c0       	rjmp	.+54     	; 0xbc2 <__floatsisf+0x6c>
 b8c:	6f 5f       	subi	r22, 0xFF	; 255
 b8e:	7f 4f       	sbci	r23, 0xFF	; 255
 b90:	8f 4f       	sbci	r24, 0xFF	; 255
 b92:	9f 4f       	sbci	r25, 0xFF	; 255
 b94:	16 c0       	rjmp	.+44     	; 0xbc2 <__floatsisf+0x6c>
 b96:	88 23       	and	r24, r24
 b98:	11 f0       	breq	.+4      	; 0xb9e <__floatsisf+0x48>
 b9a:	96 e9       	ldi	r25, 0x96	; 150
 b9c:	11 c0       	rjmp	.+34     	; 0xbc0 <__floatsisf+0x6a>
 b9e:	77 23       	and	r23, r23
 ba0:	21 f0       	breq	.+8      	; 0xbaa <__floatsisf+0x54>
 ba2:	9e e8       	ldi	r25, 0x8E	; 142
 ba4:	87 2f       	mov	r24, r23
 ba6:	76 2f       	mov	r23, r22
 ba8:	05 c0       	rjmp	.+10     	; 0xbb4 <__floatsisf+0x5e>
 baa:	66 23       	and	r22, r22
 bac:	71 f0       	breq	.+28     	; 0xbca <__floatsisf+0x74>
 bae:	96 e8       	ldi	r25, 0x86	; 134
 bb0:	86 2f       	mov	r24, r22
 bb2:	70 e0       	ldi	r23, 0x00	; 0
 bb4:	60 e0       	ldi	r22, 0x00	; 0
 bb6:	2a f0       	brmi	.+10     	; 0xbc2 <__floatsisf+0x6c>
 bb8:	9a 95       	dec	r25
 bba:	66 0f       	add	r22, r22
 bbc:	77 1f       	adc	r23, r23
 bbe:	88 1f       	adc	r24, r24
 bc0:	da f7       	brpl	.-10     	; 0xbb8 <__floatsisf+0x62>
 bc2:	88 0f       	add	r24, r24
 bc4:	96 95       	lsr	r25
 bc6:	87 95       	ror	r24
 bc8:	97 f9       	bld	r25, 7
 bca:	08 95       	ret

00000bcc <__fp_inf>:
 bcc:	97 f9       	bld	r25, 7
 bce:	9f 67       	ori	r25, 0x7F	; 127
 bd0:	80 e8       	ldi	r24, 0x80	; 128
 bd2:	70 e0       	ldi	r23, 0x00	; 0
 bd4:	60 e0       	ldi	r22, 0x00	; 0
 bd6:	08 95       	ret

00000bd8 <__fp_nan>:
 bd8:	9f ef       	ldi	r25, 0xFF	; 255
 bda:	80 ec       	ldi	r24, 0xC0	; 192
 bdc:	08 95       	ret

00000bde <__fp_pscA>:
 bde:	00 24       	eor	r0, r0
 be0:	0a 94       	dec	r0
 be2:	16 16       	cp	r1, r22
 be4:	17 06       	cpc	r1, r23
 be6:	18 06       	cpc	r1, r24
 be8:	09 06       	cpc	r0, r25
 bea:	08 95       	ret

00000bec <__fp_pscB>:
 bec:	00 24       	eor	r0, r0
 bee:	0a 94       	dec	r0
 bf0:	12 16       	cp	r1, r18
 bf2:	13 06       	cpc	r1, r19
 bf4:	14 06       	cpc	r1, r20
 bf6:	05 06       	cpc	r0, r21
 bf8:	08 95       	ret

00000bfa <__fp_round>:
 bfa:	09 2e       	mov	r0, r25
 bfc:	03 94       	inc	r0
 bfe:	00 0c       	add	r0, r0
 c00:	11 f4       	brne	.+4      	; 0xc06 <__fp_round+0xc>
 c02:	88 23       	and	r24, r24
 c04:	52 f0       	brmi	.+20     	; 0xc1a <__fp_round+0x20>
 c06:	bb 0f       	add	r27, r27
 c08:	40 f4       	brcc	.+16     	; 0xc1a <__fp_round+0x20>
 c0a:	bf 2b       	or	r27, r31
 c0c:	11 f4       	brne	.+4      	; 0xc12 <__fp_round+0x18>
 c0e:	60 ff       	sbrs	r22, 0
 c10:	04 c0       	rjmp	.+8      	; 0xc1a <__fp_round+0x20>
 c12:	6f 5f       	subi	r22, 0xFF	; 255
 c14:	7f 4f       	sbci	r23, 0xFF	; 255
 c16:	8f 4f       	sbci	r24, 0xFF	; 255
 c18:	9f 4f       	sbci	r25, 0xFF	; 255
 c1a:	08 95       	ret

00000c1c <__fp_split3>:
 c1c:	57 fd       	sbrc	r21, 7
 c1e:	90 58       	subi	r25, 0x80	; 128
 c20:	44 0f       	add	r20, r20
 c22:	55 1f       	adc	r21, r21
 c24:	59 f0       	breq	.+22     	; 0xc3c <__fp_splitA+0x10>
 c26:	5f 3f       	cpi	r21, 0xFF	; 255
 c28:	71 f0       	breq	.+28     	; 0xc46 <__fp_splitA+0x1a>
 c2a:	47 95       	ror	r20

00000c2c <__fp_splitA>:
 c2c:	88 0f       	add	r24, r24
 c2e:	97 fb       	bst	r25, 7
 c30:	99 1f       	adc	r25, r25
 c32:	61 f0       	breq	.+24     	; 0xc4c <__fp_splitA+0x20>
 c34:	9f 3f       	cpi	r25, 0xFF	; 255
 c36:	79 f0       	breq	.+30     	; 0xc56 <__fp_splitA+0x2a>
 c38:	87 95       	ror	r24
 c3a:	08 95       	ret
 c3c:	12 16       	cp	r1, r18
 c3e:	13 06       	cpc	r1, r19
 c40:	14 06       	cpc	r1, r20
 c42:	55 1f       	adc	r21, r21
 c44:	f2 cf       	rjmp	.-28     	; 0xc2a <__fp_split3+0xe>
 c46:	46 95       	lsr	r20
 c48:	f1 df       	rcall	.-30     	; 0xc2c <__fp_splitA>
 c4a:	08 c0       	rjmp	.+16     	; 0xc5c <__fp_splitA+0x30>
 c4c:	16 16       	cp	r1, r22
 c4e:	17 06       	cpc	r1, r23
 c50:	18 06       	cpc	r1, r24
 c52:	99 1f       	adc	r25, r25
 c54:	f1 cf       	rjmp	.-30     	; 0xc38 <__fp_splitA+0xc>
 c56:	86 95       	lsr	r24
 c58:	71 05       	cpc	r23, r1
 c5a:	61 05       	cpc	r22, r1
 c5c:	08 94       	sec
 c5e:	08 95       	ret

00000c60 <__fp_zero>:
 c60:	e8 94       	clt

00000c62 <__fp_szero>:
 c62:	bb 27       	eor	r27, r27
 c64:	66 27       	eor	r22, r22
 c66:	77 27       	eor	r23, r23
 c68:	cb 01       	movw	r24, r22
 c6a:	97 f9       	bld	r25, 7
 c6c:	08 95       	ret

00000c6e <__mulsf3>:
 c6e:	0e 94 4a 06 	call	0xc94	; 0xc94 <__mulsf3x>
 c72:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <__fp_round>
 c76:	0e 94 ef 05 	call	0xbde	; 0xbde <__fp_pscA>
 c7a:	38 f0       	brcs	.+14     	; 0xc8a <__mulsf3+0x1c>
 c7c:	0e 94 f6 05 	call	0xbec	; 0xbec <__fp_pscB>
 c80:	20 f0       	brcs	.+8      	; 0xc8a <__mulsf3+0x1c>
 c82:	95 23       	and	r25, r21
 c84:	11 f0       	breq	.+4      	; 0xc8a <__mulsf3+0x1c>
 c86:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__fp_inf>
 c8a:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__fp_nan>
 c8e:	11 24       	eor	r1, r1
 c90:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__fp_szero>

00000c94 <__mulsf3x>:
 c94:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fp_split3>
 c98:	70 f3       	brcs	.-36     	; 0xc76 <__mulsf3+0x8>

00000c9a <__mulsf3_pse>:
 c9a:	95 9f       	mul	r25, r21
 c9c:	c1 f3       	breq	.-16     	; 0xc8e <__mulsf3+0x20>
 c9e:	95 0f       	add	r25, r21
 ca0:	50 e0       	ldi	r21, 0x00	; 0
 ca2:	55 1f       	adc	r21, r21
 ca4:	62 9f       	mul	r22, r18
 ca6:	f0 01       	movw	r30, r0
 ca8:	72 9f       	mul	r23, r18
 caa:	bb 27       	eor	r27, r27
 cac:	f0 0d       	add	r31, r0
 cae:	b1 1d       	adc	r27, r1
 cb0:	63 9f       	mul	r22, r19
 cb2:	aa 27       	eor	r26, r26
 cb4:	f0 0d       	add	r31, r0
 cb6:	b1 1d       	adc	r27, r1
 cb8:	aa 1f       	adc	r26, r26
 cba:	64 9f       	mul	r22, r20
 cbc:	66 27       	eor	r22, r22
 cbe:	b0 0d       	add	r27, r0
 cc0:	a1 1d       	adc	r26, r1
 cc2:	66 1f       	adc	r22, r22
 cc4:	82 9f       	mul	r24, r18
 cc6:	22 27       	eor	r18, r18
 cc8:	b0 0d       	add	r27, r0
 cca:	a1 1d       	adc	r26, r1
 ccc:	62 1f       	adc	r22, r18
 cce:	73 9f       	mul	r23, r19
 cd0:	b0 0d       	add	r27, r0
 cd2:	a1 1d       	adc	r26, r1
 cd4:	62 1f       	adc	r22, r18
 cd6:	83 9f       	mul	r24, r19
 cd8:	a0 0d       	add	r26, r0
 cda:	61 1d       	adc	r22, r1
 cdc:	22 1f       	adc	r18, r18
 cde:	74 9f       	mul	r23, r20
 ce0:	33 27       	eor	r19, r19
 ce2:	a0 0d       	add	r26, r0
 ce4:	61 1d       	adc	r22, r1
 ce6:	23 1f       	adc	r18, r19
 ce8:	84 9f       	mul	r24, r20
 cea:	60 0d       	add	r22, r0
 cec:	21 1d       	adc	r18, r1
 cee:	82 2f       	mov	r24, r18
 cf0:	76 2f       	mov	r23, r22
 cf2:	6a 2f       	mov	r22, r26
 cf4:	11 24       	eor	r1, r1
 cf6:	9f 57       	subi	r25, 0x7F	; 127
 cf8:	50 40       	sbci	r21, 0x00	; 0
 cfa:	9a f0       	brmi	.+38     	; 0xd22 <__mulsf3_pse+0x88>
 cfc:	f1 f0       	breq	.+60     	; 0xd3a <__mulsf3_pse+0xa0>
 cfe:	88 23       	and	r24, r24
 d00:	4a f0       	brmi	.+18     	; 0xd14 <__mulsf3_pse+0x7a>
 d02:	ee 0f       	add	r30, r30
 d04:	ff 1f       	adc	r31, r31
 d06:	bb 1f       	adc	r27, r27
 d08:	66 1f       	adc	r22, r22
 d0a:	77 1f       	adc	r23, r23
 d0c:	88 1f       	adc	r24, r24
 d0e:	91 50       	subi	r25, 0x01	; 1
 d10:	50 40       	sbci	r21, 0x00	; 0
 d12:	a9 f7       	brne	.-22     	; 0xcfe <__mulsf3_pse+0x64>
 d14:	9e 3f       	cpi	r25, 0xFE	; 254
 d16:	51 05       	cpc	r21, r1
 d18:	80 f0       	brcs	.+32     	; 0xd3a <__mulsf3_pse+0xa0>
 d1a:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__fp_inf>
 d1e:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__fp_szero>
 d22:	5f 3f       	cpi	r21, 0xFF	; 255
 d24:	e4 f3       	brlt	.-8      	; 0xd1e <__mulsf3_pse+0x84>
 d26:	98 3e       	cpi	r25, 0xE8	; 232
 d28:	d4 f3       	brlt	.-12     	; 0xd1e <__mulsf3_pse+0x84>
 d2a:	86 95       	lsr	r24
 d2c:	77 95       	ror	r23
 d2e:	67 95       	ror	r22
 d30:	b7 95       	ror	r27
 d32:	f7 95       	ror	r31
 d34:	e7 95       	ror	r30
 d36:	9f 5f       	subi	r25, 0xFF	; 255
 d38:	c1 f7       	brne	.-16     	; 0xd2a <__mulsf3_pse+0x90>
 d3a:	fe 2b       	or	r31, r30
 d3c:	88 0f       	add	r24, r24
 d3e:	91 1d       	adc	r25, r1
 d40:	96 95       	lsr	r25
 d42:	87 95       	ror	r24
 d44:	97 f9       	bld	r25, 7
 d46:	08 95       	ret

00000d48 <_exit>:
 d48:	f8 94       	cli

00000d4a <__stop_program>:
 d4a:	ff cf       	rjmp	.-2      	; 0xd4a <__stop_program>
