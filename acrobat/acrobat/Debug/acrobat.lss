
acrobat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000016ac  00001740  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  0080010e  0080010e  0000174e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000174e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001780  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000213b  00000000  00000000  000019f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000846  00000000  00000000  00003b33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ca6  00000000  00000000  00004379  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007c4  00000000  00000000  00005020  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000081d  00000000  00000000  000057e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000297b  00000000  00000000  00006001  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  0000897c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       c:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__vector_3>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 7a 06 	jmp	0xcf4	; 0xcf4 <__vector_10>
      2c:	0c 94 b8 06 	jmp	0xd70	; 0xd70 <__vector_11>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      68:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      6c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      70:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      74:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      78:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      7c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      80:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      84:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      88:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      8c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      90:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      94:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      98:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      9c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      a0:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      a4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      a8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

000000ac <__trampolines_end>:
      ac:	0a 00       	.word	0x000a	; ????

000000ae <__c.2132>:
      ae:	61 6e 67 6c 65 3d 20 00                             angle= .

000000b6 <descriptor_list>:
      b6:	00 01 00 00 4d 01 12 00 02 00 00 0a 01 43 00 03     ....M........C..
      c6:	00 00 06 01 04 01 03 09 04 f2 00 12 02 03 09 04     ................
      d6:	ea 00 06 03 03 09 04 e0 00 08                       ..........

000000e0 <string3>:
      e0:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000000ea <string2>:
      ea:	06 03 4d 00 32 00 00 00                             ..M.2...

000000f2 <string1>:
      f2:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     102:	65 00 00 00                                         e...

00000106 <string0>:
     106:	04 03 09 04                                         ....

0000010a <config1_descriptor>:
     10a:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     11a:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     12a:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     13a:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     14a:	40 00 00                                            @..

0000014d <device_descriptor>:
     14d:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     15d:	03 01                                               ..

0000015f <endpoint_config_table>:
     15f:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	da e0       	ldi	r29, 0x0A	; 10
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	11 e0       	ldi	r17, 0x01	; 1
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	ec ea       	ldi	r30, 0xAC	; 172
     17e:	f6 e1       	ldi	r31, 0x16	; 22
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	ae 30       	cpi	r26, 0x0E	; 14
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	21 e0       	ldi	r18, 0x01	; 1
     18e:	ae e0       	ldi	r26, 0x0E	; 14
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	ae 33       	cpi	r26, 0x3E	; 62
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 b6 03 	call	0x76c	; 0x76c <main>
     1a0:	0c 94 54 0b 	jmp	0x16a8	; 0x16a8 <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <init>:
************************************************************/

/* Initialization of Pins and System Clock */
void init(void){
	
	m_clockdivide(CLOCK_DIVIDE); // Set to 2 MHz
     1a8:	e1 e6       	ldi	r30, 0x61	; 97
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 e8       	ldi	r24, 0x80	; 128
     1ae:	80 83       	st	Z, r24
     1b0:	83 e0       	ldi	r24, 0x03	; 3
     1b2:	80 83       	st	Z, r24
	
	//Set to Input
	clear(DDRD,0); // D0
     1b4:	50 98       	cbi	0x0a, 0	; 10
	clear(DDRD,1); // D1
     1b6:	51 98       	cbi	0x0a, 1	; 10
	clear(DDRD,2); // D2
     1b8:	52 98       	cbi	0x0a, 2	; 10
	
	//Set to Output
	set(DDRB,6); // B6
     1ba:	26 9a       	sbi	0x04, 6	; 4
	set(DDRC,6);	//enable digital output on pin C6 (invert state)
     1bc:	3e 9a       	sbi	0x07, 6	; 7
	
	//Set pin low
	clear(PORTC,6);	//start with both pins low 
     1be:	46 98       	cbi	0x08, 6	; 8
	
	while(!m_imu_init(accel_scale,gyro_scale)); //Initialize IMU
     1c0:	60 91 04 01 	lds	r22, 0x0104
     1c4:	80 91 05 01 	lds	r24, 0x0105
     1c8:	0e 94 8a 04 	call	0x914	; 0x914 <m_imu_init>
     1cc:	88 23       	and	r24, r24
     1ce:	c1 f3       	breq	.-16     	; 0x1c0 <init+0x18>
	
	sei(); // Enable global interrupts
     1d0:	78 94       	sei
     1d2:	08 95       	ret

000001d4 <usb_enable>:
}

/* Setup USB */
void usb_enable(void)
{
	m_usb_init();
     1d4:	0e 94 03 06 	call	0xc06	; 0xc06 <m_usb_init>
	while(!m_usb_isconnected());
     1d8:	0e 94 1c 06 	call	0xc38	; 0xc38 <m_usb_isconnected>
     1dc:	88 23       	and	r24, r24
     1de:	e1 f3       	breq	.-8      	; 0x1d8 <usb_enable+0x4>
}
     1e0:	08 95       	ret

000001e2 <wireless_enable>:

/* Initialize the Wireless System */
void wireless_enable(void)
{
	sei();
     1e2:	78 94       	sei
	m_bus_init(); // Enable mBUS
     1e4:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <m_bus_init>
	m_rf_open(CHANNEL,RXADDRESS,PACKET_LENGTH); // Configure mRF
     1e8:	43 e0       	ldi	r20, 0x03	; 3
     1ea:	6c e7       	ldi	r22, 0x7C	; 124
     1ec:	87 e0       	ldi	r24, 0x07	; 7
     1ee:	0e 94 49 05 	call	0xa92	; 0xa92 <m_rf_open>
     1f2:	08 95       	ret

000001f4 <wireless_recieve>:
}

/* Recieve Wireless Data */
void wireless_recieve(void)
{
	m_rf_read(buffer,PACKET_LENGTH); // Read RF Signal
     1f4:	63 e0       	ldi	r22, 0x03	; 3
     1f6:	81 e1       	ldi	r24, 0x11	; 17
     1f8:	91 e0       	ldi	r25, 0x01	; 1
     1fa:	0e 94 9f 05 	call	0xb3e	; 0xb3e <m_rf_read>
	Kp_adjust = buffer[0];
     1fe:	e1 e1       	ldi	r30, 0x11	; 17
     200:	f1 e0       	ldi	r31, 0x01	; 1
     202:	80 81       	ld	r24, Z
     204:	80 93 10 01 	sts	0x0110, r24
	Ki_adjust = buffer[1];
     208:	81 81       	ldd	r24, Z+1	; 0x01
     20a:	80 93 0f 01 	sts	0x010F, r24
	Kd_adjust = buffer[2];
     20e:	82 81       	ldd	r24, Z+2	; 0x02
     210:	80 93 0e 01 	sts	0x010E, r24
     214:	08 95       	ret

00000216 <timer1_init>:

/* Timer1 Initialization for PWM Motor Control */
void timer1_init(void)
{
	//Timer initialization
	clear(TCCR1B,CS12);	//Set timer1 prescaler to /1
     216:	e1 e8       	ldi	r30, 0x81	; 129
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 81       	ld	r24, Z
     21c:	8b 7f       	andi	r24, 0xFB	; 251
     21e:	80 83       	st	Z, r24
	clear(TCCR1B,CS11);
     220:	80 81       	ld	r24, Z
     222:	8d 7f       	andi	r24, 0xFD	; 253
     224:	80 83       	st	Z, r24
	set(TCCR1B,CS10);
     226:	80 81       	ld	r24, Z
     228:	81 60       	ori	r24, 0x01	; 1
     22a:	80 83       	st	Z, r24
	
	set(TCCR1B,WGM13);	//Use timer mode 15 (up to OCR1A, PWM mode)
     22c:	80 81       	ld	r24, Z
     22e:	80 61       	ori	r24, 0x10	; 16
     230:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
     232:	80 81       	ld	r24, Z
     234:	88 60       	ori	r24, 0x08	; 8
     236:	80 83       	st	Z, r24
	set(TCCR1A,WGM11);
     238:	e0 e8       	ldi	r30, 0x80	; 128
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	80 81       	ld	r24, Z
     23e:	82 60       	ori	r24, 0x02	; 2
     240:	80 83       	st	Z, r24
	set(TCCR1A,WGM10);
     242:	80 81       	ld	r24, Z
     244:	81 60       	ori	r24, 0x01	; 1
     246:	80 83       	st	Z, r24

	set(TCCR1A,COM1B1);		//clear at OCR1B, set at OCR1A
     248:	80 81       	ld	r24, Z
     24a:	80 62       	ori	r24, 0x20	; 32
     24c:	80 83       	st	Z, r24
	clear(TCCR1A,COM1B0);
     24e:	80 81       	ld	r24, Z
     250:	8f 7e       	andi	r24, 0xEF	; 239
     252:	80 83       	st	Z, r24

	OCR1A = CLOCK/PWM_FREQ;
     254:	e8 e8       	ldi	r30, 0x88	; 136
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	88 e8       	ldi	r24, 0x88	; 136
     25a:	93 e1       	ldi	r25, 0x13	; 19
     25c:	91 83       	std	Z+1, r25	; 0x01
     25e:	80 83       	st	Z, r24
	OCR1B = (float)OCR1A*duty_cycle;
     260:	60 81       	ld	r22, Z
     262:	71 81       	ldd	r23, Z+1	; 0x01
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	0e 94 a5 09 	call	0x134a	; 0x134a <__floatunsisf>
     26c:	20 91 00 01 	lds	r18, 0x0100
     270:	30 91 01 01 	lds	r19, 0x0101
     274:	40 91 02 01 	lds	r20, 0x0102
     278:	50 91 03 01 	lds	r21, 0x0103
     27c:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__mulsf3>
     280:	0e 94 76 09 	call	0x12ec	; 0x12ec <__fixunssfsi>
     284:	70 93 8b 00 	sts	0x008B, r23
     288:	60 93 8a 00 	sts	0x008A, r22
     28c:	08 95       	ret

0000028e <timer3_init>:
}

/* Timer3 Initialization for fixed timestep calculations */
void timer3_init(void) 
{
	clear(TCCR3B,CS32); // prescale /1
     28e:	e1 e9       	ldi	r30, 0x91	; 145
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	80 81       	ld	r24, Z
     294:	8b 7f       	andi	r24, 0xFB	; 251
     296:	80 83       	st	Z, r24
	clear(TCCR3B,CS31);
     298:	80 81       	ld	r24, Z
     29a:	8d 7f       	andi	r24, 0xFD	; 253
     29c:	80 83       	st	Z, r24
	set(TCCR3B,CS30);
     29e:	80 81       	ld	r24, Z
     2a0:	81 60       	ori	r24, 0x01	; 1
     2a2:	80 83       	st	Z, r24

	clear(TCCR3B,WGM33); // Up to OCR3A (mode 4)
     2a4:	80 81       	ld	r24, Z
     2a6:	8f 7e       	andi	r24, 0xEF	; 239
     2a8:	80 83       	st	Z, r24
	set(TCCR3B,WGM32);
     2aa:	80 81       	ld	r24, Z
     2ac:	88 60       	ori	r24, 0x08	; 8
     2ae:	80 83       	st	Z, r24
	clear(TCCR3A,WGM31);
     2b0:	e0 e9       	ldi	r30, 0x90	; 144
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	80 81       	ld	r24, Z
     2b6:	8d 7f       	andi	r24, 0xFD	; 253
     2b8:	80 83       	st	Z, r24
	clear(TCCR3A,WGM30);
     2ba:	80 81       	ld	r24, Z
     2bc:	8e 7f       	andi	r24, 0xFE	; 254
     2be:	80 83       	st	Z, r24
	
	OCR3A = TIMESTEP*(CLOCK/TIM3_PRESCALE); // initalize OCR3A or duration
     2c0:	80 ed       	ldi	r24, 0xD0	; 208
     2c2:	97 e0       	ldi	r25, 0x07	; 7
     2c4:	90 93 99 00 	sts	0x0099, r25
     2c8:	80 93 98 00 	sts	0x0098, r24
     2cc:	08 95       	ret

000002ce <lowpass>:
}


/* Lowpass Filter using Alpha_low */
int lowpass(float alpha, int previous_output, int reading)
{
     2ce:	8f 92       	push	r8
     2d0:	9f 92       	push	r9
     2d2:	af 92       	push	r10
     2d4:	bf 92       	push	r11
     2d6:	cf 92       	push	r12
     2d8:	df 92       	push	r13
     2da:	ef 92       	push	r14
     2dc:	ff 92       	push	r15
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	6b 01       	movw	r12, r22
     2e4:	7c 01       	movw	r14, r24
     2e6:	ea 01       	movw	r28, r20
	return (int)((float)reading*alpha +(1-alpha)*(float)previous_output);
     2e8:	b9 01       	movw	r22, r18
     2ea:	33 0f       	add	r19, r19
     2ec:	88 0b       	sbc	r24, r24
     2ee:	99 0b       	sbc	r25, r25
     2f0:	0e 94 a7 09 	call	0x134e	; 0x134e <__floatsisf>
     2f4:	a7 01       	movw	r20, r14
     2f6:	96 01       	movw	r18, r12
     2f8:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__mulsf3>
     2fc:	4b 01       	movw	r8, r22
     2fe:	5c 01       	movw	r10, r24
     300:	a7 01       	movw	r20, r14
     302:	96 01       	movw	r18, r12
     304:	60 e0       	ldi	r22, 0x00	; 0
     306:	70 e0       	ldi	r23, 0x00	; 0
     308:	80 e8       	ldi	r24, 0x80	; 128
     30a:	9f e3       	ldi	r25, 0x3F	; 63
     30c:	0e 94 8b 08 	call	0x1116	; 0x1116 <__subsf3>
     310:	6b 01       	movw	r12, r22
     312:	7c 01       	movw	r14, r24
     314:	be 01       	movw	r22, r28
     316:	dd 0f       	add	r29, r29
     318:	88 0b       	sbc	r24, r24
     31a:	99 0b       	sbc	r25, r25
     31c:	0e 94 a7 09 	call	0x134e	; 0x134e <__floatsisf>
     320:	9b 01       	movw	r18, r22
     322:	ac 01       	movw	r20, r24
     324:	c7 01       	movw	r24, r14
     326:	b6 01       	movw	r22, r12
     328:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__mulsf3>
     32c:	9b 01       	movw	r18, r22
     32e:	ac 01       	movw	r20, r24
     330:	c5 01       	movw	r24, r10
     332:	b4 01       	movw	r22, r8
     334:	0e 94 8c 08 	call	0x1118	; 0x1118 <__addsf3>
     338:	0e 94 6f 09 	call	0x12de	; 0x12de <__fixsfsi>
}
     33c:	cb 01       	movw	r24, r22
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	ff 90       	pop	r15
     344:	ef 90       	pop	r14
     346:	df 90       	pop	r13
     348:	cf 90       	pop	r12
     34a:	bf 90       	pop	r11
     34c:	af 90       	pop	r10
     34e:	9f 90       	pop	r9
     350:	8f 90       	pop	r8
     352:	08 95       	ret

00000354 <highpass>:

/* Highpass Filter using Aplha_high */
int highpass(float alpha, int previous_output, int previous_reading, int reading)
{
     354:	8f 92       	push	r8
     356:	9f 92       	push	r9
     358:	af 92       	push	r10
     35a:	bf 92       	push	r11
     35c:	cf 92       	push	r12
     35e:	df 92       	push	r13
     360:	ef 92       	push	r14
     362:	ff 92       	push	r15
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	6b 01       	movw	r12, r22
     36e:	7c 01       	movw	r14, r24
     370:	e9 01       	movw	r28, r18
	return (int)((float)previous_output*alpha + alpha*(float)(reading-previous_reading));
     372:	ba 01       	movw	r22, r20
     374:	55 0f       	add	r21, r21
     376:	88 0b       	sbc	r24, r24
     378:	99 0b       	sbc	r25, r25
     37a:	0e 94 a7 09 	call	0x134e	; 0x134e <__floatsisf>
     37e:	a7 01       	movw	r20, r14
     380:	96 01       	movw	r18, r12
     382:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__mulsf3>
     386:	4b 01       	movw	r8, r22
     388:	5c 01       	movw	r10, r24
     38a:	b8 01       	movw	r22, r16
     38c:	6c 1b       	sub	r22, r28
     38e:	7d 0b       	sbc	r23, r29
     390:	07 2e       	mov	r0, r23
     392:	00 0c       	add	r0, r0
     394:	88 0b       	sbc	r24, r24
     396:	99 0b       	sbc	r25, r25
     398:	0e 94 a7 09 	call	0x134e	; 0x134e <__floatsisf>
     39c:	a7 01       	movw	r20, r14
     39e:	96 01       	movw	r18, r12
     3a0:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__mulsf3>
     3a4:	9b 01       	movw	r18, r22
     3a6:	ac 01       	movw	r20, r24
     3a8:	c5 01       	movw	r24, r10
     3aa:	b4 01       	movw	r22, r8
     3ac:	0e 94 8c 08 	call	0x1118	; 0x1118 <__addsf3>
     3b0:	0e 94 6f 09 	call	0x12de	; 0x12de <__fixsfsi>
}
     3b4:	cb 01       	movw	r24, r22
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	ff 90       	pop	r15
     3c0:	ef 90       	pop	r14
     3c2:	df 90       	pop	r13
     3c4:	cf 90       	pop	r12
     3c6:	bf 90       	pop	r11
     3c8:	af 90       	pop	r10
     3ca:	9f 90       	pop	r9
     3cc:	8f 90       	pop	r8
     3ce:	08 95       	ret

000003d0 <run_control_loop>:
	}
}

/* PID Control */
void run_control_loop(void)
{
     3d0:	8f 92       	push	r8
     3d2:	9f 92       	push	r9
     3d4:	af 92       	push	r10
     3d6:	bf 92       	push	r11
     3d8:	cf 92       	push	r12
     3da:	df 92       	push	r13
     3dc:	ef 92       	push	r14
     3de:	ff 92       	push	r15
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
	int error = SETPOINT - angle;
     3e4:	c0 91 1a 01 	lds	r28, 0x011A
     3e8:	d0 91 1b 01 	lds	r29, 0x011B
     3ec:	d1 95       	neg	r29
     3ee:	c1 95       	neg	r28
     3f0:	d1 09       	sbc	r29, r1
	integral += error*TIMESTEP;
     3f2:	be 01       	movw	r22, r28
     3f4:	0d 2e       	mov	r0, r29
     3f6:	00 0c       	add	r0, r0
     3f8:	88 0b       	sbc	r24, r24
     3fa:	99 0b       	sbc	r25, r25
     3fc:	0e 94 a7 09 	call	0x134e	; 0x134e <__floatsisf>
     400:	4b 01       	movw	r8, r22
     402:	5c 01       	movw	r10, r24
     404:	2f e6       	ldi	r18, 0x6F	; 111
     406:	32 e1       	ldi	r19, 0x12	; 18
     408:	43 e8       	ldi	r20, 0x83	; 131
     40a:	5a e3       	ldi	r21, 0x3A	; 58
     40c:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__mulsf3>
     410:	20 91 14 01 	lds	r18, 0x0114
     414:	30 91 15 01 	lds	r19, 0x0115
     418:	40 91 16 01 	lds	r20, 0x0116
     41c:	50 91 17 01 	lds	r21, 0x0117
     420:	0e 94 8c 08 	call	0x1118	; 0x1118 <__addsf3>
     424:	6b 01       	movw	r12, r22
     426:	7c 01       	movw	r14, r24
     428:	60 93 14 01 	sts	0x0114, r22
     42c:	70 93 15 01 	sts	0x0115, r23
     430:	80 93 16 01 	sts	0x0116, r24
     434:	90 93 17 01 	sts	0x0117, r25
	float derivative = (error - previous_error)/TIMESTEP;
	float output = (Kp_adjust/255.0)*Kp*error + (Ki_adjust/255.0)*Ki*integral + (Kd_adjust/255.0)*Kd*derivative;
     438:	80 91 10 01 	lds	r24, 0x0110
     43c:	68 2f       	mov	r22, r24
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	0e 94 a7 09 	call	0x134e	; 0x134e <__floatsisf>
     448:	20 e0       	ldi	r18, 0x00	; 0
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	4f e7       	ldi	r20, 0x7F	; 127
     44e:	53 e4       	ldi	r21, 0x43	; 67
     450:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__divsf3>
     454:	9b 01       	movw	r18, r22
     456:	ac 01       	movw	r20, r24
     458:	c5 01       	movw	r24, r10
     45a:	b4 01       	movw	r22, r8
     45c:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__mulsf3>
     460:	4b 01       	movw	r8, r22
     462:	5c 01       	movw	r10, r24
     464:	80 91 0f 01 	lds	r24, 0x010F
     468:	68 2f       	mov	r22, r24
     46a:	70 e0       	ldi	r23, 0x00	; 0
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 a7 09 	call	0x134e	; 0x134e <__floatsisf>
     474:	20 e0       	ldi	r18, 0x00	; 0
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	4f e7       	ldi	r20, 0x7F	; 127
     47a:	53 e4       	ldi	r21, 0x43	; 67
     47c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__divsf3>
     480:	9b 01       	movw	r18, r22
     482:	ac 01       	movw	r20, r24
     484:	c7 01       	movw	r24, r14
     486:	b6 01       	movw	r22, r12
     488:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__mulsf3>
     48c:	9b 01       	movw	r18, r22
     48e:	ac 01       	movw	r20, r24
     490:	c5 01       	movw	r24, r10
     492:	b4 01       	movw	r22, r8
     494:	0e 94 8c 08 	call	0x1118	; 0x1118 <__addsf3>
     498:	6b 01       	movw	r12, r22
     49a:	7c 01       	movw	r14, r24
     49c:	60 91 0e 01 	lds	r22, 0x010E
     4a0:	70 e0       	ldi	r23, 0x00	; 0
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	0e 94 a7 09 	call	0x134e	; 0x134e <__floatsisf>
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	4f e7       	ldi	r20, 0x7F	; 127
     4b0:	53 e4       	ldi	r21, 0x43	; 67
     4b2:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__divsf3>
     4b6:	4b 01       	movw	r8, r22
     4b8:	5c 01       	movw	r10, r24
/* PID Control */
void run_control_loop(void)
{
	int error = SETPOINT - angle;
	integral += error*TIMESTEP;
	float derivative = (error - previous_error)/TIMESTEP;
     4ba:	80 91 18 01 	lds	r24, 0x0118
     4be:	90 91 19 01 	lds	r25, 0x0119
     4c2:	9e 01       	movw	r18, r28
     4c4:	28 1b       	sub	r18, r24
     4c6:	39 0b       	sbc	r19, r25
     4c8:	b9 01       	movw	r22, r18
     4ca:	33 0f       	add	r19, r19
     4cc:	88 0b       	sbc	r24, r24
     4ce:	99 0b       	sbc	r25, r25
     4d0:	0e 94 a7 09 	call	0x134e	; 0x134e <__floatsisf>
     4d4:	2f e6       	ldi	r18, 0x6F	; 111
     4d6:	32 e1       	ldi	r19, 0x12	; 18
     4d8:	43 e8       	ldi	r20, 0x83	; 131
     4da:	5a e3       	ldi	r21, 0x3A	; 58
     4dc:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__divsf3>
     4e0:	9b 01       	movw	r18, r22
     4e2:	ac 01       	movw	r20, r24
	float output = (Kp_adjust/255.0)*Kp*error + (Ki_adjust/255.0)*Ki*integral + (Kd_adjust/255.0)*Kd*derivative;
     4e4:	c5 01       	movw	r24, r10
     4e6:	b4 01       	movw	r22, r8
     4e8:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__mulsf3>
     4ec:	9b 01       	movw	r18, r22
     4ee:	ac 01       	movw	r20, r24
     4f0:	c7 01       	movw	r24, r14
     4f2:	b6 01       	movw	r22, r12
     4f4:	0e 94 8c 08 	call	0x1118	; 0x1118 <__addsf3>
     4f8:	6b 01       	movw	r12, r22
     4fa:	7c 01       	movw	r14, r24
	previous_error = error;
     4fc:	d0 93 19 01 	sts	0x0119, r29
     500:	c0 93 18 01 	sts	0x0118, r28
	
	duty_cycle = abs(output)/(45.0*Kp);
     504:	0e 94 6f 09 	call	0x12de	; 0x12de <__fixsfsi>
     508:	9b 01       	movw	r18, r22
     50a:	77 23       	and	r23, r23
     50c:	24 f4       	brge	.+8      	; 0x516 <run_control_loop+0x146>
     50e:	22 27       	eor	r18, r18
     510:	33 27       	eor	r19, r19
     512:	26 1b       	sub	r18, r22
     514:	37 0b       	sbc	r19, r23
     516:	b9 01       	movw	r22, r18
     518:	33 0f       	add	r19, r19
     51a:	88 0b       	sbc	r24, r24
     51c:	99 0b       	sbc	r25, r25
     51e:	0e 94 a7 09 	call	0x134e	; 0x134e <__floatsisf>
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	44 e3       	ldi	r20, 0x34	; 52
     528:	52 e4       	ldi	r21, 0x42	; 66
     52a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__divsf3>
     52e:	60 93 00 01 	sts	0x0100, r22
     532:	70 93 01 01 	sts	0x0101, r23
     536:	80 93 02 01 	sts	0x0102, r24
     53a:	90 93 03 01 	sts	0x0103, r25
	
	if (output<0){set(PORTC,6);}
     53e:	20 e0       	ldi	r18, 0x00	; 0
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	a9 01       	movw	r20, r18
     544:	c7 01       	movw	r24, r14
     546:	b6 01       	movw	r22, r12
     548:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <__cmpsf2>
     54c:	88 23       	and	r24, r24
     54e:	14 f4       	brge	.+4      	; 0x554 <run_control_loop+0x184>
     550:	46 9a       	sbi	0x08, 6	; 8
     552:	01 c0       	rjmp	.+2      	; 0x556 <run_control_loop+0x186>
	else{clear(PORTC,6);}
     554:	46 98       	cbi	0x08, 6	; 8
}
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	ff 90       	pop	r15
     55c:	ef 90       	pop	r14
     55e:	df 90       	pop	r13
     560:	cf 90       	pop	r12
     562:	bf 90       	pop	r11
     564:	af 90       	pop	r10
     566:	9f 90       	pop	r9
     568:	8f 90       	pop	r8
     56a:	08 95       	ret

0000056c <print_angle>:
	m_usb_tx_int(data[5]);
	m_usb_tx_string("\n");
}

void print_angle(int angle)//Print angle
{
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	ec 01       	movw	r28, r24
	m_usb_tx_string("angle= ");
     572:	8e ea       	ldi	r24, 0xAE	; 174
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	0e 94 3b 08 	call	0x1076	; 0x1076 <print_P>
	m_usb_tx_int(angle);
     57a:	ce 01       	movw	r24, r28
     57c:	0e 94 57 08 	call	0x10ae	; 0x10ae <m_usb_tx_int>
	m_usb_tx_string("\n");
     580:	8c ea       	ldi	r24, 0xAC	; 172
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0e 94 3b 08 	call	0x1076	; 0x1076 <print_P>
}
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	08 95       	ret

0000058e <update_angle>:
	return (int)((float)previous_output*alpha + alpha*(float)(reading-previous_reading));
}

/* Get IMU data, filter, update angle, update control */
void update_angle(void)
{
     58e:	4f 92       	push	r4
     590:	5f 92       	push	r5
     592:	6f 92       	push	r6
     594:	7f 92       	push	r7
     596:	8f 92       	push	r8
     598:	9f 92       	push	r9
     59a:	af 92       	push	r10
     59c:	bf 92       	push	r11
     59e:	cf 92       	push	r12
     5a0:	df 92       	push	r13
     5a2:	ef 92       	push	r14
     5a4:	ff 92       	push	r15
     5a6:	0f 93       	push	r16
     5a8:	1f 93       	push	r17
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
	if (m_imu_raw(data))
     5ae:	86 e2       	ldi	r24, 0x26	; 38
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	0e 94 f7 04 	call	0x9ee	; 0x9ee <m_imu_raw>
     5b6:	88 23       	and	r24, r24
     5b8:	09 f4       	brne	.+2      	; 0x5bc <update_angle+0x2e>
     5ba:	c3 c0       	rjmp	.+390    	; 0x742 <update_angle+0x1b4>
	{
		m_green(ON);
     5bc:	6a 9a       	sbi	0x0d, 2	; 13
     5be:	72 98       	cbi	0x0e, 2	; 14
		m_red(OFF);		
     5c0:	6e 9a       	sbi	0x0d, 6	; 13
     5c2:	76 9a       	sbi	0x0e, 6	; 14
		
		ax = lowpass(0.7,ax,data[0])+AX_OFFSET;
     5c4:	c6 e2       	ldi	r28, 0x26	; 38
     5c6:	d1 e0       	ldi	r29, 0x01	; 1
     5c8:	28 81       	ld	r18, Y
     5ca:	39 81       	ldd	r19, Y+1	; 0x01
     5cc:	40 91 24 01 	lds	r20, 0x0124
     5d0:	50 91 25 01 	lds	r21, 0x0125
     5d4:	63 e3       	ldi	r22, 0x33	; 51
     5d6:	73 e3       	ldi	r23, 0x33	; 51
     5d8:	83 e3       	ldi	r24, 0x33	; 51
     5da:	9f e3       	ldi	r25, 0x3F	; 63
     5dc:	0e 94 67 01 	call	0x2ce	; 0x2ce <lowpass>
     5e0:	88 58       	subi	r24, 0x88	; 136
     5e2:	91 09       	sbc	r25, r1
     5e4:	6c 01       	movw	r12, r24
     5e6:	90 93 25 01 	sts	0x0125, r25
     5ea:	80 93 24 01 	sts	0x0124, r24
		az = lowpass(0.7,az,data[2])+AZ_OFFSET;
     5ee:	2c 81       	ldd	r18, Y+4	; 0x04
     5f0:	3d 81       	ldd	r19, Y+5	; 0x05
     5f2:	40 91 22 01 	lds	r20, 0x0122
     5f6:	50 91 23 01 	lds	r21, 0x0123
     5fa:	63 e3       	ldi	r22, 0x33	; 51
     5fc:	73 e3       	ldi	r23, 0x33	; 51
     5fe:	83 e3       	ldi	r24, 0x33	; 51
     600:	9f e3       	ldi	r25, 0x3F	; 63
     602:	0e 94 67 01 	call	0x2ce	; 0x2ce <lowpass>
     606:	87 96       	adiw	r24, 0x27	; 39
     608:	7c 01       	movw	r14, r24
     60a:	90 93 23 01 	sts	0x0123, r25
     60e:	80 93 22 01 	sts	0x0122, r24
		gy = lowpass(ALPHA_LOW,gy,data[4])+GY_OFFSET;
     612:	08 84       	ldd	r0, Y+8	; 0x08
     614:	d9 85       	ldd	r29, Y+9	; 0x09
     616:	c0 2d       	mov	r28, r0
     618:	40 91 20 01 	lds	r20, 0x0120
     61c:	50 91 21 01 	lds	r21, 0x0121
     620:	9e 01       	movw	r18, r28
     622:	63 e3       	ldi	r22, 0x33	; 51
     624:	73 e3       	ldi	r23, 0x33	; 51
     626:	83 e7       	ldi	r24, 0x73	; 115
     628:	9f e3       	ldi	r25, 0x3F	; 63
     62a:	0e 94 67 01 	call	0x2ce	; 0x2ce <lowpass>
		gy = highpass(ALPHA_HIGH,gy,gy_previous_reading,data[4]);
     62e:	20 91 1e 01 	lds	r18, 0x011E
     632:	30 91 1f 01 	lds	r19, 0x011F
		m_green(ON);
		m_red(OFF);		
		
		ax = lowpass(0.7,ax,data[0])+AX_OFFSET;
		az = lowpass(0.7,az,data[2])+AZ_OFFSET;
		gy = lowpass(ALPHA_LOW,gy,data[4])+GY_OFFSET;
     636:	ac 01       	movw	r20, r24
     638:	49 57       	subi	r20, 0x79	; 121
     63a:	51 09       	sbc	r21, r1
		gy = highpass(ALPHA_HIGH,gy,gy_previous_reading,data[4]);
     63c:	8e 01       	movw	r16, r28
     63e:	6d ec       	ldi	r22, 0xCD	; 205
     640:	7c ec       	ldi	r23, 0xCC	; 204
     642:	8c ec       	ldi	r24, 0xCC	; 204
     644:	9d e3       	ldi	r25, 0x3D	; 61
     646:	0e 94 aa 01 	call	0x354	; 0x354 <highpass>
     64a:	8c 01       	movw	r16, r24
     64c:	90 93 21 01 	sts	0x0121, r25
     650:	80 93 20 01 	sts	0x0120, r24
		gy_previous_reading = data[4];
     654:	d0 93 1f 01 	sts	0x011F, r29
     658:	c0 93 1e 01 	sts	0x011E, r28
		
		if (check(TIFR3,OCF3A)){	//check if timestep has completed
     65c:	c1 9b       	sbis	0x18, 1	; 24
     65e:	6a c0       	rjmp	.+212    	; 0x734 <update_angle+0x1a6>
			angleSlow = ((float)ax*RAD2DEG)/sqrt(((float)ax*ax+(float)az*az));
     660:	b6 01       	movw	r22, r12
     662:	dd 0c       	add	r13, r13
     664:	88 0b       	sbc	r24, r24
     666:	99 0b       	sbc	r25, r25
     668:	0e 94 a7 09 	call	0x134e	; 0x134e <__floatsisf>
     66c:	4b 01       	movw	r8, r22
     66e:	5c 01       	movw	r10, r24
     670:	b7 01       	movw	r22, r14
     672:	ff 0c       	add	r15, r15
     674:	88 0b       	sbc	r24, r24
     676:	99 0b       	sbc	r25, r25
     678:	0e 94 a7 09 	call	0x134e	; 0x134e <__floatsisf>
     67c:	6b 01       	movw	r12, r22
     67e:	7c 01       	movw	r14, r24
     680:	a5 01       	movw	r20, r10
     682:	94 01       	movw	r18, r8
     684:	c5 01       	movw	r24, r10
     686:	b4 01       	movw	r22, r8
     688:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__mulsf3>
     68c:	2b 01       	movw	r4, r22
     68e:	3c 01       	movw	r6, r24
     690:	a7 01       	movw	r20, r14
     692:	96 01       	movw	r18, r12
     694:	c7 01       	movw	r24, r14
     696:	b6 01       	movw	r22, r12
     698:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__mulsf3>
     69c:	9b 01       	movw	r18, r22
     69e:	ac 01       	movw	r20, r24
     6a0:	c3 01       	movw	r24, r6
     6a2:	b2 01       	movw	r22, r4
     6a4:	0e 94 8c 08 	call	0x1118	; 0x1118 <__addsf3>
     6a8:	0e 94 ca 0a 	call	0x1594	; 0x1594 <sqrt>
     6ac:	6b 01       	movw	r12, r22
     6ae:	7c 01       	movw	r14, r24
     6b0:	23 e3       	ldi	r18, 0x33	; 51
     6b2:	33 e3       	ldi	r19, 0x33	; 51
     6b4:	45 e6       	ldi	r20, 0x65	; 101
     6b6:	52 e4       	ldi	r21, 0x42	; 66
     6b8:	c5 01       	movw	r24, r10
     6ba:	b4 01       	movw	r22, r8
     6bc:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__mulsf3>
     6c0:	a7 01       	movw	r20, r14
     6c2:	96 01       	movw	r18, r12
     6c4:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__divsf3>
     6c8:	0e 94 6f 09 	call	0x12de	; 0x12de <__fixsfsi>
     6cc:	6b 01       	movw	r12, r22
     6ce:	7c 01       	movw	r14, r24
     6d0:	70 93 3d 01 	sts	0x013D, r23
     6d4:	60 93 3c 01 	sts	0x013C, r22
			angleFast += gy*TIMESTEP;	//add thetadot*timestep to angle
     6d8:	60 91 1c 01 	lds	r22, 0x011C
     6dc:	70 91 1d 01 	lds	r23, 0x011D
     6e0:	07 2e       	mov	r0, r23
     6e2:	00 0c       	add	r0, r0
     6e4:	88 0b       	sbc	r24, r24
     6e6:	99 0b       	sbc	r25, r25
     6e8:	0e 94 a7 09 	call	0x134e	; 0x134e <__floatsisf>
     6ec:	4b 01       	movw	r8, r22
     6ee:	5c 01       	movw	r10, r24
     6f0:	b8 01       	movw	r22, r16
     6f2:	11 0f       	add	r17, r17
     6f4:	88 0b       	sbc	r24, r24
     6f6:	99 0b       	sbc	r25, r25
     6f8:	0e 94 a7 09 	call	0x134e	; 0x134e <__floatsisf>
     6fc:	2f e6       	ldi	r18, 0x6F	; 111
     6fe:	32 e1       	ldi	r19, 0x12	; 18
     700:	43 e8       	ldi	r20, 0x83	; 131
     702:	5a e3       	ldi	r21, 0x3A	; 58
     704:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__mulsf3>
     708:	9b 01       	movw	r18, r22
     70a:	ac 01       	movw	r20, r24
     70c:	c5 01       	movw	r24, r10
     70e:	b4 01       	movw	r22, r8
     710:	0e 94 8c 08 	call	0x1118	; 0x1118 <__addsf3>
     714:	0e 94 6f 09 	call	0x12de	; 0x12de <__fixsfsi>
     718:	70 93 1d 01 	sts	0x011D, r23
     71c:	60 93 1c 01 	sts	0x011C, r22
			angle = -angleSlow + angleFast;
     720:	cb 01       	movw	r24, r22
     722:	8c 19       	sub	r24, r12
     724:	9d 09       	sbc	r25, r13
     726:	90 93 1b 01 	sts	0x011B, r25
     72a:	80 93 1a 01 	sts	0x011A, r24
			set(TIFR3,OCF3A);		//reset flag
     72e:	c1 9a       	sbi	0x18, 1	; 24
			run_control_loop(); // Update control
     730:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <run_control_loop>
		}
		
		print_angle(angle);
     734:	80 91 1a 01 	lds	r24, 0x011A
     738:	90 91 1b 01 	lds	r25, 0x011B
     73c:	0e 94 b6 02 	call	0x56c	; 0x56c <print_angle>
     740:	04 c0       	rjmp	.+8      	; 0x74a <update_angle+0x1bc>
	}
	else
	{
		m_green(OFF);
     742:	6a 9a       	sbi	0x0d, 2	; 13
     744:	72 9a       	sbi	0x0e, 2	; 14
		m_red(ON);
     746:	6e 9a       	sbi	0x0d, 6	; 13
     748:	76 98       	cbi	0x0e, 6	; 14
	}
}
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	1f 91       	pop	r17
     750:	0f 91       	pop	r16
     752:	ff 90       	pop	r15
     754:	ef 90       	pop	r14
     756:	df 90       	pop	r13
     758:	cf 90       	pop	r12
     75a:	bf 90       	pop	r11
     75c:	af 90       	pop	r10
     75e:	9f 90       	pop	r9
     760:	8f 90       	pop	r8
     762:	7f 90       	pop	r7
     764:	6f 90       	pop	r6
     766:	5f 90       	pop	r5
     768:	4f 90       	pop	r4
     76a:	08 95       	ret

0000076c <main>:
Main Loop
************************************************************/
int main(void)
{
	/* Confirm Power */
	m_red(ON);
     76c:	6e 9a       	sbi	0x0d, 6	; 13
     76e:	76 98       	cbi	0x0e, 6	; 14

	/* Initializations */
	init();
     770:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <init>
	usb_enable();
     774:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <usb_enable>
	wireless_enable();
     778:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <wireless_enable>
	timer1_init();
     77c:	0e 94 0b 01 	call	0x216	; 0x216 <timer1_init>
	timer3_init();
     780:	0e 94 47 01 	call	0x28e	; 0x28e <timer3_init>

	/* Confirm successful initialization(s) */
	m_green(ON);
     784:	6a 9a       	sbi	0x0d, 2	; 13
     786:	72 98       	cbi	0x0e, 2	; 14

	/* Run */
	while (1){
		update_angle();
     788:	0e 94 c7 02 	call	0x58e	; 0x58e <update_angle>
	}
     78c:	fd cf       	rjmp	.-6      	; 0x788 <main+0x1c>

0000078e <__vector_3>:

/************************************************************
Interrupts
************************************************************/

ISR(INT2_vect){
     78e:	1f 92       	push	r1
     790:	0f 92       	push	r0
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	0f 92       	push	r0
     796:	11 24       	eor	r1, r1
     798:	2f 93       	push	r18
     79a:	3f 93       	push	r19
     79c:	4f 93       	push	r20
     79e:	5f 93       	push	r21
     7a0:	6f 93       	push	r22
     7a2:	7f 93       	push	r23
     7a4:	8f 93       	push	r24
     7a6:	9f 93       	push	r25
     7a8:	af 93       	push	r26
     7aa:	bf 93       	push	r27
     7ac:	ef 93       	push	r30
     7ae:	ff 93       	push	r31
	wireless_recieve();
     7b0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <wireless_recieve>
}
     7b4:	ff 91       	pop	r31
     7b6:	ef 91       	pop	r30
     7b8:	bf 91       	pop	r27
     7ba:	af 91       	pop	r26
     7bc:	9f 91       	pop	r25
     7be:	8f 91       	pop	r24
     7c0:	7f 91       	pop	r23
     7c2:	6f 91       	pop	r22
     7c4:	5f 91       	pop	r21
     7c6:	4f 91       	pop	r20
     7c8:	3f 91       	pop	r19
     7ca:	2f 91       	pop	r18
     7cc:	0f 90       	pop	r0
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	0f 90       	pop	r0
     7d2:	1f 90       	pop	r1
     7d4:	18 95       	reti

000007d6 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     7d6:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     7d8:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     7da:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     7dc:	8c e0       	ldi	r24, 0x0C	; 12
     7de:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     7e2:	e9 e6       	ldi	r30, 0x69	; 105
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	80 81       	ld	r24, Z
     7e8:	80 62       	ori	r24, 0x20	; 32
     7ea:	80 83       	st	Z, r24
     7ec:	80 81       	ld	r24, Z
     7ee:	8f 7e       	andi	r24, 0xEF	; 239
     7f0:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     7f2:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     7f4:	78 94       	sei
     7f6:	08 95       	ret

000007f8 <twi_read_byte>:
}

// TWI: read BYTE, NACK, STOP
unsigned char twi_read_byte(void)
{
    TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, NACK, and wait for another byte
     7f8:	84 e8       	ldi	r24, 0x84	; 132
     7fa:	80 93 bc 00 	sts	0x00BC, r24
    while(!(TWCR & (1<<TWINT))){};  // wait for an interrupt to signal that a new byte is available
     7fe:	ec eb       	ldi	r30, 0xBC	; 188
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	80 81       	ld	r24, Z
     804:	88 23       	and	r24, r24
     806:	ec f7       	brge	.-6      	; 0x802 <twi_read_byte+0xa>
    return TWDR;
     808:	80 91 bb 00 	lds	r24, 0x00BB
    twi_stop();
}
     80c:	08 95       	ret

0000080e <twi_wait_for_ack>:
}

// TWI:  wait for ACK packet (0=fail, 1=success)
unsigned char twi_wait_for_ack(void)
{
	unsigned int wait=0;
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<MAX_WAIT)){};	// wait for acknowledgement that the byte was sent
     812:	ec eb       	ldi	r30, 0xBC	; 188
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	80 81       	ld	r24, Z
     818:	88 23       	and	r24, r24
     81a:	34 f0       	brlt	.+12     	; 0x828 <twi_wait_for_ack+0x1a>
     81c:	2f 5f       	subi	r18, 0xFF	; 255
     81e:	3f 4f       	sbci	r19, 0xFF	; 255
     820:	29 3e       	cpi	r18, 0xE9	; 233
     822:	83 e0       	ldi	r24, 0x03	; 3
     824:	38 07       	cpc	r19, r24
     826:	b9 f7       	brne	.-18     	; 0x816 <twi_wait_for_ack+0x8>
    return (wait==MAX_WAIT? 0 : 1);
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	28 3e       	cpi	r18, 0xE8	; 232
     82c:	33 40       	sbci	r19, 0x03	; 3
     82e:	09 f4       	brne	.+2      	; 0x832 <twi_wait_for_ack+0x24>
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	08 95       	ret

00000834 <twi_send_byte>:
}

// TWI: send BYTE, wait for ACK
unsigned char twi_send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
     834:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
     838:	84 e8       	ldi	r24, 0x84	; 132
     83a:	80 93 bc 00 	sts	0x00BC, r24
	return (twi_wait_for_ack()) ? (TWSR & 0xF8) : 0 ;
     83e:	0e 94 07 04 	call	0x80e	; 0x80e <twi_wait_for_ack>
     842:	88 23       	and	r24, r24
     844:	19 f0       	breq	.+6      	; 0x84c <twi_send_byte+0x18>
     846:	80 91 b9 00 	lds	r24, 0x00B9
     84a:	88 7f       	andi	r24, 0xF8	; 248
}
     84c:	08 95       	ret

0000084e <twi_start>:
// PRIVATE FUNCTIONS:

// TWI: send START condition, wait for ACK, send ADDRESS with R/W flag
// readwrite = 1 for read, 0 for write
unsigned char twi_start(unsigned char address, unsigned char readwrite)
{
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	c8 2f       	mov	r28, r24
     854:	d6 2f       	mov	r29, r22
    unsigned char status;
    
    // START packet:
    TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     856:	84 ea       	ldi	r24, 0xA4	; 164
     858:	80 93 bc 00 	sts	0x00BC, r24
    if(!twi_wait_for_ack()){
     85c:	0e 94 07 04 	call	0x80e	; 0x80e <twi_wait_for_ack>
     860:	81 11       	cpse	r24, r1
     862:	04 c0       	rjmp	.+8      	; 0x86c <twi_start+0x1e>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     864:	94 e9       	ldi	r25, 0x94	; 148
     866:	90 93 bc 00 	sts	0x00BC, r25
     86a:	1c c0       	rjmp	.+56     	; 0x8a4 <twi_start+0x56>
        twi_stop();
        return 0; // COMM failure
    }
    
    // ADDRESS packet:
    if(readwrite)
     86c:	dd 23       	and	r29, r29
     86e:	61 f0       	breq	.+24     	; 0x888 <twi_start+0x3a>
    { // READ
        status = twi_send_byte(((address<<1) + 1));
     870:	8c 2f       	mov	r24, r28
     872:	88 0f       	add	r24, r24
     874:	8f 5f       	subi	r24, 0xFF	; 255
     876:	0e 94 1a 04 	call	0x834	; 0x834 <twi_send_byte>
        if(status== 0x48){ // ACK was not received - may not be connected/listening
     87a:	88 34       	cpi	r24, 0x48	; 72
     87c:	81 f4       	brne	.+32     	; 0x89e <twi_start+0x50>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     87e:	84 e9       	ldi	r24, 0x94	; 148
     880:	80 93 bc 00 	sts	0x00BC, r24
    if(readwrite)
    { // READ
        status = twi_send_byte(((address<<1) + 1));
        if(status== 0x48){ // ACK was not received - may not be connected/listening
            twi_stop();    
            return 0;	// failure
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	0e c0       	rjmp	.+28     	; 0x8a4 <twi_start+0x56>
        }	
    } else { // WRITE
        status = twi_send_byte(address<<1);
     888:	8c 2f       	mov	r24, r28
     88a:	88 0f       	add	r24, r24
     88c:	0e 94 1a 04 	call	0x834	; 0x834 <twi_send_byte>
        if(status== 0x20){ // ACK was not received - may not be connected/listening
     890:	80 32       	cpi	r24, 0x20	; 32
     892:	39 f4       	brne	.+14     	; 0x8a2 <twi_start+0x54>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     894:	84 e9       	ldi	r24, 0x94	; 148
     896:	80 93 bc 00 	sts	0x00BC, r24
        }	
    } else { // WRITE
        status = twi_send_byte(address<<1);
        if(status== 0x20){ // ACK was not received - may not be connected/listening
            twi_stop();
            return 0;	// failure
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	03 c0       	rjmp	.+6      	; 0x8a4 <twi_start+0x56>
        }	        
    }
    return 1;	// success
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	01 c0       	rjmp	.+2      	; 0x8a4 <twi_start+0x56>
     8a2:	81 e0       	ldi	r24, 0x01	; 1
    
}
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	08 95       	ret

000008aa <m_read_register>:
	set(EIMSK,INT2); // demask the interrupt
	sei(); // enable global interrupts
}

unsigned char m_read_register(unsigned char addr, unsigned char reg)
{
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	c8 2f       	mov	r28, r24
     8b0:	d6 2f       	mov	r29, r22
    if(!twi_start(addr,WRITE)) return 0; // START + W
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	0e 94 27 04 	call	0x84e	; 0x84e <twi_start>
     8b8:	88 23       	and	r24, r24
     8ba:	79 f0       	breq	.+30     	; 0x8da <m_read_register+0x30>
	if(!twi_send_byte(reg)) return 0;    // register to read
     8bc:	8d 2f       	mov	r24, r29
     8be:	0e 94 1a 04 	call	0x834	; 0x834 <twi_send_byte>
     8c2:	88 23       	and	r24, r24
     8c4:	51 f0       	breq	.+20     	; 0x8da <m_read_register+0x30>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     8c6:	84 e9       	ldi	r24, 0x94	; 148
     8c8:	80 93 bc 00 	sts	0x00BC, r24
unsigned char m_read_register(unsigned char addr, unsigned char reg)
{
    if(!twi_start(addr,WRITE)) return 0; // START + W
	if(!twi_send_byte(reg)) return 0;    // register to read
    twi_stop();                          // STOP
    if(!twi_start(addr,READ)) return 0;  // START + R
     8cc:	61 e0       	ldi	r22, 0x01	; 1
     8ce:	8c 2f       	mov	r24, r28
     8d0:	0e 94 27 04 	call	0x84e	; 0x84e <twi_start>
     8d4:	81 11       	cpse	r24, r1
	return(twi_read_byte());             // return register value
     8d6:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <twi_read_byte>
}
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	08 95       	ret

000008e0 <m_write_register>:

unsigned char m_write_register(unsigned char addr, unsigned char reg, unsigned char value)
{
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	c6 2f       	mov	r28, r22
     8e6:	d4 2f       	mov	r29, r20
    if(!twi_start(addr,WRITE)) return 0; // START + W
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	0e 94 27 04 	call	0x84e	; 0x84e <twi_start>
     8ee:	88 23       	and	r24, r24
     8f0:	71 f0       	breq	.+28     	; 0x90e <m_write_register+0x2e>
	if(!twi_send_byte(reg)) return 0;    // register to write to
     8f2:	8c 2f       	mov	r24, r28
     8f4:	0e 94 1a 04 	call	0x834	; 0x834 <twi_send_byte>
     8f8:	88 23       	and	r24, r24
     8fa:	49 f0       	breq	.+18     	; 0x90e <m_write_register+0x2e>
    if(!twi_send_byte(value)) return 0;  // value
     8fc:	8d 2f       	mov	r24, r29
     8fe:	0e 94 1a 04 	call	0x834	; 0x834 <twi_send_byte>
     902:	88 23       	and	r24, r24
     904:	21 f0       	breq	.+8      	; 0x90e <m_write_register+0x2e>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     906:	84 e9       	ldi	r24, 0x94	; 148
     908:	80 93 bc 00 	sts	0x00BC, r24
{
    if(!twi_start(addr,WRITE)) return 0; // START + W
	if(!twi_send_byte(reg)) return 0;    // register to write to
    if(!twi_send_byte(value)) return 0;  // value
    twi_stop();                          // STOP
    return(1);
     90c:	81 e0       	ldi	r24, 0x01	; 1
}
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	08 95       	ret

00000914 <m_imu_init>:
#define MIMU            0x69

// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
     918:	84 30       	cpi	r24, 0x04	; 4
     91a:	08 f0       	brcs	.+2      	; 0x91e <m_imu_init+0xa>
     91c:	60 c0       	rjmp	.+192    	; 0x9de <m_imu_init+0xca>
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
     91e:	64 30       	cpi	r22, 0x04	; 4
     920:	08 f0       	brcs	.+2      	; 0x924 <m_imu_init+0x10>
     922:	5f c0       	rjmp	.+190    	; 0x9e2 <m_imu_init+0xce>
     924:	d6 2f       	mov	r29, r22
     926:	c8 2f       	mov	r28, r24

	m_bus_init();
     928:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <m_bus_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     92c:	2f e5       	ldi	r18, 0x5F	; 95
     92e:	8a ee       	ldi	r24, 0xEA	; 234
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	21 50       	subi	r18, 0x01	; 1
     934:	80 40       	sbci	r24, 0x00	; 0
     936:	90 40       	sbci	r25, 0x00	; 0
     938:	e1 f7       	brne	.-8      	; 0x932 <m_imu_init+0x1e>
     93a:	00 c0       	rjmp	.+0      	; 0x93c <m_imu_init+0x28>
     93c:	00 00       	nop
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
     93e:	65 e7       	ldi	r22, 0x75	; 117
     940:	89 e6       	ldi	r24, 0x69	; 105
     942:	0e 94 55 04 	call	0x8aa	; 0x8aa <m_read_register>
     946:	88 36       	cpi	r24, 0x68	; 104
     948:	09 f0       	breq	.+2      	; 0x94c <m_imu_init+0x38>
     94a:	4d c0       	rjmp	.+154    	; 0x9e6 <m_imu_init+0xd2>
    
    // SET THE CLOCK SOURCE TO X-AXIS GYRO
    // reg: 0x68 (PWR_MGMT_1)
    // bits 0-2 control clock source
    // value: 0x01 (clock to PLL on X-axis gyro reference)
    m_write_register(MIMU,0x6B,0x01);
     94c:	41 e0       	ldi	r20, 0x01	; 1
     94e:	6b e6       	ldi	r22, 0x6B	; 107
     950:	89 e6       	ldi	r24, 0x69	; 105
     952:	0e 94 70 04 	call	0x8e0	; 0x8e0 <m_write_register>

    // SET THE ACCEL FULL-SCALE +/- RANGE (0=2G, 1=4G, 2=8G, 3=16G)
    // reg: 0x1C (ACCEL_CONFIG)
    // bits: 3-4 set +/- full-scale range
    m_write_register(MIMU,0x1C,accel_scale<<3);
     956:	4c 2f       	mov	r20, r28
     958:	44 0f       	add	r20, r20
     95a:	44 0f       	add	r20, r20
     95c:	44 0f       	add	r20, r20
     95e:	6c e1       	ldi	r22, 0x1C	; 28
     960:	89 e6       	ldi	r24, 0x69	; 105
     962:	0e 94 70 04 	call	0x8e0	; 0x8e0 <m_write_register>

    // SET THE GYRO FULL-SCALE +/- RANGE (0=250, 1=500, 2=1000, 3=2000 DEG/SEC)
    // reg: 0x1B (GYRO_CONFIG)
    // bits: 3-4 set +/- full-scale range
    // value: 0x00
    m_write_register(MIMU,0x1B,gyro_scale<<3); // this shouldn't be doing anything
     966:	4d 2f       	mov	r20, r29
     968:	44 0f       	add	r20, r20
     96a:	44 0f       	add	r20, r20
     96c:	44 0f       	add	r20, r20
     96e:	6b e1       	ldi	r22, 0x1B	; 27
     970:	89 e6       	ldi	r24, 0x69	; 105
     972:	0e 94 70 04 	call	0x8e0	; 0x8e0 <m_write_register>
      
    // SET THE MPU INTO I2C BYPASS MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 1 (1=bypass, 0=normal op)
    m_write_register(MIMU,0x37,0x02); // switch the MPU into bypass mode
     976:	42 e0       	ldi	r20, 0x02	; 2
     978:	67 e3       	ldi	r22, 0x37	; 55
     97a:	89 e6       	ldi	r24, 0x69	; 105
     97c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <m_write_register>
    
    // CONFIGURE THE MAGNETOMETER
    // address: 0x1E (for the magnetometer)
    // reg: 2 (mode register)
    // val: 0 (continuous output)
    m_write_register(0x1E,2,0); // set the mag. to continuous output mode
     980:	40 e0       	ldi	r20, 0x00	; 0
     982:	62 e0       	ldi	r22, 0x02	; 2
     984:	8e e1       	ldi	r24, 0x1E	; 30
     986:	0e 94 70 04 	call	0x8e0	; 0x8e0 <m_write_register>
    
    // SET THE MPU TO NORMAL I2C MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 5 (1=master, 0=passthrough)
    m_write_register(MIMU,0x37,0);    // switch the MPU out of bypass mode
     98a:	40 e0       	ldi	r20, 0x00	; 0
     98c:	67 e3       	ldi	r22, 0x37	; 55
     98e:	89 e6       	ldi	r24, 0x69	; 105
     990:	0e 94 70 04 	call	0x8e0	; 0x8e0 <m_write_register>
    // SET THE AUXILLIARY I2C SAMPLE RATE
    // reg: 0x34 (I2C_SLC4_CTRL) 
    // value: 0x1E (30 > 8000/30 = 266.6Hz)
    // reg: 0x67 (MST_DELAY_CTRL)
    // bit: 0 (1=slowed down, 0=full speed)
    m_write_register(MIMU,0x34,0x1E);
     994:	4e e1       	ldi	r20, 0x1E	; 30
     996:	64 e3       	ldi	r22, 0x34	; 52
     998:	89 e6       	ldi	r24, 0x69	; 105
     99a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <m_write_register>
    m_write_register(MIMU,0x67,0x01);
     99e:	41 e0       	ldi	r20, 0x01	; 1
     9a0:	67 e6       	ldi	r22, 0x67	; 103
     9a2:	89 e6       	ldi	r24, 0x69	; 105
     9a4:	0e 94 70 04 	call	0x8e0	; 0x8e0 <m_write_register>
    // ADJUST the auxilliary I2C port clock speed, etc.
    // reg: 0x24 (MST_CTRL)
    // bit: 4 = 1 (stop then start), 2 (restart)
    // bit: 0-3 = clock prescaler (0x0D = 400kHz)
    // not necessary, perhaps.  We shall see?
    m_write_register(MIMU,0x24,0x1D);
     9a8:	4d e1       	ldi	r20, 0x1D	; 29
     9aa:	64 e2       	ldi	r22, 0x24	; 36
     9ac:	89 e6       	ldi	r24, 0x69	; 105
     9ae:	0e 94 70 04 	call	0x8e0	; 0x8e0 <m_write_register>

    // SET THE MAGNETOMETER ADDRESS
    // reg: 0x25 (I2C_SLC0_ADDR)
    // value: 0x1E (from the magnetometer datasheet)
    // notes: for read from slave, set bit 7 to 1; to write, set bit 7 to 0
    m_write_register(MIMU,0x25,0x9E);
     9b2:	4e e9       	ldi	r20, 0x9E	; 158
     9b4:	65 e2       	ldi	r22, 0x25	; 37
     9b6:	89 e6       	ldi	r24, 0x69	; 105
     9b8:	0e 94 70 04 	call	0x8e0	; 0x8e0 <m_write_register>

    // SET THE MAGNETOMETER DATA START ADDRESS
    // reg: 0x26 (I2C_SLV0_REG)
    // val: 3 (X high byte)
    m_write_register(MIMU,0x26,3);
     9bc:	43 e0       	ldi	r20, 0x03	; 3
     9be:	66 e2       	ldi	r22, 0x26	; 38
     9c0:	89 e6       	ldi	r24, 0x69	; 105
     9c2:	0e 94 70 04 	call	0x8e0	; 0x8e0 <m_write_register>
    // reg: 0x27 (I2C_SLV0_CTRL
    // bit: 0-3 (# of bytes to ingest) = 6
    //      4: byte/word grouping control
    //      6: swap bytes
    //      7: enable slave (1=on, 0=off)
    m_write_register(MIMU,0x27,0x96);
     9c6:	46 e9       	ldi	r20, 0x96	; 150
     9c8:	67 e2       	ldi	r22, 0x27	; 39
     9ca:	89 e6       	ldi	r24, 0x69	; 105
     9cc:	0e 94 70 04 	call	0x8e0	; 0x8e0 <m_write_register>
    
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
     9d0:	40 e2       	ldi	r20, 0x20	; 32
     9d2:	6a e6       	ldi	r22, 0x6A	; 106
     9d4:	89 e6       	ldi	r24, 0x69	; 105
     9d6:	0e 94 70 04 	call	0x8e0	; 0x8e0 <m_write_register>
    
    return 1;   // SUCCESS!
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	05 c0       	rjmp	.+10     	; 0x9e8 <m_imu_init+0xd4>
// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	03 c0       	rjmp	.+6      	; 0x9e8 <m_imu_init+0xd4>
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	01 c0       	rjmp	.+2      	; 0x9e8 <m_imu_init+0xd4>

	m_bus_init();
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
     9e6:	80 e0       	ldi	r24, 0x00	; 0
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
    
    return 1;   // SUCCESS!
}
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	08 95       	ret

000009ee <m_imu_raw>:
// (41:42) TH:TL
// (43:44) GXH:GXL, (45:46) GYH:GYL, (47:48) GZH:GZL
// (49:4A) MXH:MXL, (4B:4C) MYH:MYL, (4D:4E) MZH:MZL

unsigned char m_imu_raw(int* raw_data)
{
     9ee:	cf 92       	push	r12
     9f0:	df 92       	push	r13
     9f2:	ef 92       	push	r14
     9f4:	ff 92       	push	r15
     9f6:	1f 93       	push	r17
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	cd b7       	in	r28, 0x3d	; 61
     9fe:	de b7       	in	r29, 0x3e	; 62
     a00:	64 97       	sbiw	r28, 0x14	; 20
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	f8 94       	cli
     a06:	de bf       	out	0x3e, r29	; 62
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	cd bf       	out	0x3d, r28	; 61
     a0c:	6c 01       	movw	r12, r24
     a0e:	ce 01       	movw	r24, r28
     a10:	01 96       	adiw	r24, 0x01	; 1
     a12:	7c 01       	movw	r14, r24
     a14:	1e e4       	ldi	r17, 0x4E	; 78
    unsigned char buffer[20]; 
    int i;
    
    for(i=0;i<20;i++) // read 20 bytes (6 accel + 2 temp + 6 gyro + 6 mag)
    {
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
     a16:	61 2f       	mov	r22, r17
     a18:	89 e6       	ldi	r24, 0x69	; 105
     a1a:	0e 94 55 04 	call	0x8aa	; 0x8aa <m_read_register>
     a1e:	f7 01       	movw	r30, r14
     a20:	81 93       	st	Z+, r24
     a22:	7f 01       	movw	r14, r30
     a24:	11 50       	subi	r17, 0x01	; 1
unsigned char m_imu_raw(int* raw_data)
{
    unsigned char buffer[20]; 
    int i;
    
    for(i=0;i<20;i++) // read 20 bytes (6 accel + 2 temp + 6 gyro + 6 mag)
     a26:	1a 33       	cpi	r17, 0x3A	; 58
     a28:	b1 f7       	brne	.-20     	; 0xa16 <m_imu_raw+0x28>
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
    }
    // buffer: [MZL, MZH, MYL, MYH, MXL, MXH, GZL, GZH, GYL, GYH, GXL, GXH, TL, TH, AZL, AZH, AYL, AYH, AXL, AXH]
    for(i=0;i<3;i++)
    {
        raw_data[2-i] = *(int*)&buffer[14+2*i]; // [2] = [AZL:AZH], [1] = [AYL:AYH], [0] = [AXL:AXH]
     a2a:	8f 85       	ldd	r24, Y+15	; 0x0f
     a2c:	98 89       	ldd	r25, Y+16	; 0x10
     a2e:	f6 01       	movw	r30, r12
     a30:	95 83       	std	Z+5, r25	; 0x05
     a32:	84 83       	std	Z+4, r24	; 0x04
        raw_data[5-i] = *(int*)&buffer[6+2*i];  // [5] = [GZL:GZH], [4] = [GYL:GYH], [3] = [GXL:GXH]
     a34:	8f 81       	ldd	r24, Y+7	; 0x07
     a36:	98 85       	ldd	r25, Y+8	; 0x08
     a38:	93 87       	std	Z+11, r25	; 0x0b
     a3a:	82 87       	std	Z+10, r24	; 0x0a
        raw_data[8-i] = *(int*)&buffer[2*i];    // [8] = [MZL:MZH], [7] = [MYL:MYH], [6] = [MXL:MXH]
     a3c:	89 81       	ldd	r24, Y+1	; 0x01
     a3e:	9a 81       	ldd	r25, Y+2	; 0x02
     a40:	91 8b       	std	Z+17, r25	; 0x11
     a42:	80 8b       	std	Z+16, r24	; 0x10
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
    }
    // buffer: [MZL, MZH, MYL, MYH, MXL, MXH, GZL, GZH, GYL, GYH, GXL, GXH, TL, TH, AZL, AZH, AYL, AYH, AXL, AXH]
    for(i=0;i<3;i++)
    {
        raw_data[2-i] = *(int*)&buffer[14+2*i]; // [2] = [AZL:AZH], [1] = [AYL:AYH], [0] = [AXL:AXH]
     a44:	89 89       	ldd	r24, Y+17	; 0x11
     a46:	9a 89       	ldd	r25, Y+18	; 0x12
     a48:	93 83       	std	Z+3, r25	; 0x03
     a4a:	82 83       	std	Z+2, r24	; 0x02
        raw_data[5-i] = *(int*)&buffer[6+2*i];  // [5] = [GZL:GZH], [4] = [GYL:GYH], [3] = [GXL:GXH]
     a4c:	89 85       	ldd	r24, Y+9	; 0x09
     a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     a50:	91 87       	std	Z+9, r25	; 0x09
     a52:	80 87       	std	Z+8, r24	; 0x08
        raw_data[8-i] = *(int*)&buffer[2*i];    // [8] = [MZL:MZH], [7] = [MYL:MYH], [6] = [MXL:MXH]
     a54:	8b 81       	ldd	r24, Y+3	; 0x03
     a56:	9c 81       	ldd	r25, Y+4	; 0x04
     a58:	97 87       	std	Z+15, r25	; 0x0f
     a5a:	86 87       	std	Z+14, r24	; 0x0e
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
    }
    // buffer: [MZL, MZH, MYL, MYH, MXL, MXH, GZL, GZH, GYL, GYH, GXL, GXH, TL, TH, AZL, AZH, AYL, AYH, AXL, AXH]
    for(i=0;i<3;i++)
    {
        raw_data[2-i] = *(int*)&buffer[14+2*i]; // [2] = [AZL:AZH], [1] = [AYL:AYH], [0] = [AXL:AXH]
     a5c:	8b 89       	ldd	r24, Y+19	; 0x13
     a5e:	9c 89       	ldd	r25, Y+20	; 0x14
     a60:	91 83       	std	Z+1, r25	; 0x01
     a62:	80 83       	st	Z, r24
        raw_data[5-i] = *(int*)&buffer[6+2*i];  // [5] = [GZL:GZH], [4] = [GYL:GYH], [3] = [GXL:GXH]
     a64:	8b 85       	ldd	r24, Y+11	; 0x0b
     a66:	9c 85       	ldd	r25, Y+12	; 0x0c
     a68:	97 83       	std	Z+7, r25	; 0x07
     a6a:	86 83       	std	Z+6, r24	; 0x06
        raw_data[8-i] = *(int*)&buffer[2*i];    // [8] = [MZL:MZH], [7] = [MYL:MYH], [6] = [MXL:MXH]
     a6c:	8d 81       	ldd	r24, Y+5	; 0x05
     a6e:	9e 81       	ldd	r25, Y+6	; 0x06
     a70:	95 87       	std	Z+13, r25	; 0x0d
     a72:	84 87       	std	Z+12, r24	; 0x0c
    }
    return 1;
}
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	64 96       	adiw	r28, 0x14	; 20
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	f8 94       	cli
     a7c:	de bf       	out	0x3e, r29	; 62
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	cd bf       	out	0x3d, r28	; 61
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	1f 91       	pop	r17
     a88:	ff 90       	pop	r15
     a8a:	ef 90       	pop	r14
     a8c:	df 90       	pop	r13
     a8e:	cf 90       	pop	r12
     a90:	08 95       	ret

00000a92 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
     a92:	1f 93       	push	r17
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	18 2f       	mov	r17, r24
     a9a:	d6 2f       	mov	r29, r22
     a9c:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
     a9e:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     aa2:	94 ea       	ldi	r25, 0xA4	; 164
     aa4:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
     aa8:	ec eb       	ldi	r30, 0xBC	; 188
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	90 81       	ld	r25, Z
     aae:	99 23       	and	r25, r25
     ab0:	ec f7       	brge	.-6      	; 0xaac <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
     ab2:	90 e5       	ldi	r25, 0x50	; 80
     ab4:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
     ab8:	94 e8       	ldi	r25, 0x84	; 132
     aba:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
     abe:	ec eb       	ldi	r30, 0xBC	; 188
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	90 81       	ld	r25, Z
     ac4:	99 23       	and	r25, r25
     ac6:	ec f7       	brge	.-6      	; 0xac2 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
     ac8:	90 91 b9 00 	lds	r25, 0x00B9
     acc:	98 7f       	andi	r25, 0xF8	; 248
     ace:	90 32       	cpi	r25, 0x20	; 32
     ad0:	29 f4       	brne	.+10     	; 0xadc <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     ad2:	84 e9       	ldi	r24, 0x94	; 148
     ad4:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	2d c0       	rjmp	.+90     	; 0xb36 <__stack+0x37>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     ae2:	84 e8       	ldi	r24, 0x84	; 132
     ae4:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     ae8:	ec eb       	ldi	r30, 0xBC	; 188
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	90 81       	ld	r25, Z
     aee:	99 23       	and	r25, r25
     af0:	ec f7       	brge	.-6      	; 0xaec <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
     af2:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
     af6:	84 e8       	ldi	r24, 0x84	; 132
     af8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     afc:	ec eb       	ldi	r30, 0xBC	; 188
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	80 81       	ld	r24, Z
     b02:	88 23       	and	r24, r24
     b04:	ec f7       	brge	.-6      	; 0xb00 <__stack+0x1>
	
	TWDR = RXaddress;
     b06:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
     b0a:	84 e8       	ldi	r24, 0x84	; 132
     b0c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     b10:	ec eb       	ldi	r30, 0xBC	; 188
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 81       	ld	r24, Z
     b16:	88 23       	and	r24, r24
     b18:	ec f7       	brge	.-6      	; 0xb14 <__stack+0x15>
	
	TWDR = packet_length;
     b1a:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
     b1e:	84 e8       	ldi	r24, 0x84	; 132
     b20:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     b24:	ec eb       	ldi	r30, 0xBC	; 188
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	80 81       	ld	r24, Z
     b2a:	88 23       	and	r24, r24
     b2c:	ec f7       	brge	.-6      	; 0xb28 <__stack+0x29>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     b2e:	84 e9       	ldi	r24, 0x94	; 148
     b30:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
     b34:	81 e0       	ldi	r24, 0x01	; 1
}
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	08 95       	ret

00000b3e <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	9c 01       	movw	r18, r24

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     b44:	84 ea       	ldi	r24, 0xA4	; 164
     b46:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     b4a:	ec eb       	ldi	r30, 0xBC	; 188
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	90 81       	ld	r25, Z
     b50:	99 23       	and	r25, r25
     b52:	ec f7       	brge	.-6      	; 0xb4e <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
     b54:	81 e5       	ldi	r24, 0x51	; 81
     b56:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     b5a:	84 e8       	ldi	r24, 0x84	; 132
     b5c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
     b60:	ec eb       	ldi	r30, 0xBC	; 188
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	90 81       	ld	r25, Z
     b66:	99 23       	and	r25, r25
     b68:	ec f7       	brge	.-6      	; 0xb64 <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
     b6a:	80 91 b9 00 	lds	r24, 0x00B9
     b6e:	88 7f       	andi	r24, 0xF8	; 248
     b70:	88 34       	cpi	r24, 0x48	; 72
     b72:	29 f4       	brne	.+10     	; 0xb7e <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     b74:	84 e9       	ldi	r24, 0x94	; 148
     b76:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	41 c0       	rjmp	.+130    	; 0xc00 <m_rf_read+0xc2>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     b7e:	84 ec       	ldi	r24, 0xC4	; 196
     b80:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     b84:	ec eb       	ldi	r30, 0xBC	; 188
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	90 81       	ld	r25, Z
     b8a:	99 23       	and	r25, r25
     b8c:	ec f7       	brge	.-6      	; 0xb88 <m_rf_read+0x4a>
	bytes = TWDR;
     b8e:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
     b92:	46 13       	cpse	r20, r22
     b94:	09 c0       	rjmp	.+18     	; 0xba8 <m_rf_read+0x6a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
     b96:	84 2f       	mov	r24, r20
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	18 16       	cp	r1, r24
     b9e:	19 06       	cpc	r1, r25
     ba0:	44 f0       	brlt	.+16     	; 0xbb2 <m_rf_read+0x74>
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	1a c0       	rjmp	.+52     	; 0xbdc <m_rf_read+0x9e>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     ba8:	84 e9       	ldi	r24, 0x94	; 148
     baa:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	27 c0       	rjmp	.+78     	; 0xc00 <m_rf_read+0xc2>
     bb2:	d9 01       	movw	r26, r18
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	41 50       	subi	r20, 0x01	; 1
     bb8:	51 09       	sbc	r21, r1
     bba:	b9 01       	movw	r22, r18
     bbc:	64 0f       	add	r22, r20
     bbe:	75 1f       	adc	r23, r21
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     bc0:	ec eb       	ldi	r30, 0xBC	; 188
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
     bc6:	cb eb       	ldi	r28, 0xBB	; 187
     bc8:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     bca:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     bcc:	90 81       	ld	r25, Z
     bce:	99 23       	and	r25, r25
     bd0:	ec f7       	brge	.-6      	; 0xbcc <m_rf_read+0x8e>
		buffer[i] = TWDR;
     bd2:	98 81       	ld	r25, Y
     bd4:	9d 93       	st	X+, r25
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
     bd6:	a6 17       	cp	r26, r22
     bd8:	b7 07       	cpc	r27, r23
     bda:	b9 f7       	brne	.-18     	; 0xbca <m_rf_read+0x8c>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
     bdc:	84 e8       	ldi	r24, 0x84	; 132
     bde:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     be2:	ec eb       	ldi	r30, 0xBC	; 188
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	90 81       	ld	r25, Z
     be8:	99 23       	and	r25, r25
     bea:	ec f7       	brge	.-6      	; 0xbe6 <m_rf_read+0xa8>
	buffer[i++] = TWDR;
     bec:	80 91 bb 00 	lds	r24, 0x00BB
     bf0:	f9 01       	movw	r30, r18
     bf2:	e4 0f       	add	r30, r20
     bf4:	f5 1f       	adc	r31, r21
     bf6:	80 83       	st	Z, r24
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     bf8:	84 e9       	ldi	r24, 0x94	; 148
     bfa:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
     bfe:	81 e0       	ldi	r24, 0x01	; 1
}
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	08 95       	ret

00000c06 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
     c0c:	80 ea       	ldi	r24, 0xA0	; 160
     c0e:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
     c12:	82 e1       	ldi	r24, 0x12	; 18
     c14:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
     c16:	09 b4       	in	r0, 0x29	; 41
     c18:	00 fe       	sbrs	r0, 0
     c1a:	fd cf       	rjmp	.-6      	; 0xc16 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
     c1c:	80 e9       	ldi	r24, 0x90	; 144
     c1e:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
     c22:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
     c26:	10 92 3b 01 	sts	0x013B, r1
	cdc_line_rtsdtr = 0;
     c2a:	10 92 38 01 	sts	0x0138, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
     c2e:	8c e0       	ldi	r24, 0x0C	; 12
     c30:	80 93 e2 00 	sts	0x00E2, r24
	sei();
     c34:	78 94       	sei
     c36:	08 95       	ret

00000c38 <m_usb_isconnected>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
char m_usb_isconnected(void)
{
	return (char)usb_configuration;
     c38:	80 91 3b 01 	lds	r24, 0x013B
}
     c3c:	08 95       	ret

00000c3e <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     c42:	90 91 3b 01 	lds	r25, 0x013B
     c46:	99 23       	and	r25, r25
     c48:	09 f4       	brne	.+2      	; 0xc4c <m_usb_tx_char+0xe>
     c4a:	4c c0       	rjmp	.+152    	; 0xce4 <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     c4c:	9f b7       	in	r25, 0x3f	; 63
	cli();
     c4e:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     c50:	24 e0       	ldi	r18, 0x04	; 4
     c52:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     c56:	20 91 39 01 	lds	r18, 0x0139
     c5a:	22 23       	and	r18, r18
     c5c:	49 f0       	breq	.+18     	; 0xc70 <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
     c5e:	20 91 e8 00 	lds	r18, 0x00E8
     c62:	25 fd       	sbrc	r18, 5
     c64:	03 c0       	rjmp	.+6      	; 0xc6c <m_usb_tx_char+0x2e>
			SREG = intr_state;
     c66:	9f bf       	out	0x3f, r25	; 63
			return -1;
     c68:	8f ef       	ldi	r24, 0xFF	; 255
     c6a:	41 c0       	rjmp	.+130    	; 0xcee <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
     c6c:	10 92 39 01 	sts	0x0139, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
     c70:	30 91 e4 00 	lds	r19, 0x00E4
     c74:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     c76:	20 91 e8 00 	lds	r18, 0x00E8
     c7a:	25 fd       	sbrc	r18, 5
     c7c:	24 c0       	rjmp	.+72     	; 0xcc6 <m_usb_tx_char+0x88>
		SREG = intr_state;
     c7e:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     c80:	90 91 e4 00 	lds	r25, 0x00E4
     c84:	93 17       	cp	r25, r19
     c86:	81 f0       	breq	.+32     	; 0xca8 <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     c88:	90 91 3b 01 	lds	r25, 0x013B
     c8c:	99 23       	and	r25, r25
     c8e:	61 f1       	breq	.+88     	; 0xce8 <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
     c90:	a9 ee       	ldi	r26, 0xE9	; 233
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     c96:	e8 ee       	ldi	r30, 0xE8	; 232
     c98:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     c9a:	c4 ee       	ldi	r28, 0xE4	; 228
     c9c:	d0 e0       	ldi	r29, 0x00	; 0
     c9e:	0d c0       	rjmp	.+26     	; 0xcba <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
     ca0:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     ca2:	98 81       	ld	r25, Y
     ca4:	93 13       	cpse	r25, r19
     ca6:	05 c0       	rjmp	.+10     	; 0xcb2 <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	80 93 39 01 	sts	0x0139, r24
			return -1;
     cae:	8f ef       	ldi	r24, 0xFF	; 255
     cb0:	1e c0       	rjmp	.+60     	; 0xcee <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     cb2:	90 91 3b 01 	lds	r25, 0x013B
     cb6:	99 23       	and	r25, r25
     cb8:	c9 f0       	breq	.+50     	; 0xcec <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
     cba:	9f b7       	in	r25, 0x3f	; 63
		cli();
     cbc:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
     cbe:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     cc0:	20 81       	ld	r18, Z
     cc2:	25 ff       	sbrs	r18, 5
     cc4:	ed cf       	rjmp	.-38     	; 0xca0 <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
     cc6:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     cca:	80 91 e8 00 	lds	r24, 0x00E8
     cce:	85 fd       	sbrc	r24, 5
     cd0:	03 c0       	rjmp	.+6      	; 0xcd8 <m_usb_tx_char+0x9a>
     cd2:	8a e3       	ldi	r24, 0x3A	; 58
     cd4:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     cd8:	85 e0       	ldi	r24, 0x05	; 5
     cda:	80 93 3a 01 	sts	0x013A, r24
	SREG = intr_state;
     cde:	9f bf       	out	0x3f, r25	; 63
	return 0;
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	05 c0       	rjmp	.+10     	; 0xcee <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     ce4:	8f ef       	ldi	r24, 0xFF	; 255
     ce6:	03 c0       	rjmp	.+6      	; 0xcee <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     ce8:	8f ef       	ldi	r24, 0xFF	; 255
     cea:	01 c0       	rjmp	.+2      	; 0xcee <m_usb_tx_char+0xb0>
     cec:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	08 95       	ret

00000cf4 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
     cf4:	1f 92       	push	r1
     cf6:	0f 92       	push	r0
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	0f 92       	push	r0
     cfc:	11 24       	eor	r1, r1
     cfe:	8f 93       	push	r24
     d00:	9f 93       	push	r25
     d02:	ef 93       	push	r30
     d04:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
     d06:	e1 ee       	ldi	r30, 0xE1	; 225
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
        UDINT = 0;
     d0c:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
     d0e:	83 ff       	sbrs	r24, 3
     d10:	11 c0       	rjmp	.+34     	; 0xd34 <__vector_10+0x40>
		UENUM = 0;
     d12:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
     d1c:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
     d20:	92 e1       	ldi	r25, 0x12	; 18
     d22:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
     d26:	98 e0       	ldi	r25, 0x08	; 8
     d28:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
     d2c:	10 92 3b 01 	sts	0x013B, r1
		cdc_line_rtsdtr = 0;
     d30:	10 92 38 01 	sts	0x0138, r1
        }
	if (intbits & (1<<SOFI)) {
     d34:	82 ff       	sbrs	r24, 2
     d36:	13 c0       	rjmp	.+38     	; 0xd5e <__vector_10+0x6a>
		if (usb_configuration) {
     d38:	80 91 3b 01 	lds	r24, 0x013B
     d3c:	88 23       	and	r24, r24
     d3e:	79 f0       	breq	.+30     	; 0xd5e <__vector_10+0x6a>
			t = transmit_flush_timer;
     d40:	80 91 3a 01 	lds	r24, 0x013A
			if (t) {
     d44:	88 23       	and	r24, r24
     d46:	59 f0       	breq	.+22     	; 0xd5e <__vector_10+0x6a>
				transmit_flush_timer = --t;
     d48:	81 50       	subi	r24, 0x01	; 1
     d4a:	80 93 3a 01 	sts	0x013A, r24
				if (!t) {
     d4e:	81 11       	cpse	r24, r1
     d50:	06 c0       	rjmp	.+12     	; 0xd5e <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
     d52:	84 e0       	ldi	r24, 0x04	; 4
     d54:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
     d58:	8a e3       	ldi	r24, 0x3A	; 58
     d5a:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
     d5e:	ff 91       	pop	r31
     d60:	ef 91       	pop	r30
     d62:	9f 91       	pop	r25
     d64:	8f 91       	pop	r24
     d66:	0f 90       	pop	r0
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	0f 90       	pop	r0
     d6c:	1f 90       	pop	r1
     d6e:	18 95       	reti

00000d70 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
     d70:	1f 92       	push	r1
     d72:	0f 92       	push	r0
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	0f 92       	push	r0
     d78:	11 24       	eor	r1, r1
     d7a:	0f 93       	push	r16
     d7c:	1f 93       	push	r17
     d7e:	2f 93       	push	r18
     d80:	3f 93       	push	r19
     d82:	4f 93       	push	r20
     d84:	5f 93       	push	r21
     d86:	6f 93       	push	r22
     d88:	7f 93       	push	r23
     d8a:	8f 93       	push	r24
     d8c:	9f 93       	push	r25
     d8e:	af 93       	push	r26
     d90:	bf 93       	push	r27
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	ef 93       	push	r30
     d98:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
     d9a:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
     d9e:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
     da2:	83 ff       	sbrs	r24, 3
     da4:	4c c1       	rjmp	.+664    	; 0x103e <__vector_11+0x2ce>
                bmRequestType = UEDATX;
     da6:	e1 ef       	ldi	r30, 0xF1	; 241
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	60 81       	ld	r22, Z
                bRequest = UEDATX;
     dac:	80 81       	ld	r24, Z
                wValue = UEDATX;
     dae:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
     db0:	90 81       	ld	r25, Z
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	39 2b       	or	r19, r25
                wIndex = UEDATX;
     db6:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
     db8:	90 81       	ld	r25, Z
     dba:	50 e0       	ldi	r21, 0x00	; 0
     dbc:	59 2b       	or	r21, r25
                wLength = UEDATX;
     dbe:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
     dc0:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
     dc2:	92 ef       	ldi	r25, 0xF2	; 242
     dc4:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
     dc8:	86 30       	cpi	r24, 0x06	; 6
     dca:	09 f0       	breq	.+2      	; 0xdce <__vector_11+0x5e>
     dcc:	58 c0       	rjmp	.+176    	; 0xe7e <__vector_11+0x10e>
     dce:	04 c0       	rjmp	.+8      	; 0xdd8 <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
     dd0:	81 e2       	ldi	r24, 0x21	; 33
     dd2:	80 93 eb 00 	sts	0x00EB, r24
					return;
     dd6:	3a c1       	rjmp	.+628    	; 0x104c <__vector_11+0x2dc>
     dd8:	66 e0       	ldi	r22, 0x06	; 6
     dda:	86 eb       	ldi	r24, 0xB6	; 182
     ddc:	90 e0       	ldi	r25, 0x00	; 0
				}
				desc_val = pgm_read_word(list);
     dde:	fc 01       	movw	r30, r24
     de0:	a5 91       	lpm	r26, Z+
     de2:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
     de4:	2a 17       	cp	r18, r26
     de6:	3b 07       	cpc	r19, r27
     de8:	11 f0       	breq	.+4      	; 0xdee <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
     dea:	07 96       	adiw	r24, 0x07	; 7
					continue;
     dec:	23 c0       	rjmp	.+70     	; 0xe34 <__vector_11+0xc4>
				}
				list += 2;
     dee:	fc 01       	movw	r30, r24
     df0:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
     df2:	a5 91       	lpm	r26, Z+
     df4:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
     df6:	4a 17       	cp	r20, r26
     df8:	5b 07       	cpc	r21, r27
     dfa:	11 f0       	breq	.+4      	; 0xe00 <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
     dfc:	07 96       	adiw	r24, 0x07	; 7
					continue;
     dfe:	1a c0       	rjmp	.+52     	; 0xe34 <__vector_11+0xc4>
				}
				list += 2;
     e00:	fc 01       	movw	r30, r24
     e02:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
     e04:	45 91       	lpm	r20, Z+
     e06:	54 91       	lpm	r21, Z
				list += 2;
     e08:	fc 01       	movw	r30, r24
     e0a:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
     e0c:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
     e0e:	87 2f       	mov	r24, r23
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
     e14:	8f 3f       	cpi	r24, 0xFF	; 255
     e16:	91 05       	cpc	r25, r1
     e18:	19 f0       	breq	.+6      	; 0xe20 <__vector_11+0xb0>
     e1a:	10 f0       	brcs	.+4      	; 0xe20 <__vector_11+0xb0>
     e1c:	8f ef       	ldi	r24, 0xFF	; 255
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	82 17       	cp	r24, r18
     e22:	08 f4       	brcc	.+2      	; 0xe26 <__vector_11+0xb6>
     e24:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
     e26:	a8 ee       	ldi	r26, 0xE8	; 232
     e28:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     e2a:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     e2c:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
     e2e:	c1 ef       	ldi	r28, 0xF1	; 241
     e30:	d0 e0       	ldi	r29, 0x00	; 0
     e32:	03 c0       	rjmp	.+6      	; 0xe3a <__vector_11+0xca>
     e34:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
     e36:	99 f6       	brne	.-90     	; 0xdde <__vector_11+0x6e>
     e38:	cb cf       	rjmp	.-106    	; 0xdd0 <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
     e3a:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
     e3c:	98 2f       	mov	r25, r24
     e3e:	95 70       	andi	r25, 0x05	; 5
     e40:	e1 f3       	breq	.-8      	; 0xe3a <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
     e42:	82 fd       	sbrc	r24, 2
     e44:	03 c1       	rjmp	.+518    	; 0x104c <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     e46:	32 2f       	mov	r19, r18
     e48:	21 31       	cpi	r18, 0x11	; 17
     e4a:	08 f0       	brcs	.+2      	; 0xe4e <__vector_11+0xde>
     e4c:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
     e4e:	33 23       	and	r19, r19
     e50:	09 f4       	brne	.+2      	; 0xe54 <__vector_11+0xe4>
     e52:	f9 c0       	rjmp	.+498    	; 0x1046 <__vector_11+0x2d6>
     e54:	fa 01       	movw	r30, r20
     e56:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
     e58:	94 91       	lpm	r25, Z
     e5a:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
     e5c:	81 50       	subi	r24, 0x01	; 1
     e5e:	31 96       	adiw	r30, 0x01	; 1
     e60:	81 11       	cpse	r24, r1
     e62:	fa cf       	rjmp	.-12     	; 0xe58 <__vector_11+0xe8>
     e64:	8f ef       	ldi	r24, 0xFF	; 255
     e66:	83 0f       	add	r24, r19
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	01 96       	adiw	r24, 0x01	; 1
     e6c:	48 0f       	add	r20, r24
     e6e:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
     e70:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     e72:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
     e74:	21 11       	cpse	r18, r1
     e76:	e1 cf       	rjmp	.-62     	; 0xe3a <__vector_11+0xca>
     e78:	30 31       	cpi	r19, 0x10	; 16
     e7a:	f9 f2       	breq	.-66     	; 0xe3a <__vector_11+0xca>
     e7c:	e7 c0       	rjmp	.+462    	; 0x104c <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
     e7e:	85 30       	cpi	r24, 0x05	; 5
     e80:	61 f4       	brne	.+24     	; 0xe9a <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     e82:	8e ef       	ldi	r24, 0xFE	; 254
     e84:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     e88:	e8 ee       	ldi	r30, 0xE8	; 232
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	80 ff       	sbrs	r24, 0
     e90:	fd cf       	rjmp	.-6      	; 0xe8c <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
     e92:	20 68       	ori	r18, 0x80	; 128
     e94:	20 93 e3 00 	sts	0x00E3, r18
			return;
     e98:	d9 c0       	rjmp	.+434    	; 0x104c <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
     e9a:	89 30       	cpi	r24, 0x09	; 9
     e9c:	09 f0       	breq	.+2      	; 0xea0 <__vector_11+0x130>
     e9e:	35 c0       	rjmp	.+106    	; 0xf0a <__vector_11+0x19a>
     ea0:	61 11       	cpse	r22, r1
     ea2:	cd c0       	rjmp	.+410    	; 0x103e <__vector_11+0x2ce>
			usb_configuration = wValue;
     ea4:	20 93 3b 01 	sts	0x013B, r18
			cdc_line_rtsdtr = 0;
     ea8:	10 92 38 01 	sts	0x0138, r1
			transmit_flush_timer = 0;
     eac:	10 92 3a 01 	sts	0x013A, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     eb0:	8e ef       	ldi	r24, 0xFE	; 254
     eb2:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     eb6:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
     eb8:	2f e5       	ldi	r18, 0x5F	; 95
     eba:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
     ebc:	c9 ee       	ldi	r28, 0xE9	; 233
     ebe:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
     ec0:	ab ee       	ldi	r26, 0xEB	; 235
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
     ec4:	0c ee       	ldi	r16, 0xEC	; 236
     ec6:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
     ec8:	6d ee       	ldi	r22, 0xED	; 237
     eca:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
     ecc:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
     ece:	a9 01       	movw	r20, r18
     ed0:	4f 5f       	subi	r20, 0xFF	; 255
     ed2:	5f 4f       	sbci	r21, 0xFF	; 255
     ed4:	f9 01       	movw	r30, r18
     ed6:	94 91       	lpm	r25, Z
				UECONX = en;
     ed8:	9c 93       	st	X, r25
				if (en) {
     eda:	99 23       	and	r25, r25
     edc:	61 f0       	breq	.+24     	; 0xef6 <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
     ede:	fa 01       	movw	r30, r20
     ee0:	44 91       	lpm	r20, Z
     ee2:	f8 01       	movw	r30, r16
     ee4:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
     ee6:	f9 01       	movw	r30, r18
     ee8:	32 96       	adiw	r30, 0x02	; 2
     eea:	94 91       	lpm	r25, Z
     eec:	2d 5f       	subi	r18, 0xFD	; 253
     eee:	3f 4f       	sbci	r19, 0xFF	; 255
     ef0:	fb 01       	movw	r30, r22
     ef2:	90 83       	st	Z, r25
     ef4:	01 c0       	rjmp	.+2      	; 0xef8 <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
     ef6:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     ef8:	8f 5f       	subi	r24, 0xFF	; 255
     efa:	85 30       	cpi	r24, 0x05	; 5
     efc:	39 f7       	brne	.-50     	; 0xecc <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
     efe:	ea ee       	ldi	r30, 0xEA	; 234
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	8e e1       	ldi	r24, 0x1E	; 30
     f04:	80 83       	st	Z, r24
        		UERST = 0;
     f06:	10 82       	st	Z, r1
			return;
     f08:	a1 c0       	rjmp	.+322    	; 0x104c <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
     f0a:	88 30       	cpi	r24, 0x08	; 8
     f0c:	81 f4       	brne	.+32     	; 0xf2e <__vector_11+0x1be>
     f0e:	60 38       	cpi	r22, 0x80	; 128
     f10:	09 f0       	breq	.+2      	; 0xf14 <__vector_11+0x1a4>
     f12:	95 c0       	rjmp	.+298    	; 0x103e <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     f14:	e8 ee       	ldi	r30, 0xE8	; 232
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	80 ff       	sbrs	r24, 0
     f1c:	fd cf       	rjmp	.-6      	; 0xf18 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
     f1e:	80 91 3b 01 	lds	r24, 0x013B
     f22:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     f26:	8e ef       	ldi	r24, 0xFE	; 254
     f28:	80 93 e8 00 	sts	0x00E8, r24
     f2c:	8f c0       	rjmp	.+286    	; 0x104c <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
     f2e:	81 32       	cpi	r24, 0x21	; 33
     f30:	b9 f4       	brne	.+46     	; 0xf60 <__vector_11+0x1f0>
     f32:	61 3a       	cpi	r22, 0xA1	; 161
     f34:	09 f0       	breq	.+2      	; 0xf38 <__vector_11+0x1c8>
     f36:	83 c0       	rjmp	.+262    	; 0x103e <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     f38:	e8 ee       	ldi	r30, 0xE8	; 232
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	80 ff       	sbrs	r24, 0
     f40:	fd cf       	rjmp	.-6      	; 0xf3c <__vector_11+0x1cc>
     f42:	e6 e0       	ldi	r30, 0x06	; 6
     f44:	f1 e0       	ldi	r31, 0x01	; 1
     f46:	2d e0       	ldi	r18, 0x0D	; 13
     f48:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
     f4a:	a1 ef       	ldi	r26, 0xF1	; 241
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	81 91       	ld	r24, Z+
     f50:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     f52:	e2 17       	cp	r30, r18
     f54:	f3 07       	cpc	r31, r19
     f56:	d9 f7       	brne	.-10     	; 0xf4e <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     f58:	8e ef       	ldi	r24, 0xFE	; 254
     f5a:	80 93 e8 00 	sts	0x00E8, r24
     f5e:	76 c0       	rjmp	.+236    	; 0x104c <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
     f60:	80 32       	cpi	r24, 0x20	; 32
     f62:	d1 f4       	brne	.+52     	; 0xf98 <__vector_11+0x228>
     f64:	61 32       	cpi	r22, 0x21	; 33
     f66:	09 f0       	breq	.+2      	; 0xf6a <__vector_11+0x1fa>
     f68:	6a c0       	rjmp	.+212    	; 0x103e <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
     f6a:	e8 ee       	ldi	r30, 0xE8	; 232
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	82 ff       	sbrs	r24, 2
     f72:	fd cf       	rjmp	.-6      	; 0xf6e <__vector_11+0x1fe>
     f74:	e6 e0       	ldi	r30, 0x06	; 6
     f76:	f1 e0       	ldi	r31, 0x01	; 1
     f78:	2d e0       	ldi	r18, 0x0D	; 13
     f7a:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
     f7c:	a1 ef       	ldi	r26, 0xF1	; 241
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	8c 91       	ld	r24, X
     f82:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     f84:	e2 17       	cp	r30, r18
     f86:	f3 07       	cpc	r31, r19
     f88:	d9 f7       	brne	.-10     	; 0xf80 <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
     f8a:	e8 ee       	ldi	r30, 0xE8	; 232
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	8b ef       	ldi	r24, 0xFB	; 251
     f90:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     f92:	8e ef       	ldi	r24, 0xFE	; 254
     f94:	80 83       	st	Z, r24
     f96:	5a c0       	rjmp	.+180    	; 0x104c <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
     f98:	82 32       	cpi	r24, 0x22	; 34
     f9a:	71 f4       	brne	.+28     	; 0xfb8 <__vector_11+0x248>
     f9c:	61 32       	cpi	r22, 0x21	; 33
     f9e:	09 f0       	breq	.+2      	; 0xfa2 <__vector_11+0x232>
     fa0:	4e c0       	rjmp	.+156    	; 0x103e <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
     fa2:	20 93 38 01 	sts	0x0138, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     fa6:	e8 ee       	ldi	r30, 0xE8	; 232
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	80 ff       	sbrs	r24, 0
     fae:	fd cf       	rjmp	.-6      	; 0xfaa <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     fb0:	8e ef       	ldi	r24, 0xFE	; 254
     fb2:	80 93 e8 00 	sts	0x00E8, r24
     fb6:	4a c0       	rjmp	.+148    	; 0x104c <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
     fb8:	81 11       	cpse	r24, r1
     fba:	1a c0       	rjmp	.+52     	; 0xff0 <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     fbc:	e8 ee       	ldi	r30, 0xE8	; 232
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	80 ff       	sbrs	r24, 0
     fc4:	fd cf       	rjmp	.-6      	; 0xfc0 <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
     fc6:	62 38       	cpi	r22, 0x82	; 130
     fc8:	51 f4       	brne	.+20     	; 0xfde <__vector_11+0x26e>
				UENUM = wIndex;
     fca:	e9 ee       	ldi	r30, 0xE9	; 233
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
     fd0:	80 91 eb 00 	lds	r24, 0x00EB
     fd4:	85 fb       	bst	r24, 5
     fd6:	88 27       	eor	r24, r24
     fd8:	80 f9       	bld	r24, 0
				UENUM = 0;
     fda:	10 82       	st	Z, r1
     fdc:	01 c0       	rjmp	.+2      	; 0xfe0 <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
     fde:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
     fe0:	e1 ef       	ldi	r30, 0xF1	; 241
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 83       	st	Z, r24
			UEDATX = 0;
     fe6:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     fe8:	8e ef       	ldi	r24, 0xFE	; 254
     fea:	80 93 e8 00 	sts	0x00E8, r24
     fee:	2e c0       	rjmp	.+92     	; 0x104c <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
     ff0:	98 2f       	mov	r25, r24
     ff2:	9d 7f       	andi	r25, 0xFD	; 253
     ff4:	91 30       	cpi	r25, 0x01	; 1
     ff6:	19 f5       	brne	.+70     	; 0x103e <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
     ff8:	62 30       	cpi	r22, 0x02	; 2
     ffa:	09 f5       	brne	.+66     	; 0x103e <__vector_11+0x2ce>
     ffc:	23 2b       	or	r18, r19
     ffe:	f9 f4       	brne	.+62     	; 0x103e <__vector_11+0x2ce>
			i = wIndex & 0x7F;
    1000:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    1002:	9f ef       	ldi	r25, 0xFF	; 255
    1004:	94 0f       	add	r25, r20
    1006:	94 30       	cpi	r25, 0x04	; 4
    1008:	d0 f4       	brcc	.+52     	; 0x103e <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    100a:	9e ef       	ldi	r25, 0xFE	; 254
    100c:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    1010:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
    1014:	83 30       	cpi	r24, 0x03	; 3
    1016:	21 f4       	brne	.+8      	; 0x1020 <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    1018:	81 e2       	ldi	r24, 0x21	; 33
    101a:	80 93 eb 00 	sts	0x00EB, r24
    101e:	16 c0       	rjmp	.+44     	; 0x104c <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    1020:	89 e1       	ldi	r24, 0x19	; 25
    1022:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <__vector_11+0x2c0>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	4a 95       	dec	r20
    1032:	e2 f7       	brpl	.-8      	; 0x102c <__vector_11+0x2bc>
    1034:	ea ee       	ldi	r30, 0xEA	; 234
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 83       	st	Z, r24
					UERST = 0;
    103a:	10 82       	st	Z, r1
    103c:	07 c0       	rjmp	.+14     	; 0x104c <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    103e:	81 e2       	ldi	r24, 0x21	; 33
    1040:	80 93 eb 00 	sts	0x00EB, r24
    1044:	03 c0       	rjmp	.+6      	; 0x104c <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1046:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1048:	21 11       	cpse	r18, r1
    104a:	f7 ce       	rjmp	.-530    	; 0xe3a <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    104c:	ff 91       	pop	r31
    104e:	ef 91       	pop	r30
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	bf 91       	pop	r27
    1056:	af 91       	pop	r26
    1058:	9f 91       	pop	r25
    105a:	8f 91       	pop	r24
    105c:	7f 91       	pop	r23
    105e:	6f 91       	pop	r22
    1060:	5f 91       	pop	r21
    1062:	4f 91       	pop	r20
    1064:	3f 91       	pop	r19
    1066:	2f 91       	pop	r18
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	0f 90       	pop	r0
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	0f 90       	pop	r0
    1072:	1f 90       	pop	r1
    1074:	18 95       	reti

00001076 <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
    1076:	0f 93       	push	r16
    1078:	1f 93       	push	r17
    107a:	cf 93       	push	r28
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    107c:	8c 01       	movw	r16, r24
    107e:	0f 5f       	subi	r16, 0xFF	; 255
    1080:	1f 4f       	sbci	r17, 0xFF	; 255
    1082:	fc 01       	movw	r30, r24
    1084:	c4 91       	lpm	r28, Z
		if (!c) break;
    1086:	cc 23       	and	r28, r28
    1088:	71 f0       	breq	.+28     	; 0x10a6 <print_P+0x30>
		if (c == '\n') usb_tx_char('\r');
    108a:	ca 30       	cpi	r28, 0x0A	; 10
    108c:	19 f4       	brne	.+6      	; 0x1094 <print_P+0x1e>
    108e:	8d e0       	ldi	r24, 0x0D	; 13
    1090:	0e 94 1f 06 	call	0xc3e	; 0xc3e <m_usb_tx_char>
		usb_tx_char(c);
    1094:	8c 2f       	mov	r24, r28
    1096:	0e 94 1f 06 	call	0xc3e	; 0xc3e <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    109a:	f8 01       	movw	r30, r16
    109c:	c4 91       	lpm	r28, Z
    109e:	0f 5f       	subi	r16, 0xFF	; 255
    10a0:	1f 4f       	sbci	r17, 0xFF	; 255
		if (!c) break;
    10a2:	c1 11       	cpse	r28, r1
    10a4:	f2 cf       	rjmp	.-28     	; 0x108a <print_P+0x14>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
    10a6:	cf 91       	pop	r28
    10a8:	1f 91       	pop	r17
    10aa:	0f 91       	pop	r16
    10ac:	08 95       	ret

000010ae <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    10ae:	ef 92       	push	r14
    10b0:	ff 92       	push	r15
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	27 97       	sbiw	r28, 0x07	; 7
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    10ca:	8e 01       	movw	r16, r28
    10cc:	0f 5f       	subi	r16, 0xFF	; 255
    10ce:	1f 4f       	sbci	r17, 0xFF	; 255
    10d0:	27 e0       	ldi	r18, 0x07	; 7
    10d2:	f8 01       	movw	r30, r16
    10d4:	11 92       	st	Z+, r1
    10d6:	2a 95       	dec	r18
    10d8:	e9 f7       	brne	.-6      	; 0x10d4 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    10da:	4a e0       	ldi	r20, 0x0A	; 10
    10dc:	b8 01       	movw	r22, r16
    10de:	0e 94 1f 0b 	call	0x163e	; 0x163e <__itoa_ncheck>
    10e2:	7e 01       	movw	r14, r28
    10e4:	f8 e0       	ldi	r31, 0x08	; 8
    10e6:	ef 0e       	add	r14, r31
    10e8:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    10ea:	f8 01       	movw	r30, r16
    10ec:	81 91       	ld	r24, Z+
    10ee:	8f 01       	movw	r16, r30
    10f0:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    10f2:	0e 94 1f 06 	call	0xc3e	; 0xc3e <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    10f6:	0e 15       	cp	r16, r14
    10f8:	1f 05       	cpc	r17, r15
    10fa:	b9 f7       	brne	.-18     	; 0x10ea <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    10fc:	27 96       	adiw	r28, 0x07	; 7
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	1f 91       	pop	r17
    110e:	0f 91       	pop	r16
    1110:	ff 90       	pop	r15
    1112:	ef 90       	pop	r14
    1114:	08 95       	ret

00001116 <__subsf3>:
    1116:	50 58       	subi	r21, 0x80	; 128

00001118 <__addsf3>:
    1118:	bb 27       	eor	r27, r27
    111a:	aa 27       	eor	r26, r26
    111c:	0e 94 a3 08 	call	0x1146	; 0x1146 <__addsf3x>
    1120:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <__fp_round>
    1124:	0e 94 0f 0a 	call	0x141e	; 0x141e <__fp_pscA>
    1128:	38 f0       	brcs	.+14     	; 0x1138 <__addsf3+0x20>
    112a:	0e 94 16 0a 	call	0x142c	; 0x142c <__fp_pscB>
    112e:	20 f0       	brcs	.+8      	; 0x1138 <__addsf3+0x20>
    1130:	39 f4       	brne	.+14     	; 0x1140 <__addsf3+0x28>
    1132:	9f 3f       	cpi	r25, 0xFF	; 255
    1134:	19 f4       	brne	.+6      	; 0x113c <__addsf3+0x24>
    1136:	26 f4       	brtc	.+8      	; 0x1140 <__addsf3+0x28>
    1138:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__fp_nan>
    113c:	0e f4       	brtc	.+2      	; 0x1140 <__addsf3+0x28>
    113e:	e0 95       	com	r30
    1140:	e7 fb       	bst	r30, 7
    1142:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__fp_inf>

00001146 <__addsf3x>:
    1146:	e9 2f       	mov	r30, r25
    1148:	0e 94 2e 0a 	call	0x145c	; 0x145c <__fp_split3>
    114c:	58 f3       	brcs	.-42     	; 0x1124 <__addsf3+0xc>
    114e:	ba 17       	cp	r27, r26
    1150:	62 07       	cpc	r22, r18
    1152:	73 07       	cpc	r23, r19
    1154:	84 07       	cpc	r24, r20
    1156:	95 07       	cpc	r25, r21
    1158:	20 f0       	brcs	.+8      	; 0x1162 <__addsf3x+0x1c>
    115a:	79 f4       	brne	.+30     	; 0x117a <__addsf3x+0x34>
    115c:	a6 f5       	brtc	.+104    	; 0x11c6 <__addsf3x+0x80>
    115e:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__fp_zero>
    1162:	0e f4       	brtc	.+2      	; 0x1166 <__addsf3x+0x20>
    1164:	e0 95       	com	r30
    1166:	0b 2e       	mov	r0, r27
    1168:	ba 2f       	mov	r27, r26
    116a:	a0 2d       	mov	r26, r0
    116c:	0b 01       	movw	r0, r22
    116e:	b9 01       	movw	r22, r18
    1170:	90 01       	movw	r18, r0
    1172:	0c 01       	movw	r0, r24
    1174:	ca 01       	movw	r24, r20
    1176:	a0 01       	movw	r20, r0
    1178:	11 24       	eor	r1, r1
    117a:	ff 27       	eor	r31, r31
    117c:	59 1b       	sub	r21, r25
    117e:	99 f0       	breq	.+38     	; 0x11a6 <__addsf3x+0x60>
    1180:	59 3f       	cpi	r21, 0xF9	; 249
    1182:	50 f4       	brcc	.+20     	; 0x1198 <__addsf3x+0x52>
    1184:	50 3e       	cpi	r21, 0xE0	; 224
    1186:	68 f1       	brcs	.+90     	; 0x11e2 <__addsf3x+0x9c>
    1188:	1a 16       	cp	r1, r26
    118a:	f0 40       	sbci	r31, 0x00	; 0
    118c:	a2 2f       	mov	r26, r18
    118e:	23 2f       	mov	r18, r19
    1190:	34 2f       	mov	r19, r20
    1192:	44 27       	eor	r20, r20
    1194:	58 5f       	subi	r21, 0xF8	; 248
    1196:	f3 cf       	rjmp	.-26     	; 0x117e <__addsf3x+0x38>
    1198:	46 95       	lsr	r20
    119a:	37 95       	ror	r19
    119c:	27 95       	ror	r18
    119e:	a7 95       	ror	r26
    11a0:	f0 40       	sbci	r31, 0x00	; 0
    11a2:	53 95       	inc	r21
    11a4:	c9 f7       	brne	.-14     	; 0x1198 <__addsf3x+0x52>
    11a6:	7e f4       	brtc	.+30     	; 0x11c6 <__addsf3x+0x80>
    11a8:	1f 16       	cp	r1, r31
    11aa:	ba 0b       	sbc	r27, r26
    11ac:	62 0b       	sbc	r22, r18
    11ae:	73 0b       	sbc	r23, r19
    11b0:	84 0b       	sbc	r24, r20
    11b2:	ba f0       	brmi	.+46     	; 0x11e2 <__addsf3x+0x9c>
    11b4:	91 50       	subi	r25, 0x01	; 1
    11b6:	a1 f0       	breq	.+40     	; 0x11e0 <__addsf3x+0x9a>
    11b8:	ff 0f       	add	r31, r31
    11ba:	bb 1f       	adc	r27, r27
    11bc:	66 1f       	adc	r22, r22
    11be:	77 1f       	adc	r23, r23
    11c0:	88 1f       	adc	r24, r24
    11c2:	c2 f7       	brpl	.-16     	; 0x11b4 <__addsf3x+0x6e>
    11c4:	0e c0       	rjmp	.+28     	; 0x11e2 <__addsf3x+0x9c>
    11c6:	ba 0f       	add	r27, r26
    11c8:	62 1f       	adc	r22, r18
    11ca:	73 1f       	adc	r23, r19
    11cc:	84 1f       	adc	r24, r20
    11ce:	48 f4       	brcc	.+18     	; 0x11e2 <__addsf3x+0x9c>
    11d0:	87 95       	ror	r24
    11d2:	77 95       	ror	r23
    11d4:	67 95       	ror	r22
    11d6:	b7 95       	ror	r27
    11d8:	f7 95       	ror	r31
    11da:	9e 3f       	cpi	r25, 0xFE	; 254
    11dc:	08 f0       	brcs	.+2      	; 0x11e0 <__addsf3x+0x9a>
    11de:	b0 cf       	rjmp	.-160    	; 0x1140 <__addsf3+0x28>
    11e0:	93 95       	inc	r25
    11e2:	88 0f       	add	r24, r24
    11e4:	08 f0       	brcs	.+2      	; 0x11e8 <__addsf3x+0xa2>
    11e6:	99 27       	eor	r25, r25
    11e8:	ee 0f       	add	r30, r30
    11ea:	97 95       	ror	r25
    11ec:	87 95       	ror	r24
    11ee:	08 95       	ret

000011f0 <__cmpsf2>:
    11f0:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__fp_cmp>
    11f4:	08 f4       	brcc	.+2      	; 0x11f8 <__cmpsf2+0x8>
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	08 95       	ret

000011fa <__divsf3>:
    11fa:	0e 94 11 09 	call	0x1222	; 0x1222 <__divsf3x>
    11fe:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <__fp_round>
    1202:	0e 94 16 0a 	call	0x142c	; 0x142c <__fp_pscB>
    1206:	58 f0       	brcs	.+22     	; 0x121e <__divsf3+0x24>
    1208:	0e 94 0f 0a 	call	0x141e	; 0x141e <__fp_pscA>
    120c:	40 f0       	brcs	.+16     	; 0x121e <__divsf3+0x24>
    120e:	29 f4       	brne	.+10     	; 0x121a <__divsf3+0x20>
    1210:	5f 3f       	cpi	r21, 0xFF	; 255
    1212:	29 f0       	breq	.+10     	; 0x121e <__divsf3+0x24>
    1214:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__fp_inf>
    1218:	51 11       	cpse	r21, r1
    121a:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__fp_szero>
    121e:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__fp_nan>

00001222 <__divsf3x>:
    1222:	0e 94 2e 0a 	call	0x145c	; 0x145c <__fp_split3>
    1226:	68 f3       	brcs	.-38     	; 0x1202 <__divsf3+0x8>

00001228 <__divsf3_pse>:
    1228:	99 23       	and	r25, r25
    122a:	b1 f3       	breq	.-20     	; 0x1218 <__divsf3+0x1e>
    122c:	55 23       	and	r21, r21
    122e:	91 f3       	breq	.-28     	; 0x1214 <__divsf3+0x1a>
    1230:	95 1b       	sub	r25, r21
    1232:	55 0b       	sbc	r21, r21
    1234:	bb 27       	eor	r27, r27
    1236:	aa 27       	eor	r26, r26
    1238:	62 17       	cp	r22, r18
    123a:	73 07       	cpc	r23, r19
    123c:	84 07       	cpc	r24, r20
    123e:	38 f0       	brcs	.+14     	; 0x124e <__divsf3_pse+0x26>
    1240:	9f 5f       	subi	r25, 0xFF	; 255
    1242:	5f 4f       	sbci	r21, 0xFF	; 255
    1244:	22 0f       	add	r18, r18
    1246:	33 1f       	adc	r19, r19
    1248:	44 1f       	adc	r20, r20
    124a:	aa 1f       	adc	r26, r26
    124c:	a9 f3       	breq	.-22     	; 0x1238 <__divsf3_pse+0x10>
    124e:	35 d0       	rcall	.+106    	; 0x12ba <__divsf3_pse+0x92>
    1250:	0e 2e       	mov	r0, r30
    1252:	3a f0       	brmi	.+14     	; 0x1262 <__divsf3_pse+0x3a>
    1254:	e0 e8       	ldi	r30, 0x80	; 128
    1256:	32 d0       	rcall	.+100    	; 0x12bc <__divsf3_pse+0x94>
    1258:	91 50       	subi	r25, 0x01	; 1
    125a:	50 40       	sbci	r21, 0x00	; 0
    125c:	e6 95       	lsr	r30
    125e:	00 1c       	adc	r0, r0
    1260:	ca f7       	brpl	.-14     	; 0x1254 <__divsf3_pse+0x2c>
    1262:	2b d0       	rcall	.+86     	; 0x12ba <__divsf3_pse+0x92>
    1264:	fe 2f       	mov	r31, r30
    1266:	29 d0       	rcall	.+82     	; 0x12ba <__divsf3_pse+0x92>
    1268:	66 0f       	add	r22, r22
    126a:	77 1f       	adc	r23, r23
    126c:	88 1f       	adc	r24, r24
    126e:	bb 1f       	adc	r27, r27
    1270:	26 17       	cp	r18, r22
    1272:	37 07       	cpc	r19, r23
    1274:	48 07       	cpc	r20, r24
    1276:	ab 07       	cpc	r26, r27
    1278:	b0 e8       	ldi	r27, 0x80	; 128
    127a:	09 f0       	breq	.+2      	; 0x127e <__divsf3_pse+0x56>
    127c:	bb 0b       	sbc	r27, r27
    127e:	80 2d       	mov	r24, r0
    1280:	bf 01       	movw	r22, r30
    1282:	ff 27       	eor	r31, r31
    1284:	93 58       	subi	r25, 0x83	; 131
    1286:	5f 4f       	sbci	r21, 0xFF	; 255
    1288:	3a f0       	brmi	.+14     	; 0x1298 <__divsf3_pse+0x70>
    128a:	9e 3f       	cpi	r25, 0xFE	; 254
    128c:	51 05       	cpc	r21, r1
    128e:	78 f0       	brcs	.+30     	; 0x12ae <__divsf3_pse+0x86>
    1290:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__fp_inf>
    1294:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__fp_szero>
    1298:	5f 3f       	cpi	r21, 0xFF	; 255
    129a:	e4 f3       	brlt	.-8      	; 0x1294 <__divsf3_pse+0x6c>
    129c:	98 3e       	cpi	r25, 0xE8	; 232
    129e:	d4 f3       	brlt	.-12     	; 0x1294 <__divsf3_pse+0x6c>
    12a0:	86 95       	lsr	r24
    12a2:	77 95       	ror	r23
    12a4:	67 95       	ror	r22
    12a6:	b7 95       	ror	r27
    12a8:	f7 95       	ror	r31
    12aa:	9f 5f       	subi	r25, 0xFF	; 255
    12ac:	c9 f7       	brne	.-14     	; 0x12a0 <__divsf3_pse+0x78>
    12ae:	88 0f       	add	r24, r24
    12b0:	91 1d       	adc	r25, r1
    12b2:	96 95       	lsr	r25
    12b4:	87 95       	ror	r24
    12b6:	97 f9       	bld	r25, 7
    12b8:	08 95       	ret
    12ba:	e1 e0       	ldi	r30, 0x01	; 1
    12bc:	66 0f       	add	r22, r22
    12be:	77 1f       	adc	r23, r23
    12c0:	88 1f       	adc	r24, r24
    12c2:	bb 1f       	adc	r27, r27
    12c4:	62 17       	cp	r22, r18
    12c6:	73 07       	cpc	r23, r19
    12c8:	84 07       	cpc	r24, r20
    12ca:	ba 07       	cpc	r27, r26
    12cc:	20 f0       	brcs	.+8      	; 0x12d6 <__divsf3_pse+0xae>
    12ce:	62 1b       	sub	r22, r18
    12d0:	73 0b       	sbc	r23, r19
    12d2:	84 0b       	sbc	r24, r20
    12d4:	ba 0b       	sbc	r27, r26
    12d6:	ee 1f       	adc	r30, r30
    12d8:	88 f7       	brcc	.-30     	; 0x12bc <__divsf3_pse+0x94>
    12da:	e0 95       	com	r30
    12dc:	08 95       	ret

000012de <__fixsfsi>:
    12de:	0e 94 76 09 	call	0x12ec	; 0x12ec <__fixunssfsi>
    12e2:	68 94       	set
    12e4:	b1 11       	cpse	r27, r1
    12e6:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__fp_szero>
    12ea:	08 95       	ret

000012ec <__fixunssfsi>:
    12ec:	0e 94 36 0a 	call	0x146c	; 0x146c <__fp_splitA>
    12f0:	88 f0       	brcs	.+34     	; 0x1314 <__fixunssfsi+0x28>
    12f2:	9f 57       	subi	r25, 0x7F	; 127
    12f4:	98 f0       	brcs	.+38     	; 0x131c <__fixunssfsi+0x30>
    12f6:	b9 2f       	mov	r27, r25
    12f8:	99 27       	eor	r25, r25
    12fa:	b7 51       	subi	r27, 0x17	; 23
    12fc:	b0 f0       	brcs	.+44     	; 0x132a <__fixunssfsi+0x3e>
    12fe:	e1 f0       	breq	.+56     	; 0x1338 <__fixunssfsi+0x4c>
    1300:	66 0f       	add	r22, r22
    1302:	77 1f       	adc	r23, r23
    1304:	88 1f       	adc	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	1a f0       	brmi	.+6      	; 0x1310 <__fixunssfsi+0x24>
    130a:	ba 95       	dec	r27
    130c:	c9 f7       	brne	.-14     	; 0x1300 <__fixunssfsi+0x14>
    130e:	14 c0       	rjmp	.+40     	; 0x1338 <__fixunssfsi+0x4c>
    1310:	b1 30       	cpi	r27, 0x01	; 1
    1312:	91 f0       	breq	.+36     	; 0x1338 <__fixunssfsi+0x4c>
    1314:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__fp_zero>
    1318:	b1 e0       	ldi	r27, 0x01	; 1
    131a:	08 95       	ret
    131c:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__fp_zero>
    1320:	67 2f       	mov	r22, r23
    1322:	78 2f       	mov	r23, r24
    1324:	88 27       	eor	r24, r24
    1326:	b8 5f       	subi	r27, 0xF8	; 248
    1328:	39 f0       	breq	.+14     	; 0x1338 <__fixunssfsi+0x4c>
    132a:	b9 3f       	cpi	r27, 0xF9	; 249
    132c:	cc f3       	brlt	.-14     	; 0x1320 <__fixunssfsi+0x34>
    132e:	86 95       	lsr	r24
    1330:	77 95       	ror	r23
    1332:	67 95       	ror	r22
    1334:	b3 95       	inc	r27
    1336:	d9 f7       	brne	.-10     	; 0x132e <__fixunssfsi+0x42>
    1338:	3e f4       	brtc	.+14     	; 0x1348 <__fixunssfsi+0x5c>
    133a:	90 95       	com	r25
    133c:	80 95       	com	r24
    133e:	70 95       	com	r23
    1340:	61 95       	neg	r22
    1342:	7f 4f       	sbci	r23, 0xFF	; 255
    1344:	8f 4f       	sbci	r24, 0xFF	; 255
    1346:	9f 4f       	sbci	r25, 0xFF	; 255
    1348:	08 95       	ret

0000134a <__floatunsisf>:
    134a:	e8 94       	clt
    134c:	09 c0       	rjmp	.+18     	; 0x1360 <__floatsisf+0x12>

0000134e <__floatsisf>:
    134e:	97 fb       	bst	r25, 7
    1350:	3e f4       	brtc	.+14     	; 0x1360 <__floatsisf+0x12>
    1352:	90 95       	com	r25
    1354:	80 95       	com	r24
    1356:	70 95       	com	r23
    1358:	61 95       	neg	r22
    135a:	7f 4f       	sbci	r23, 0xFF	; 255
    135c:	8f 4f       	sbci	r24, 0xFF	; 255
    135e:	9f 4f       	sbci	r25, 0xFF	; 255
    1360:	99 23       	and	r25, r25
    1362:	a9 f0       	breq	.+42     	; 0x138e <__floatsisf+0x40>
    1364:	f9 2f       	mov	r31, r25
    1366:	96 e9       	ldi	r25, 0x96	; 150
    1368:	bb 27       	eor	r27, r27
    136a:	93 95       	inc	r25
    136c:	f6 95       	lsr	r31
    136e:	87 95       	ror	r24
    1370:	77 95       	ror	r23
    1372:	67 95       	ror	r22
    1374:	b7 95       	ror	r27
    1376:	f1 11       	cpse	r31, r1
    1378:	f8 cf       	rjmp	.-16     	; 0x136a <__floatsisf+0x1c>
    137a:	fa f4       	brpl	.+62     	; 0x13ba <__floatsisf+0x6c>
    137c:	bb 0f       	add	r27, r27
    137e:	11 f4       	brne	.+4      	; 0x1384 <__floatsisf+0x36>
    1380:	60 ff       	sbrs	r22, 0
    1382:	1b c0       	rjmp	.+54     	; 0x13ba <__floatsisf+0x6c>
    1384:	6f 5f       	subi	r22, 0xFF	; 255
    1386:	7f 4f       	sbci	r23, 0xFF	; 255
    1388:	8f 4f       	sbci	r24, 0xFF	; 255
    138a:	9f 4f       	sbci	r25, 0xFF	; 255
    138c:	16 c0       	rjmp	.+44     	; 0x13ba <__floatsisf+0x6c>
    138e:	88 23       	and	r24, r24
    1390:	11 f0       	breq	.+4      	; 0x1396 <__floatsisf+0x48>
    1392:	96 e9       	ldi	r25, 0x96	; 150
    1394:	11 c0       	rjmp	.+34     	; 0x13b8 <__floatsisf+0x6a>
    1396:	77 23       	and	r23, r23
    1398:	21 f0       	breq	.+8      	; 0x13a2 <__floatsisf+0x54>
    139a:	9e e8       	ldi	r25, 0x8E	; 142
    139c:	87 2f       	mov	r24, r23
    139e:	76 2f       	mov	r23, r22
    13a0:	05 c0       	rjmp	.+10     	; 0x13ac <__floatsisf+0x5e>
    13a2:	66 23       	and	r22, r22
    13a4:	71 f0       	breq	.+28     	; 0x13c2 <__floatsisf+0x74>
    13a6:	96 e8       	ldi	r25, 0x86	; 134
    13a8:	86 2f       	mov	r24, r22
    13aa:	70 e0       	ldi	r23, 0x00	; 0
    13ac:	60 e0       	ldi	r22, 0x00	; 0
    13ae:	2a f0       	brmi	.+10     	; 0x13ba <__floatsisf+0x6c>
    13b0:	9a 95       	dec	r25
    13b2:	66 0f       	add	r22, r22
    13b4:	77 1f       	adc	r23, r23
    13b6:	88 1f       	adc	r24, r24
    13b8:	da f7       	brpl	.-10     	; 0x13b0 <__floatsisf+0x62>
    13ba:	88 0f       	add	r24, r24
    13bc:	96 95       	lsr	r25
    13be:	87 95       	ror	r24
    13c0:	97 f9       	bld	r25, 7
    13c2:	08 95       	ret

000013c4 <__fp_cmp>:
    13c4:	99 0f       	add	r25, r25
    13c6:	00 08       	sbc	r0, r0
    13c8:	55 0f       	add	r21, r21
    13ca:	aa 0b       	sbc	r26, r26
    13cc:	e0 e8       	ldi	r30, 0x80	; 128
    13ce:	fe ef       	ldi	r31, 0xFE	; 254
    13d0:	16 16       	cp	r1, r22
    13d2:	17 06       	cpc	r1, r23
    13d4:	e8 07       	cpc	r30, r24
    13d6:	f9 07       	cpc	r31, r25
    13d8:	c0 f0       	brcs	.+48     	; 0x140a <__fp_cmp+0x46>
    13da:	12 16       	cp	r1, r18
    13dc:	13 06       	cpc	r1, r19
    13de:	e4 07       	cpc	r30, r20
    13e0:	f5 07       	cpc	r31, r21
    13e2:	98 f0       	brcs	.+38     	; 0x140a <__fp_cmp+0x46>
    13e4:	62 1b       	sub	r22, r18
    13e6:	73 0b       	sbc	r23, r19
    13e8:	84 0b       	sbc	r24, r20
    13ea:	95 0b       	sbc	r25, r21
    13ec:	39 f4       	brne	.+14     	; 0x13fc <__fp_cmp+0x38>
    13ee:	0a 26       	eor	r0, r26
    13f0:	61 f0       	breq	.+24     	; 0x140a <__fp_cmp+0x46>
    13f2:	23 2b       	or	r18, r19
    13f4:	24 2b       	or	r18, r20
    13f6:	25 2b       	or	r18, r21
    13f8:	21 f4       	brne	.+8      	; 0x1402 <__fp_cmp+0x3e>
    13fa:	08 95       	ret
    13fc:	0a 26       	eor	r0, r26
    13fe:	09 f4       	brne	.+2      	; 0x1402 <__fp_cmp+0x3e>
    1400:	a1 40       	sbci	r26, 0x01	; 1
    1402:	a6 95       	lsr	r26
    1404:	8f ef       	ldi	r24, 0xFF	; 255
    1406:	81 1d       	adc	r24, r1
    1408:	81 1d       	adc	r24, r1
    140a:	08 95       	ret

0000140c <__fp_inf>:
    140c:	97 f9       	bld	r25, 7
    140e:	9f 67       	ori	r25, 0x7F	; 127
    1410:	80 e8       	ldi	r24, 0x80	; 128
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	60 e0       	ldi	r22, 0x00	; 0
    1416:	08 95       	ret

00001418 <__fp_nan>:
    1418:	9f ef       	ldi	r25, 0xFF	; 255
    141a:	80 ec       	ldi	r24, 0xC0	; 192
    141c:	08 95       	ret

0000141e <__fp_pscA>:
    141e:	00 24       	eor	r0, r0
    1420:	0a 94       	dec	r0
    1422:	16 16       	cp	r1, r22
    1424:	17 06       	cpc	r1, r23
    1426:	18 06       	cpc	r1, r24
    1428:	09 06       	cpc	r0, r25
    142a:	08 95       	ret

0000142c <__fp_pscB>:
    142c:	00 24       	eor	r0, r0
    142e:	0a 94       	dec	r0
    1430:	12 16       	cp	r1, r18
    1432:	13 06       	cpc	r1, r19
    1434:	14 06       	cpc	r1, r20
    1436:	05 06       	cpc	r0, r21
    1438:	08 95       	ret

0000143a <__fp_round>:
    143a:	09 2e       	mov	r0, r25
    143c:	03 94       	inc	r0
    143e:	00 0c       	add	r0, r0
    1440:	11 f4       	brne	.+4      	; 0x1446 <__fp_round+0xc>
    1442:	88 23       	and	r24, r24
    1444:	52 f0       	brmi	.+20     	; 0x145a <__fp_round+0x20>
    1446:	bb 0f       	add	r27, r27
    1448:	40 f4       	brcc	.+16     	; 0x145a <__fp_round+0x20>
    144a:	bf 2b       	or	r27, r31
    144c:	11 f4       	brne	.+4      	; 0x1452 <__fp_round+0x18>
    144e:	60 ff       	sbrs	r22, 0
    1450:	04 c0       	rjmp	.+8      	; 0x145a <__fp_round+0x20>
    1452:	6f 5f       	subi	r22, 0xFF	; 255
    1454:	7f 4f       	sbci	r23, 0xFF	; 255
    1456:	8f 4f       	sbci	r24, 0xFF	; 255
    1458:	9f 4f       	sbci	r25, 0xFF	; 255
    145a:	08 95       	ret

0000145c <__fp_split3>:
    145c:	57 fd       	sbrc	r21, 7
    145e:	90 58       	subi	r25, 0x80	; 128
    1460:	44 0f       	add	r20, r20
    1462:	55 1f       	adc	r21, r21
    1464:	59 f0       	breq	.+22     	; 0x147c <__fp_splitA+0x10>
    1466:	5f 3f       	cpi	r21, 0xFF	; 255
    1468:	71 f0       	breq	.+28     	; 0x1486 <__fp_splitA+0x1a>
    146a:	47 95       	ror	r20

0000146c <__fp_splitA>:
    146c:	88 0f       	add	r24, r24
    146e:	97 fb       	bst	r25, 7
    1470:	99 1f       	adc	r25, r25
    1472:	61 f0       	breq	.+24     	; 0x148c <__fp_splitA+0x20>
    1474:	9f 3f       	cpi	r25, 0xFF	; 255
    1476:	79 f0       	breq	.+30     	; 0x1496 <__fp_splitA+0x2a>
    1478:	87 95       	ror	r24
    147a:	08 95       	ret
    147c:	12 16       	cp	r1, r18
    147e:	13 06       	cpc	r1, r19
    1480:	14 06       	cpc	r1, r20
    1482:	55 1f       	adc	r21, r21
    1484:	f2 cf       	rjmp	.-28     	; 0x146a <__fp_split3+0xe>
    1486:	46 95       	lsr	r20
    1488:	f1 df       	rcall	.-30     	; 0x146c <__fp_splitA>
    148a:	08 c0       	rjmp	.+16     	; 0x149c <__fp_splitA+0x30>
    148c:	16 16       	cp	r1, r22
    148e:	17 06       	cpc	r1, r23
    1490:	18 06       	cpc	r1, r24
    1492:	99 1f       	adc	r25, r25
    1494:	f1 cf       	rjmp	.-30     	; 0x1478 <__fp_splitA+0xc>
    1496:	86 95       	lsr	r24
    1498:	71 05       	cpc	r23, r1
    149a:	61 05       	cpc	r22, r1
    149c:	08 94       	sec
    149e:	08 95       	ret

000014a0 <__fp_zero>:
    14a0:	e8 94       	clt

000014a2 <__fp_szero>:
    14a2:	bb 27       	eor	r27, r27
    14a4:	66 27       	eor	r22, r22
    14a6:	77 27       	eor	r23, r23
    14a8:	cb 01       	movw	r24, r22
    14aa:	97 f9       	bld	r25, 7
    14ac:	08 95       	ret

000014ae <__mulsf3>:
    14ae:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__mulsf3x>
    14b2:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <__fp_round>
    14b6:	0e 94 0f 0a 	call	0x141e	; 0x141e <__fp_pscA>
    14ba:	38 f0       	brcs	.+14     	; 0x14ca <__mulsf3+0x1c>
    14bc:	0e 94 16 0a 	call	0x142c	; 0x142c <__fp_pscB>
    14c0:	20 f0       	brcs	.+8      	; 0x14ca <__mulsf3+0x1c>
    14c2:	95 23       	and	r25, r21
    14c4:	11 f0       	breq	.+4      	; 0x14ca <__mulsf3+0x1c>
    14c6:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__fp_inf>
    14ca:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__fp_nan>
    14ce:	11 24       	eor	r1, r1
    14d0:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__fp_szero>

000014d4 <__mulsf3x>:
    14d4:	0e 94 2e 0a 	call	0x145c	; 0x145c <__fp_split3>
    14d8:	70 f3       	brcs	.-36     	; 0x14b6 <__mulsf3+0x8>

000014da <__mulsf3_pse>:
    14da:	95 9f       	mul	r25, r21
    14dc:	c1 f3       	breq	.-16     	; 0x14ce <__mulsf3+0x20>
    14de:	95 0f       	add	r25, r21
    14e0:	50 e0       	ldi	r21, 0x00	; 0
    14e2:	55 1f       	adc	r21, r21
    14e4:	62 9f       	mul	r22, r18
    14e6:	f0 01       	movw	r30, r0
    14e8:	72 9f       	mul	r23, r18
    14ea:	bb 27       	eor	r27, r27
    14ec:	f0 0d       	add	r31, r0
    14ee:	b1 1d       	adc	r27, r1
    14f0:	63 9f       	mul	r22, r19
    14f2:	aa 27       	eor	r26, r26
    14f4:	f0 0d       	add	r31, r0
    14f6:	b1 1d       	adc	r27, r1
    14f8:	aa 1f       	adc	r26, r26
    14fa:	64 9f       	mul	r22, r20
    14fc:	66 27       	eor	r22, r22
    14fe:	b0 0d       	add	r27, r0
    1500:	a1 1d       	adc	r26, r1
    1502:	66 1f       	adc	r22, r22
    1504:	82 9f       	mul	r24, r18
    1506:	22 27       	eor	r18, r18
    1508:	b0 0d       	add	r27, r0
    150a:	a1 1d       	adc	r26, r1
    150c:	62 1f       	adc	r22, r18
    150e:	73 9f       	mul	r23, r19
    1510:	b0 0d       	add	r27, r0
    1512:	a1 1d       	adc	r26, r1
    1514:	62 1f       	adc	r22, r18
    1516:	83 9f       	mul	r24, r19
    1518:	a0 0d       	add	r26, r0
    151a:	61 1d       	adc	r22, r1
    151c:	22 1f       	adc	r18, r18
    151e:	74 9f       	mul	r23, r20
    1520:	33 27       	eor	r19, r19
    1522:	a0 0d       	add	r26, r0
    1524:	61 1d       	adc	r22, r1
    1526:	23 1f       	adc	r18, r19
    1528:	84 9f       	mul	r24, r20
    152a:	60 0d       	add	r22, r0
    152c:	21 1d       	adc	r18, r1
    152e:	82 2f       	mov	r24, r18
    1530:	76 2f       	mov	r23, r22
    1532:	6a 2f       	mov	r22, r26
    1534:	11 24       	eor	r1, r1
    1536:	9f 57       	subi	r25, 0x7F	; 127
    1538:	50 40       	sbci	r21, 0x00	; 0
    153a:	9a f0       	brmi	.+38     	; 0x1562 <__mulsf3_pse+0x88>
    153c:	f1 f0       	breq	.+60     	; 0x157a <__mulsf3_pse+0xa0>
    153e:	88 23       	and	r24, r24
    1540:	4a f0       	brmi	.+18     	; 0x1554 <__mulsf3_pse+0x7a>
    1542:	ee 0f       	add	r30, r30
    1544:	ff 1f       	adc	r31, r31
    1546:	bb 1f       	adc	r27, r27
    1548:	66 1f       	adc	r22, r22
    154a:	77 1f       	adc	r23, r23
    154c:	88 1f       	adc	r24, r24
    154e:	91 50       	subi	r25, 0x01	; 1
    1550:	50 40       	sbci	r21, 0x00	; 0
    1552:	a9 f7       	brne	.-22     	; 0x153e <__mulsf3_pse+0x64>
    1554:	9e 3f       	cpi	r25, 0xFE	; 254
    1556:	51 05       	cpc	r21, r1
    1558:	80 f0       	brcs	.+32     	; 0x157a <__mulsf3_pse+0xa0>
    155a:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__fp_inf>
    155e:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__fp_szero>
    1562:	5f 3f       	cpi	r21, 0xFF	; 255
    1564:	e4 f3       	brlt	.-8      	; 0x155e <__mulsf3_pse+0x84>
    1566:	98 3e       	cpi	r25, 0xE8	; 232
    1568:	d4 f3       	brlt	.-12     	; 0x155e <__mulsf3_pse+0x84>
    156a:	86 95       	lsr	r24
    156c:	77 95       	ror	r23
    156e:	67 95       	ror	r22
    1570:	b7 95       	ror	r27
    1572:	f7 95       	ror	r31
    1574:	e7 95       	ror	r30
    1576:	9f 5f       	subi	r25, 0xFF	; 255
    1578:	c1 f7       	brne	.-16     	; 0x156a <__mulsf3_pse+0x90>
    157a:	fe 2b       	or	r31, r30
    157c:	88 0f       	add	r24, r24
    157e:	91 1d       	adc	r25, r1
    1580:	96 95       	lsr	r25
    1582:	87 95       	ror	r24
    1584:	97 f9       	bld	r25, 7
    1586:	08 95       	ret
    1588:	19 f4       	brne	.+6      	; 0x1590 <__mulsf3_pse+0xb6>
    158a:	16 f4       	brtc	.+4      	; 0x1590 <__mulsf3_pse+0xb6>
    158c:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__fp_nan>
    1590:	0c 94 0a 0b 	jmp	0x1614	; 0x1614 <__fp_mpack>

00001594 <sqrt>:
    1594:	0e 94 36 0a 	call	0x146c	; 0x146c <__fp_splitA>
    1598:	b8 f3       	brcs	.-18     	; 0x1588 <__mulsf3_pse+0xae>
    159a:	99 23       	and	r25, r25
    159c:	c9 f3       	breq	.-14     	; 0x1590 <__mulsf3_pse+0xb6>
    159e:	b6 f3       	brts	.-20     	; 0x158c <__mulsf3_pse+0xb2>
    15a0:	9f 57       	subi	r25, 0x7F	; 127
    15a2:	55 0b       	sbc	r21, r21
    15a4:	87 ff       	sbrs	r24, 7
    15a6:	0e 94 18 0b 	call	0x1630	; 0x1630 <__fp_norm2>
    15aa:	00 24       	eor	r0, r0
    15ac:	a0 e6       	ldi	r26, 0x60	; 96
    15ae:	40 ea       	ldi	r20, 0xA0	; 160
    15b0:	90 01       	movw	r18, r0
    15b2:	80 58       	subi	r24, 0x80	; 128
    15b4:	56 95       	lsr	r21
    15b6:	97 95       	ror	r25
    15b8:	28 f4       	brcc	.+10     	; 0x15c4 <sqrt+0x30>
    15ba:	80 5c       	subi	r24, 0xC0	; 192
    15bc:	66 0f       	add	r22, r22
    15be:	77 1f       	adc	r23, r23
    15c0:	88 1f       	adc	r24, r24
    15c2:	20 f0       	brcs	.+8      	; 0x15cc <sqrt+0x38>
    15c4:	26 17       	cp	r18, r22
    15c6:	37 07       	cpc	r19, r23
    15c8:	48 07       	cpc	r20, r24
    15ca:	30 f4       	brcc	.+12     	; 0x15d8 <sqrt+0x44>
    15cc:	62 1b       	sub	r22, r18
    15ce:	73 0b       	sbc	r23, r19
    15d0:	84 0b       	sbc	r24, r20
    15d2:	20 29       	or	r18, r0
    15d4:	31 29       	or	r19, r1
    15d6:	4a 2b       	or	r20, r26
    15d8:	a6 95       	lsr	r26
    15da:	17 94       	ror	r1
    15dc:	07 94       	ror	r0
    15de:	20 25       	eor	r18, r0
    15e0:	31 25       	eor	r19, r1
    15e2:	4a 27       	eor	r20, r26
    15e4:	58 f7       	brcc	.-42     	; 0x15bc <sqrt+0x28>
    15e6:	66 0f       	add	r22, r22
    15e8:	77 1f       	adc	r23, r23
    15ea:	88 1f       	adc	r24, r24
    15ec:	20 f0       	brcs	.+8      	; 0x15f6 <sqrt+0x62>
    15ee:	26 17       	cp	r18, r22
    15f0:	37 07       	cpc	r19, r23
    15f2:	48 07       	cpc	r20, r24
    15f4:	30 f4       	brcc	.+12     	; 0x1602 <sqrt+0x6e>
    15f6:	62 0b       	sbc	r22, r18
    15f8:	73 0b       	sbc	r23, r19
    15fa:	84 0b       	sbc	r24, r20
    15fc:	20 0d       	add	r18, r0
    15fe:	31 1d       	adc	r19, r1
    1600:	41 1d       	adc	r20, r1
    1602:	a0 95       	com	r26
    1604:	81 f7       	brne	.-32     	; 0x15e6 <sqrt+0x52>
    1606:	b9 01       	movw	r22, r18
    1608:	84 2f       	mov	r24, r20
    160a:	91 58       	subi	r25, 0x81	; 129
    160c:	88 0f       	add	r24, r24
    160e:	96 95       	lsr	r25
    1610:	87 95       	ror	r24
    1612:	08 95       	ret

00001614 <__fp_mpack>:
    1614:	9f 3f       	cpi	r25, 0xFF	; 255
    1616:	31 f0       	breq	.+12     	; 0x1624 <__fp_mpack_finite+0xc>

00001618 <__fp_mpack_finite>:
    1618:	91 50       	subi	r25, 0x01	; 1
    161a:	20 f4       	brcc	.+8      	; 0x1624 <__fp_mpack_finite+0xc>
    161c:	87 95       	ror	r24
    161e:	77 95       	ror	r23
    1620:	67 95       	ror	r22
    1622:	b7 95       	ror	r27
    1624:	88 0f       	add	r24, r24
    1626:	91 1d       	adc	r25, r1
    1628:	96 95       	lsr	r25
    162a:	87 95       	ror	r24
    162c:	97 f9       	bld	r25, 7
    162e:	08 95       	ret

00001630 <__fp_norm2>:
    1630:	91 50       	subi	r25, 0x01	; 1
    1632:	50 40       	sbci	r21, 0x00	; 0
    1634:	66 0f       	add	r22, r22
    1636:	77 1f       	adc	r23, r23
    1638:	88 1f       	adc	r24, r24
    163a:	d2 f7       	brpl	.-12     	; 0x1630 <__fp_norm2>
    163c:	08 95       	ret

0000163e <__itoa_ncheck>:
    163e:	bb 27       	eor	r27, r27
    1640:	4a 30       	cpi	r20, 0x0A	; 10
    1642:	31 f4       	brne	.+12     	; 0x1650 <__itoa_ncheck+0x12>
    1644:	99 23       	and	r25, r25
    1646:	22 f4       	brpl	.+8      	; 0x1650 <__itoa_ncheck+0x12>
    1648:	bd e2       	ldi	r27, 0x2D	; 45
    164a:	90 95       	com	r25
    164c:	81 95       	neg	r24
    164e:	9f 4f       	sbci	r25, 0xFF	; 255
    1650:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__utoa_common>

00001654 <__utoa_ncheck>:
    1654:	bb 27       	eor	r27, r27

00001656 <__utoa_common>:
    1656:	fb 01       	movw	r30, r22
    1658:	55 27       	eor	r21, r21
    165a:	aa 27       	eor	r26, r26
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	aa 1f       	adc	r26, r26
    1662:	a4 17       	cp	r26, r20
    1664:	10 f0       	brcs	.+4      	; 0x166a <__utoa_common+0x14>
    1666:	a4 1b       	sub	r26, r20
    1668:	83 95       	inc	r24
    166a:	50 51       	subi	r21, 0x10	; 16
    166c:	b9 f7       	brne	.-18     	; 0x165c <__utoa_common+0x6>
    166e:	a0 5d       	subi	r26, 0xD0	; 208
    1670:	aa 33       	cpi	r26, 0x3A	; 58
    1672:	08 f0       	brcs	.+2      	; 0x1676 <__utoa_common+0x20>
    1674:	a9 5d       	subi	r26, 0xD9	; 217
    1676:	a1 93       	st	Z+, r26
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	79 f7       	brne	.-34     	; 0x165a <__utoa_common+0x4>
    167c:	b1 11       	cpse	r27, r1
    167e:	b1 93       	st	Z+, r27
    1680:	11 92       	st	Z+, r1
    1682:	cb 01       	movw	r24, r22
    1684:	0c 94 44 0b 	jmp	0x1688	; 0x1688 <strrev>

00001688 <strrev>:
    1688:	dc 01       	movw	r26, r24
    168a:	fc 01       	movw	r30, r24
    168c:	67 2f       	mov	r22, r23
    168e:	71 91       	ld	r23, Z+
    1690:	77 23       	and	r23, r23
    1692:	e1 f7       	brne	.-8      	; 0x168c <strrev+0x4>
    1694:	32 97       	sbiw	r30, 0x02	; 2
    1696:	04 c0       	rjmp	.+8      	; 0x16a0 <strrev+0x18>
    1698:	7c 91       	ld	r23, X
    169a:	6d 93       	st	X+, r22
    169c:	70 83       	st	Z, r23
    169e:	62 91       	ld	r22, -Z
    16a0:	ae 17       	cp	r26, r30
    16a2:	bf 07       	cpc	r27, r31
    16a4:	c8 f3       	brcs	.-14     	; 0x1698 <strrev+0x10>
    16a6:	08 95       	ret

000016a8 <_exit>:
    16a8:	f8 94       	cli

000016aa <__stop_program>:
    16aa:	ff cf       	rjmp	.-2      	; 0x16aa <__stop_program>
