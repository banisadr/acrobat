
acrobat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000160a  0000169e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000160a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000038  0080010e  0080010e  000016ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f30  00000000  00000000  0000193c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083e  00000000  00000000  0000386c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c5e  00000000  00000000  000040aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000784  00000000  00000000  00004d08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007fa  00000000  00000000  0000548c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002904  00000000  00000000  00005c86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  0000858a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 ca 03 	jmp	0x794	; 0x794 <__vector_3>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 24 06 	jmp	0xc48	; 0xc48 <__vector_10>
      2c:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__vector_11>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>

000000ac <__trampolines_end>:
      ac:	0a 00       	.word	0x000a	; ????

000000ae <__c.2092>:
      ae:	44 75 74 79 20 43 79 63 6c 65 3d 20 00              Duty Cycle= .

000000bb <descriptor_list>:
      bb:	00 01 00 00 52 01 12 00 02 00 00 0f 01 43 00 03     ....R........C..
      cb:	00 00 0b 01 04 01 03 09 04 f7 00 12 02 03 09 04     ................
      db:	ef 00 06 03 03 09 04 e5 00 08                       ..........

000000e5 <string3>:
      e5:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000000ef <string2>:
      ef:	06 03 4d 00 32 00 00 00                             ..M.2...

000000f7 <string1>:
      f7:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     107:	65 00 00 00                                         e...

0000010b <string0>:
     10b:	04 03 09 04                                         ....

0000010f <config1_descriptor>:
     10f:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     11f:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     12f:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     13f:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     14f:	40 00 00                                            @..

00000152 <device_descriptor>:
     152:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     162:	03 01                                               ..

00000164 <endpoint_config_table>:
     164:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000016e <__ctors_end>:
     16e:	11 24       	eor	r1, r1
     170:	1f be       	out	0x3f, r1	; 63
     172:	cf ef       	ldi	r28, 0xFF	; 255
     174:	da e0       	ldi	r29, 0x0A	; 10
     176:	de bf       	out	0x3e, r29	; 62
     178:	cd bf       	out	0x3d, r28	; 61

0000017a <__do_copy_data>:
     17a:	11 e0       	ldi	r17, 0x01	; 1
     17c:	a0 e0       	ldi	r26, 0x00	; 0
     17e:	b1 e0       	ldi	r27, 0x01	; 1
     180:	ea e0       	ldi	r30, 0x0A	; 10
     182:	f6 e1       	ldi	r31, 0x16	; 22
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x10>
     186:	05 90       	lpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	ae 30       	cpi	r26, 0x0E	; 14
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0xc>

00000190 <__do_clear_bss>:
     190:	21 e0       	ldi	r18, 0x01	; 1
     192:	ae e0       	ldi	r26, 0x0E	; 14
     194:	b1 e0       	ldi	r27, 0x01	; 1
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a6 34       	cpi	r26, 0x46	; 70
     19c:	b2 07       	cpc	r27, r18
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 bb 03 	call	0x776	; 0x776 <main>
     1a4:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <init>:
************************************************************/

/* Initialization of Pins and System Clock */
void init(void){
	
	m_clockdivide(CLOCK_DIVIDE); // Set to 2 MHz
     1ac:	e1 e6       	ldi	r30, 0x61	; 97
     1ae:	f0 e0       	ldi	r31, 0x00	; 0
     1b0:	80 e8       	ldi	r24, 0x80	; 128
     1b2:	80 83       	st	Z, r24
     1b4:	83 e0       	ldi	r24, 0x03	; 3
     1b6:	80 83       	st	Z, r24
	
	//Set to Input
	clear(DDRD,0); // D0
     1b8:	50 98       	cbi	0x0a, 0	; 10
	clear(DDRD,1); // D1
     1ba:	51 98       	cbi	0x0a, 1	; 10
	clear(DDRD,2); // D2
     1bc:	52 98       	cbi	0x0a, 2	; 10
	
	//Set to Output
	set(DDRB,6); // B6
     1be:	26 9a       	sbi	0x04, 6	; 4
	set(DDRC,6);	//enable digital output on pin C6 (invert state)
     1c0:	3e 9a       	sbi	0x07, 6	; 7
	
	//Set pin low
	clear(PORTC,6);	//start with both pins low 
     1c2:	46 98       	cbi	0x08, 6	; 8
	
	while(!m_imu_init(accel_scale,gyro_scale)); //Initialize IMU
     1c4:	60 91 04 01 	lds	r22, 0x0104
     1c8:	80 91 05 01 	lds	r24, 0x0105
     1cc:	0e 94 8d 04 	call	0x91a	; 0x91a <m_imu_init>
     1d0:	88 23       	and	r24, r24
     1d2:	c1 f3       	breq	.-16     	; 0x1c4 <init+0x18>
	
	m_bus_init();
     1d4:	0e 94 ee 03 	call	0x7dc	; 0x7dc <m_bus_init>
     1d8:	08 95       	ret

000001da <wireless_recieve>:
}

/* Receive Wireless Data */
void wireless_recieve(void)
{
	m_rf_read(buffer,PACKET_LENGTH); // Read RF Signal
     1da:	63 e0       	ldi	r22, 0x03	; 3
     1dc:	81 e1       	ldi	r24, 0x11	; 17
     1de:	91 e0       	ldi	r25, 0x01	; 1
     1e0:	0e 94 4c 05 	call	0xa98	; 0xa98 <m_rf_read>
	Kp_adjust = buffer[0];
     1e4:	e1 e1       	ldi	r30, 0x11	; 17
     1e6:	f1 e0       	ldi	r31, 0x01	; 1
     1e8:	80 81       	ld	r24, Z
     1ea:	80 93 10 01 	sts	0x0110, r24
	Ki_adjust = buffer[1];
     1ee:	81 81       	ldd	r24, Z+1	; 0x01
     1f0:	80 93 0f 01 	sts	0x010F, r24
	Kd_adjust = buffer[2];
     1f4:	82 81       	ldd	r24, Z+2	; 0x02
     1f6:	80 93 0e 01 	sts	0x010E, r24
     1fa:	08 95       	ret

000001fc <timer1_init>:

/* Timer1 Initialization for PWM Motor Control */
void timer1_init(void)
{
	//Timer initialization
	clear(TCCR1B,CS12);	//Set timer1 prescaler to /1
     1fc:	e1 e8       	ldi	r30, 0x81	; 129
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	8b 7f       	andi	r24, 0xFB	; 251
     204:	80 83       	st	Z, r24
	clear(TCCR1B,CS11);
     206:	80 81       	ld	r24, Z
     208:	8d 7f       	andi	r24, 0xFD	; 253
     20a:	80 83       	st	Z, r24
	set(TCCR1B,CS10);
     20c:	80 81       	ld	r24, Z
     20e:	81 60       	ori	r24, 0x01	; 1
     210:	80 83       	st	Z, r24
	
	set(TCCR1B,WGM13);	//Use timer mode 15 (up to OCR1A, PWM mode)
     212:	80 81       	ld	r24, Z
     214:	80 61       	ori	r24, 0x10	; 16
     216:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
     218:	80 81       	ld	r24, Z
     21a:	88 60       	ori	r24, 0x08	; 8
     21c:	80 83       	st	Z, r24
	set(TCCR1A,WGM11);
     21e:	e0 e8       	ldi	r30, 0x80	; 128
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	80 81       	ld	r24, Z
     224:	82 60       	ori	r24, 0x02	; 2
     226:	80 83       	st	Z, r24
	set(TCCR1A,WGM10);
     228:	80 81       	ld	r24, Z
     22a:	81 60       	ori	r24, 0x01	; 1
     22c:	80 83       	st	Z, r24

	set(TCCR1A,COM1B1);		//clear at OCR1B, set at OCR1A
     22e:	80 81       	ld	r24, Z
     230:	80 62       	ori	r24, 0x20	; 32
     232:	80 83       	st	Z, r24
	clear(TCCR1A,COM1B0);
     234:	80 81       	ld	r24, Z
     236:	8f 7e       	andi	r24, 0xEF	; 239
     238:	80 83       	st	Z, r24

	OCR1A = CLOCK/PWM_FREQ;
     23a:	e8 e8       	ldi	r30, 0x88	; 136
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	80 ed       	ldi	r24, 0xD0	; 208
     240:	97 e0       	ldi	r25, 0x07	; 7
     242:	91 83       	std	Z+1, r25	; 0x01
     244:	80 83       	st	Z, r24
	OCR1B = (float)OCR1A*duty_cycle;
     246:	60 81       	ld	r22, Z
     248:	71 81       	ldd	r23, Z+1	; 0x01
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 4f 09 	call	0x129e	; 0x129e <__floatunsisf>
     252:	20 91 00 01 	lds	r18, 0x0100
     256:	30 91 01 01 	lds	r19, 0x0101
     25a:	40 91 02 01 	lds	r20, 0x0102
     25e:	50 91 03 01 	lds	r21, 0x0103
     262:	0e 94 06 0a 	call	0x140c	; 0x140c <__mulsf3>
     266:	0e 94 20 09 	call	0x1240	; 0x1240 <__fixunssfsi>
     26a:	70 93 8b 00 	sts	0x008B, r23
     26e:	60 93 8a 00 	sts	0x008A, r22
     272:	08 95       	ret

00000274 <timer3_init>:
}

/* Timer3 Initialization for fixed timestep calculations */
void timer3_init(void) 
{
	clear(TCCR3B,CS32); // prescale /1
     274:	e1 e9       	ldi	r30, 0x91	; 145
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	80 81       	ld	r24, Z
     27a:	8b 7f       	andi	r24, 0xFB	; 251
     27c:	80 83       	st	Z, r24
	clear(TCCR3B,CS31);
     27e:	80 81       	ld	r24, Z
     280:	8d 7f       	andi	r24, 0xFD	; 253
     282:	80 83       	st	Z, r24
	set(TCCR3B,CS30);
     284:	80 81       	ld	r24, Z
     286:	81 60       	ori	r24, 0x01	; 1
     288:	80 83       	st	Z, r24

	clear(TCCR3B,WGM33); // Up to OCR3A (mode 4)
     28a:	80 81       	ld	r24, Z
     28c:	8f 7e       	andi	r24, 0xEF	; 239
     28e:	80 83       	st	Z, r24
	set(TCCR3B,WGM32);
     290:	80 81       	ld	r24, Z
     292:	88 60       	ori	r24, 0x08	; 8
     294:	80 83       	st	Z, r24
	clear(TCCR3A,WGM31);
     296:	e0 e9       	ldi	r30, 0x90	; 144
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	80 81       	ld	r24, Z
     29c:	8d 7f       	andi	r24, 0xFD	; 253
     29e:	80 83       	st	Z, r24
	clear(TCCR3A,WGM30);
     2a0:	80 81       	ld	r24, Z
     2a2:	8e 7f       	andi	r24, 0xFE	; 254
     2a4:	80 83       	st	Z, r24
	
	OCR3A = TIMESTEP*(CLOCK/TIM3_PRESCALE); // initialize OCR3A or duration
     2a6:	80 ed       	ldi	r24, 0xD0	; 208
     2a8:	97 e0       	ldi	r25, 0x07	; 7
     2aa:	90 93 99 00 	sts	0x0099, r25
     2ae:	80 93 98 00 	sts	0x0098, r24
     2b2:	08 95       	ret

000002b4 <lowpass>:
}


/* Lowpass Filter using Alpha_low */
int lowpass(float alpha, int previous_output, int reading)
{
     2b4:	8f 92       	push	r8
     2b6:	9f 92       	push	r9
     2b8:	af 92       	push	r10
     2ba:	bf 92       	push	r11
     2bc:	cf 92       	push	r12
     2be:	df 92       	push	r13
     2c0:	ef 92       	push	r14
     2c2:	ff 92       	push	r15
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	6b 01       	movw	r12, r22
     2ca:	7c 01       	movw	r14, r24
     2cc:	ea 01       	movw	r28, r20
	return (int)((float)reading*alpha +(1-alpha)*(float)previous_output);
     2ce:	b9 01       	movw	r22, r18
     2d0:	33 0f       	add	r19, r19
     2d2:	88 0b       	sbc	r24, r24
     2d4:	99 0b       	sbc	r25, r25
     2d6:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__floatsisf>
     2da:	a7 01       	movw	r20, r14
     2dc:	96 01       	movw	r18, r12
     2de:	0e 94 06 0a 	call	0x140c	; 0x140c <__mulsf3>
     2e2:	4b 01       	movw	r8, r22
     2e4:	5c 01       	movw	r10, r24
     2e6:	a7 01       	movw	r20, r14
     2e8:	96 01       	movw	r18, r12
     2ea:	60 e0       	ldi	r22, 0x00	; 0
     2ec:	70 e0       	ldi	r23, 0x00	; 0
     2ee:	80 e8       	ldi	r24, 0x80	; 128
     2f0:	9f e3       	ldi	r25, 0x3F	; 63
     2f2:	0e 94 35 08 	call	0x106a	; 0x106a <__subsf3>
     2f6:	6b 01       	movw	r12, r22
     2f8:	7c 01       	movw	r14, r24
     2fa:	be 01       	movw	r22, r28
     2fc:	dd 0f       	add	r29, r29
     2fe:	88 0b       	sbc	r24, r24
     300:	99 0b       	sbc	r25, r25
     302:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__floatsisf>
     306:	9b 01       	movw	r18, r22
     308:	ac 01       	movw	r20, r24
     30a:	c7 01       	movw	r24, r14
     30c:	b6 01       	movw	r22, r12
     30e:	0e 94 06 0a 	call	0x140c	; 0x140c <__mulsf3>
     312:	9b 01       	movw	r18, r22
     314:	ac 01       	movw	r20, r24
     316:	c5 01       	movw	r24, r10
     318:	b4 01       	movw	r22, r8
     31a:	0e 94 36 08 	call	0x106c	; 0x106c <__addsf3>
     31e:	0e 94 19 09 	call	0x1232	; 0x1232 <__fixsfsi>
}
     322:	cb 01       	movw	r24, r22
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	ff 90       	pop	r15
     32a:	ef 90       	pop	r14
     32c:	df 90       	pop	r13
     32e:	cf 90       	pop	r12
     330:	bf 90       	pop	r11
     332:	af 90       	pop	r10
     334:	9f 90       	pop	r9
     336:	8f 90       	pop	r8
     338:	08 95       	ret

0000033a <highpass>:

/* Highpass Filter using Aplha_high */
int highpass(float alpha, int previous_output, int previous_reading, int reading)
{
     33a:	8f 92       	push	r8
     33c:	9f 92       	push	r9
     33e:	af 92       	push	r10
     340:	bf 92       	push	r11
     342:	cf 92       	push	r12
     344:	df 92       	push	r13
     346:	ef 92       	push	r14
     348:	ff 92       	push	r15
     34a:	0f 93       	push	r16
     34c:	1f 93       	push	r17
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	6b 01       	movw	r12, r22
     354:	7c 01       	movw	r14, r24
     356:	e9 01       	movw	r28, r18
	return (int)((float)previous_output*alpha + alpha*(float)(reading-previous_reading));
     358:	ba 01       	movw	r22, r20
     35a:	55 0f       	add	r21, r21
     35c:	88 0b       	sbc	r24, r24
     35e:	99 0b       	sbc	r25, r25
     360:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__floatsisf>
     364:	a7 01       	movw	r20, r14
     366:	96 01       	movw	r18, r12
     368:	0e 94 06 0a 	call	0x140c	; 0x140c <__mulsf3>
     36c:	4b 01       	movw	r8, r22
     36e:	5c 01       	movw	r10, r24
     370:	b8 01       	movw	r22, r16
     372:	6c 1b       	sub	r22, r28
     374:	7d 0b       	sbc	r23, r29
     376:	07 2e       	mov	r0, r23
     378:	00 0c       	add	r0, r0
     37a:	88 0b       	sbc	r24, r24
     37c:	99 0b       	sbc	r25, r25
     37e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__floatsisf>
     382:	a7 01       	movw	r20, r14
     384:	96 01       	movw	r18, r12
     386:	0e 94 06 0a 	call	0x140c	; 0x140c <__mulsf3>
     38a:	9b 01       	movw	r18, r22
     38c:	ac 01       	movw	r20, r24
     38e:	c5 01       	movw	r24, r10
     390:	b4 01       	movw	r22, r8
     392:	0e 94 36 08 	call	0x106c	; 0x106c <__addsf3>
     396:	0e 94 19 09 	call	0x1232	; 0x1232 <__fixsfsi>
}
     39a:	cb 01       	movw	r24, r22
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	1f 91       	pop	r17
     3a2:	0f 91       	pop	r16
     3a4:	ff 90       	pop	r15
     3a6:	ef 90       	pop	r14
     3a8:	df 90       	pop	r13
     3aa:	cf 90       	pop	r12
     3ac:	bf 90       	pop	r11
     3ae:	af 90       	pop	r10
     3b0:	9f 90       	pop	r9
     3b2:	8f 90       	pop	r8
     3b4:	08 95       	ret

000003b6 <run_control_loop>:
	}
}

/* PID Control */
void run_control_loop(void)
{
     3b6:	4f 92       	push	r4
     3b8:	5f 92       	push	r5
     3ba:	6f 92       	push	r6
     3bc:	7f 92       	push	r7
     3be:	8f 92       	push	r8
     3c0:	9f 92       	push	r9
     3c2:	af 92       	push	r10
     3c4:	bf 92       	push	r11
     3c6:	cf 92       	push	r12
     3c8:	df 92       	push	r13
     3ca:	ef 92       	push	r14
     3cc:	ff 92       	push	r15
	float error = SETPOINT - angle;
     3ce:	20 91 1c 01 	lds	r18, 0x011C
     3d2:	30 91 1d 01 	lds	r19, 0x011D
     3d6:	40 91 1e 01 	lds	r20, 0x011E
     3da:	50 91 1f 01 	lds	r21, 0x011F
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	70 e0       	ldi	r23, 0x00	; 0
     3e2:	80 e8       	ldi	r24, 0x80	; 128
     3e4:	9f e3       	ldi	r25, 0x3F	; 63
     3e6:	0e 94 35 08 	call	0x106a	; 0x106a <__subsf3>
     3ea:	6b 01       	movw	r12, r22
     3ec:	7c 01       	movw	r14, r24
	integral += error*TIMESTEP;
     3ee:	2f e6       	ldi	r18, 0x6F	; 111
     3f0:	32 e1       	ldi	r19, 0x12	; 18
     3f2:	43 e8       	ldi	r20, 0x83	; 131
     3f4:	5a e3       	ldi	r21, 0x3A	; 58
     3f6:	0e 94 06 0a 	call	0x140c	; 0x140c <__mulsf3>
     3fa:	20 91 14 01 	lds	r18, 0x0114
     3fe:	30 91 15 01 	lds	r19, 0x0115
     402:	40 91 16 01 	lds	r20, 0x0116
     406:	50 91 17 01 	lds	r21, 0x0117
     40a:	0e 94 36 08 	call	0x106c	; 0x106c <__addsf3>
     40e:	4b 01       	movw	r8, r22
     410:	5c 01       	movw	r10, r24
     412:	60 93 14 01 	sts	0x0114, r22
     416:	70 93 15 01 	sts	0x0115, r23
     41a:	80 93 16 01 	sts	0x0116, r24
     41e:	90 93 17 01 	sts	0x0117, r25
	float derivative = -gy;
	float output = Kp*error + Ki*integral + Kd*derivative;
     422:	28 eb       	ldi	r18, 0xB8	; 184
     424:	3e e1       	ldi	r19, 0x1E	; 30
     426:	45 e1       	ldi	r20, 0x15	; 21
     428:	50 e4       	ldi	r21, 0x40	; 64
     42a:	c7 01       	movw	r24, r14
     42c:	b6 01       	movw	r22, r12
     42e:	0e 94 06 0a 	call	0x140c	; 0x140c <__mulsf3>
     432:	2b 01       	movw	r4, r22
     434:	3c 01       	movw	r6, r24
     436:	2a e0       	ldi	r18, 0x0A	; 10
     438:	37 ed       	ldi	r19, 0xD7	; 215
     43a:	43 e2       	ldi	r20, 0x23	; 35
     43c:	5c e3       	ldi	r21, 0x3C	; 60
     43e:	c5 01       	movw	r24, r10
     440:	b4 01       	movw	r22, r8
     442:	0e 94 06 0a 	call	0x140c	; 0x140c <__mulsf3>
     446:	9b 01       	movw	r18, r22
     448:	ac 01       	movw	r20, r24
     44a:	c3 01       	movw	r24, r6
     44c:	b2 01       	movw	r22, r4
     44e:	0e 94 36 08 	call	0x106c	; 0x106c <__addsf3>
     452:	4b 01       	movw	r8, r22
     454:	5c 01       	movw	r10, r24
/* PID Control */
void run_control_loop(void)
{
	float error = SETPOINT - angle;
	integral += error*TIMESTEP;
	float derivative = -gy;
     456:	80 91 26 01 	lds	r24, 0x0126
     45a:	90 91 27 01 	lds	r25, 0x0127
     45e:	91 95       	neg	r25
     460:	81 95       	neg	r24
     462:	91 09       	sbc	r25, r1
     464:	bc 01       	movw	r22, r24
     466:	99 0f       	add	r25, r25
     468:	88 0b       	sbc	r24, r24
     46a:	99 0b       	sbc	r25, r25
     46c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__floatsisf>
	float output = Kp*error + Ki*integral + Kd*derivative;
     470:	2a e0       	ldi	r18, 0x0A	; 10
     472:	37 ed       	ldi	r19, 0xD7	; 215
     474:	43 e2       	ldi	r20, 0x23	; 35
     476:	5c e3       	ldi	r21, 0x3C	; 60
     478:	0e 94 06 0a 	call	0x140c	; 0x140c <__mulsf3>
     47c:	9b 01       	movw	r18, r22
     47e:	ac 01       	movw	r20, r24
     480:	c5 01       	movw	r24, r10
     482:	b4 01       	movw	r22, r8
     484:	0e 94 36 08 	call	0x106c	; 0x106c <__addsf3>
     488:	4b 01       	movw	r8, r22
     48a:	5c 01       	movw	r10, r24
	previous_error = error;
     48c:	c0 92 18 01 	sts	0x0118, r12
     490:	d0 92 19 01 	sts	0x0119, r13
     494:	e0 92 1a 01 	sts	0x011A, r14
     498:	f0 92 1b 01 	sts	0x011B, r15
	
	duty_cycle = abs(output)/(45.0);
     49c:	0e 94 19 09 	call	0x1232	; 0x1232 <__fixsfsi>
     4a0:	9b 01       	movw	r18, r22
     4a2:	77 23       	and	r23, r23
     4a4:	24 f4       	brge	.+8      	; 0x4ae <run_control_loop+0xf8>
     4a6:	22 27       	eor	r18, r18
     4a8:	33 27       	eor	r19, r19
     4aa:	26 1b       	sub	r18, r22
     4ac:	37 0b       	sbc	r19, r23
     4ae:	b9 01       	movw	r22, r18
     4b0:	33 0f       	add	r19, r19
     4b2:	88 0b       	sbc	r24, r24
     4b4:	99 0b       	sbc	r25, r25
     4b6:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__floatsisf>
     4ba:	20 e0       	ldi	r18, 0x00	; 0
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	44 e3       	ldi	r20, 0x34	; 52
     4c0:	52 e4       	ldi	r21, 0x42	; 66
     4c2:	0e 94 a7 08 	call	0x114e	; 0x114e <__divsf3>
     4c6:	6b 01       	movw	r12, r22
     4c8:	7c 01       	movw	r14, r24
	if (duty_cycle > 1) {
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	40 e8       	ldi	r20, 0x80	; 128
     4d0:	5f e3       	ldi	r21, 0x3F	; 63
     4d2:	0e 94 01 0a 	call	0x1402	; 0x1402 <__gesf2>
     4d6:	18 16       	cp	r1, r24
     4d8:	4c f0       	brlt	.+18     	; 0x4ec <run_control_loop+0x136>
	integral += error*TIMESTEP;
	float derivative = -gy;
	float output = Kp*error + Ki*integral + Kd*derivative;
	previous_error = error;
	
	duty_cycle = abs(output)/(45.0);
     4da:	c0 92 00 01 	sts	0x0100, r12
     4de:	d0 92 01 01 	sts	0x0101, r13
     4e2:	e0 92 02 01 	sts	0x0102, r14
     4e6:	f0 92 03 01 	sts	0x0103, r15
     4ea:	0c c0       	rjmp	.+24     	; 0x504 <run_control_loop+0x14e>
	if (duty_cycle > 1) {
		duty_cycle = 1;
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	a0 e8       	ldi	r26, 0x80	; 128
     4f2:	bf e3       	ldi	r27, 0x3F	; 63
     4f4:	80 93 00 01 	sts	0x0100, r24
     4f8:	90 93 01 01 	sts	0x0101, r25
     4fc:	a0 93 02 01 	sts	0x0102, r26
     500:	b0 93 03 01 	sts	0x0103, r27
	}
	
	OCR1B = (float)OCR1A*duty_cycle;
     504:	60 91 88 00 	lds	r22, 0x0088
     508:	70 91 89 00 	lds	r23, 0x0089
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	0e 94 4f 09 	call	0x129e	; 0x129e <__floatunsisf>
     514:	20 91 00 01 	lds	r18, 0x0100
     518:	30 91 01 01 	lds	r19, 0x0101
     51c:	40 91 02 01 	lds	r20, 0x0102
     520:	50 91 03 01 	lds	r21, 0x0103
     524:	0e 94 06 0a 	call	0x140c	; 0x140c <__mulsf3>
     528:	0e 94 20 09 	call	0x1240	; 0x1240 <__fixunssfsi>
     52c:	70 93 8b 00 	sts	0x008B, r23
     530:	60 93 8a 00 	sts	0x008A, r22
	
	if (output<0){set(PORTC,6);}
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	a9 01       	movw	r20, r18
     53a:	c5 01       	movw	r24, r10
     53c:	b4 01       	movw	r22, r8
     53e:	0e 94 a2 08 	call	0x1144	; 0x1144 <__cmpsf2>
     542:	88 23       	and	r24, r24
     544:	14 f4       	brge	.+4      	; 0x54a <run_control_loop+0x194>
     546:	46 9a       	sbi	0x08, 6	; 8
     548:	01 c0       	rjmp	.+2      	; 0x54c <run_control_loop+0x196>
	else{clear(PORTC,6);}
     54a:	46 98       	cbi	0x08, 6	; 8
		
	m_usb_tx_string("Duty Cycle= ");
     54c:	8e ea       	ldi	r24, 0xAE	; 174
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	0e 94 e5 07 	call	0xfca	; 0xfca <print_P>
	m_usb_tx_int((int)(duty_cycle*1000));
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	4a e7       	ldi	r20, 0x7A	; 122
     55a:	54 e4       	ldi	r21, 0x44	; 68
     55c:	60 91 00 01 	lds	r22, 0x0100
     560:	70 91 01 01 	lds	r23, 0x0101
     564:	80 91 02 01 	lds	r24, 0x0102
     568:	90 91 03 01 	lds	r25, 0x0103
     56c:	0e 94 06 0a 	call	0x140c	; 0x140c <__mulsf3>
     570:	0e 94 19 09 	call	0x1232	; 0x1232 <__fixsfsi>
     574:	cb 01       	movw	r24, r22
     576:	0e 94 01 08 	call	0x1002	; 0x1002 <m_usb_tx_int>
	m_usb_tx_string("\n");	
     57a:	8c ea       	ldi	r24, 0xAC	; 172
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	0e 94 e5 07 	call	0xfca	; 0xfca <print_P>
}
     582:	ff 90       	pop	r15
     584:	ef 90       	pop	r14
     586:	df 90       	pop	r13
     588:	cf 90       	pop	r12
     58a:	bf 90       	pop	r11
     58c:	af 90       	pop	r10
     58e:	9f 90       	pop	r9
     590:	8f 90       	pop	r8
     592:	7f 90       	pop	r7
     594:	6f 90       	pop	r6
     596:	5f 90       	pop	r5
     598:	4f 90       	pop	r4
     59a:	08 95       	ret

0000059c <update_angle>:
	return (int)((float)previous_output*alpha + alpha*(float)(reading-previous_reading));
}

/* Get IMU data, filter, update angle, update control */
void update_angle(void)
{
     59c:	4f 92       	push	r4
     59e:	5f 92       	push	r5
     5a0:	6f 92       	push	r6
     5a2:	7f 92       	push	r7
     5a4:	8f 92       	push	r8
     5a6:	9f 92       	push	r9
     5a8:	af 92       	push	r10
     5aa:	bf 92       	push	r11
     5ac:	cf 92       	push	r12
     5ae:	df 92       	push	r13
     5b0:	ef 92       	push	r14
     5b2:	ff 92       	push	r15
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
	if (m_imu_raw(data))
     5bc:	8c e2       	ldi	r24, 0x2C	; 44
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <m_imu_raw>
     5c4:	88 23       	and	r24, r24
     5c6:	09 f4       	brne	.+2      	; 0x5ca <update_angle+0x2e>
     5c8:	c1 c0       	rjmp	.+386    	; 0x74c <update_angle+0x1b0>
	{
		m_green(ON);
     5ca:	6a 9a       	sbi	0x0d, 2	; 13
     5cc:	72 98       	cbi	0x0e, 2	; 14
		m_red(OFF);		
     5ce:	6e 9a       	sbi	0x0d, 6	; 13
     5d0:	76 9a       	sbi	0x0e, 6	; 14
		
		ax = lowpass(0.7,ax,data[0])+AX_OFFSET;
     5d2:	cc e2       	ldi	r28, 0x2C	; 44
     5d4:	d1 e0       	ldi	r29, 0x01	; 1
     5d6:	28 81       	ld	r18, Y
     5d8:	39 81       	ldd	r19, Y+1	; 0x01
     5da:	40 91 2a 01 	lds	r20, 0x012A
     5de:	50 91 2b 01 	lds	r21, 0x012B
     5e2:	63 e3       	ldi	r22, 0x33	; 51
     5e4:	73 e3       	ldi	r23, 0x33	; 51
     5e6:	83 e3       	ldi	r24, 0x33	; 51
     5e8:	9f e3       	ldi	r25, 0x3F	; 63
     5ea:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lowpass>
     5ee:	88 58       	subi	r24, 0x88	; 136
     5f0:	91 09       	sbc	r25, r1
     5f2:	6c 01       	movw	r12, r24
     5f4:	90 93 2b 01 	sts	0x012B, r25
     5f8:	80 93 2a 01 	sts	0x012A, r24
		az = lowpass(0.7,az,data[2])+AZ_OFFSET;
     5fc:	2c 81       	ldd	r18, Y+4	; 0x04
     5fe:	3d 81       	ldd	r19, Y+5	; 0x05
     600:	40 91 28 01 	lds	r20, 0x0128
     604:	50 91 29 01 	lds	r21, 0x0129
     608:	63 e3       	ldi	r22, 0x33	; 51
     60a:	73 e3       	ldi	r23, 0x33	; 51
     60c:	83 e3       	ldi	r24, 0x33	; 51
     60e:	9f e3       	ldi	r25, 0x3F	; 63
     610:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lowpass>
     614:	87 96       	adiw	r24, 0x27	; 39
     616:	7c 01       	movw	r14, r24
     618:	90 93 29 01 	sts	0x0129, r25
     61c:	80 93 28 01 	sts	0x0128, r24
		gy = lowpass(ALPHA_LOW,gy,data[4])+GY_OFFSET;
     620:	08 84       	ldd	r0, Y+8	; 0x08
     622:	d9 85       	ldd	r29, Y+9	; 0x09
     624:	c0 2d       	mov	r28, r0
     626:	40 91 26 01 	lds	r20, 0x0126
     62a:	50 91 27 01 	lds	r21, 0x0127
     62e:	9e 01       	movw	r18, r28
     630:	63 e3       	ldi	r22, 0x33	; 51
     632:	73 e3       	ldi	r23, 0x33	; 51
     634:	83 e7       	ldi	r24, 0x73	; 115
     636:	9f e3       	ldi	r25, 0x3F	; 63
     638:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lowpass>
		gy = highpass(ALPHA_HIGH,gy,gy_previous_reading,data[4]);
     63c:	20 91 24 01 	lds	r18, 0x0124
     640:	30 91 25 01 	lds	r19, 0x0125
		m_green(ON);
		m_red(OFF);		
		
		ax = lowpass(0.7,ax,data[0])+AX_OFFSET;
		az = lowpass(0.7,az,data[2])+AZ_OFFSET;
		gy = lowpass(ALPHA_LOW,gy,data[4])+GY_OFFSET;
     644:	ac 01       	movw	r20, r24
     646:	49 57       	subi	r20, 0x79	; 121
     648:	51 09       	sbc	r21, r1
		gy = highpass(ALPHA_HIGH,gy,gy_previous_reading,data[4]);
     64a:	8e 01       	movw	r16, r28
     64c:	6d ec       	ldi	r22, 0xCD	; 205
     64e:	7c ec       	ldi	r23, 0xCC	; 204
     650:	8c ec       	ldi	r24, 0xCC	; 204
     652:	9d e3       	ldi	r25, 0x3D	; 61
     654:	0e 94 9d 01 	call	0x33a	; 0x33a <highpass>
     658:	8c 01       	movw	r16, r24
     65a:	90 93 27 01 	sts	0x0127, r25
     65e:	80 93 26 01 	sts	0x0126, r24
		gy_previous_reading = data[4];
     662:	d0 93 25 01 	sts	0x0125, r29
     666:	c0 93 24 01 	sts	0x0124, r28
		
		if (check(TIFR3,OCF3A)){	//check if timestep has completed
     66a:	c1 9b       	sbis	0x18, 1	; 24
     66c:	73 c0       	rjmp	.+230    	; 0x754 <update_angle+0x1b8>
			angleSlow = ((float)ax*RAD2DEG)/sqrt(((float)ax*ax+(float)az*az));
     66e:	b6 01       	movw	r22, r12
     670:	dd 0c       	add	r13, r13
     672:	88 0b       	sbc	r24, r24
     674:	99 0b       	sbc	r25, r25
     676:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__floatsisf>
     67a:	4b 01       	movw	r8, r22
     67c:	5c 01       	movw	r10, r24
     67e:	b7 01       	movw	r22, r14
     680:	ff 0c       	add	r15, r15
     682:	88 0b       	sbc	r24, r24
     684:	99 0b       	sbc	r25, r25
     686:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__floatsisf>
     68a:	6b 01       	movw	r12, r22
     68c:	7c 01       	movw	r14, r24
     68e:	a5 01       	movw	r20, r10
     690:	94 01       	movw	r18, r8
     692:	c5 01       	movw	r24, r10
     694:	b4 01       	movw	r22, r8
     696:	0e 94 06 0a 	call	0x140c	; 0x140c <__mulsf3>
     69a:	2b 01       	movw	r4, r22
     69c:	3c 01       	movw	r6, r24
     69e:	a7 01       	movw	r20, r14
     6a0:	96 01       	movw	r18, r12
     6a2:	c7 01       	movw	r24, r14
     6a4:	b6 01       	movw	r22, r12
     6a6:	0e 94 06 0a 	call	0x140c	; 0x140c <__mulsf3>
     6aa:	9b 01       	movw	r18, r22
     6ac:	ac 01       	movw	r20, r24
     6ae:	c3 01       	movw	r24, r6
     6b0:	b2 01       	movw	r22, r4
     6b2:	0e 94 36 08 	call	0x106c	; 0x106c <__addsf3>
     6b6:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <sqrt>
     6ba:	6b 01       	movw	r12, r22
     6bc:	7c 01       	movw	r14, r24
     6be:	23 e3       	ldi	r18, 0x33	; 51
     6c0:	33 e3       	ldi	r19, 0x33	; 51
     6c2:	45 e6       	ldi	r20, 0x65	; 101
     6c4:	52 e4       	ldi	r21, 0x42	; 66
     6c6:	c5 01       	movw	r24, r10
     6c8:	b4 01       	movw	r22, r8
     6ca:	0e 94 06 0a 	call	0x140c	; 0x140c <__mulsf3>
     6ce:	a7 01       	movw	r20, r14
     6d0:	96 01       	movw	r18, r12
     6d2:	0e 94 a7 08 	call	0x114e	; 0x114e <__divsf3>
     6d6:	6b 01       	movw	r12, r22
     6d8:	7c 01       	movw	r14, r24
     6da:	60 93 42 01 	sts	0x0142, r22
     6de:	70 93 43 01 	sts	0x0143, r23
     6e2:	80 93 44 01 	sts	0x0144, r24
     6e6:	90 93 45 01 	sts	0x0145, r25
			angleFast += gy*TIMESTEP;	//add thetadot*timestep to angle
     6ea:	b8 01       	movw	r22, r16
     6ec:	11 0f       	add	r17, r17
     6ee:	88 0b       	sbc	r24, r24
     6f0:	99 0b       	sbc	r25, r25
     6f2:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__floatsisf>
     6f6:	2f e6       	ldi	r18, 0x6F	; 111
     6f8:	32 e1       	ldi	r19, 0x12	; 18
     6fa:	43 e8       	ldi	r20, 0x83	; 131
     6fc:	5a e3       	ldi	r21, 0x3A	; 58
     6fe:	0e 94 06 0a 	call	0x140c	; 0x140c <__mulsf3>
     702:	20 91 20 01 	lds	r18, 0x0120
     706:	30 91 21 01 	lds	r19, 0x0121
     70a:	40 91 22 01 	lds	r20, 0x0122
     70e:	50 91 23 01 	lds	r21, 0x0123
     712:	0e 94 36 08 	call	0x106c	; 0x106c <__addsf3>
     716:	60 93 20 01 	sts	0x0120, r22
     71a:	70 93 21 01 	sts	0x0121, r23
     71e:	80 93 22 01 	sts	0x0122, r24
     722:	90 93 23 01 	sts	0x0123, r25
			angle = -1*(-angleSlow + angleFast);	//flip sign for IMU mounted upside down 
     726:	a7 01       	movw	r20, r14
     728:	96 01       	movw	r18, r12
     72a:	0e 94 35 08 	call	0x106a	; 0x106a <__subsf3>
     72e:	dc 01       	movw	r26, r24
     730:	cb 01       	movw	r24, r22
     732:	b0 58       	subi	r27, 0x80	; 128
     734:	80 93 1c 01 	sts	0x011C, r24
     738:	90 93 1d 01 	sts	0x011D, r25
     73c:	a0 93 1e 01 	sts	0x011E, r26
     740:	b0 93 1f 01 	sts	0x011F, r27
			set(TIFR3,OCF3A);		//reset flag
     744:	c1 9a       	sbi	0x18, 1	; 24
			run_control_loop(); // Update control
     746:	0e 94 db 01 	call	0x3b6	; 0x3b6 <run_control_loop>
     74a:	04 c0       	rjmp	.+8      	; 0x754 <update_angle+0x1b8>
		}
	}
	else
	{
		m_green(OFF);
     74c:	6a 9a       	sbi	0x0d, 2	; 13
     74e:	72 9a       	sbi	0x0e, 2	; 14
		m_red(ON);
     750:	6e 9a       	sbi	0x0d, 6	; 13
     752:	76 98       	cbi	0x0e, 6	; 14
	}
}
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	1f 91       	pop	r17
     75a:	0f 91       	pop	r16
     75c:	ff 90       	pop	r15
     75e:	ef 90       	pop	r14
     760:	df 90       	pop	r13
     762:	cf 90       	pop	r12
     764:	bf 90       	pop	r11
     766:	af 90       	pop	r10
     768:	9f 90       	pop	r9
     76a:	8f 90       	pop	r8
     76c:	7f 90       	pop	r7
     76e:	6f 90       	pop	r6
     770:	5f 90       	pop	r5
     772:	4f 90       	pop	r4
     774:	08 95       	ret

00000776 <main>:
Main Loop
************************************************************/
int main(void)
{
	/* Confirm Power */
	m_red(ON);
     776:	6e 9a       	sbi	0x0d, 6	; 13
     778:	76 98       	cbi	0x0e, 6	; 14

	/* Initializations */
	init();
     77a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <init>
}

/* Setup USB */
void usb_enable(void)
{
	m_usb_init();
     77e:	0e 94 b0 05 	call	0xb60	; 0xb60 <m_usb_init>

	/* Initializations */
	init();
	usb_enable();
	//wireless_enable();
	timer1_init();
     782:	0e 94 fe 00 	call	0x1fc	; 0x1fc <timer1_init>
	timer3_init();
     786:	0e 94 3a 01 	call	0x274	; 0x274 <timer3_init>

	/* Confirm successful initialization(s) */
	m_green(ON);
     78a:	6a 9a       	sbi	0x0d, 2	; 13
     78c:	72 98       	cbi	0x0e, 2	; 14

	/* Run */
	while (1){
		update_angle();
     78e:	0e 94 ce 02 	call	0x59c	; 0x59c <update_angle>
	}
     792:	fd cf       	rjmp	.-6      	; 0x78e <main+0x18>

00000794 <__vector_3>:

/************************************************************
Interrupts
************************************************************/

ISR(INT2_vect){
     794:	1f 92       	push	r1
     796:	0f 92       	push	r0
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	0f 92       	push	r0
     79c:	11 24       	eor	r1, r1
     79e:	2f 93       	push	r18
     7a0:	3f 93       	push	r19
     7a2:	4f 93       	push	r20
     7a4:	5f 93       	push	r21
     7a6:	6f 93       	push	r22
     7a8:	7f 93       	push	r23
     7aa:	8f 93       	push	r24
     7ac:	9f 93       	push	r25
     7ae:	af 93       	push	r26
     7b0:	bf 93       	push	r27
     7b2:	ef 93       	push	r30
     7b4:	ff 93       	push	r31
	wireless_recieve();
     7b6:	0e 94 ed 00 	call	0x1da	; 0x1da <wireless_recieve>
}
     7ba:	ff 91       	pop	r31
     7bc:	ef 91       	pop	r30
     7be:	bf 91       	pop	r27
     7c0:	af 91       	pop	r26
     7c2:	9f 91       	pop	r25
     7c4:	8f 91       	pop	r24
     7c6:	7f 91       	pop	r23
     7c8:	6f 91       	pop	r22
     7ca:	5f 91       	pop	r21
     7cc:	4f 91       	pop	r20
     7ce:	3f 91       	pop	r19
     7d0:	2f 91       	pop	r18
     7d2:	0f 90       	pop	r0
     7d4:	0f be       	out	0x3f, r0	; 63
     7d6:	0f 90       	pop	r0
     7d8:	1f 90       	pop	r1
     7da:	18 95       	reti

000007dc <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     7dc:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     7de:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     7e0:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     7e2:	8c e0       	ldi	r24, 0x0C	; 12
     7e4:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     7e8:	e9 e6       	ldi	r30, 0x69	; 105
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	80 62       	ori	r24, 0x20	; 32
     7f0:	80 83       	st	Z, r24
     7f2:	80 81       	ld	r24, Z
     7f4:	8f 7e       	andi	r24, 0xEF	; 239
     7f6:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     7f8:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     7fa:	78 94       	sei
     7fc:	08 95       	ret

000007fe <twi_read_byte>:
}

// TWI: read BYTE, NACK, STOP
unsigned char twi_read_byte(void)
{
    TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, NACK, and wait for another byte
     7fe:	84 e8       	ldi	r24, 0x84	; 132
     800:	80 93 bc 00 	sts	0x00BC, r24
    while(!(TWCR & (1<<TWINT))){};  // wait for an interrupt to signal that a new byte is available
     804:	ec eb       	ldi	r30, 0xBC	; 188
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	80 81       	ld	r24, Z
     80a:	88 23       	and	r24, r24
     80c:	ec f7       	brge	.-6      	; 0x808 <twi_read_byte+0xa>
    return TWDR;
     80e:	80 91 bb 00 	lds	r24, 0x00BB
    twi_stop();
}
     812:	08 95       	ret

00000814 <twi_wait_for_ack>:
}

// TWI:  wait for ACK packet (0=fail, 1=success)
unsigned char twi_wait_for_ack(void)
{
	unsigned int wait=0;
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<MAX_WAIT)){};	// wait for acknowledgement that the byte was sent
     818:	ec eb       	ldi	r30, 0xBC	; 188
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	80 81       	ld	r24, Z
     81e:	88 23       	and	r24, r24
     820:	34 f0       	brlt	.+12     	; 0x82e <twi_wait_for_ack+0x1a>
     822:	2f 5f       	subi	r18, 0xFF	; 255
     824:	3f 4f       	sbci	r19, 0xFF	; 255
     826:	29 3e       	cpi	r18, 0xE9	; 233
     828:	83 e0       	ldi	r24, 0x03	; 3
     82a:	38 07       	cpc	r19, r24
     82c:	b9 f7       	brne	.-18     	; 0x81c <twi_wait_for_ack+0x8>
    return (wait==MAX_WAIT? 0 : 1);
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	28 3e       	cpi	r18, 0xE8	; 232
     832:	33 40       	sbci	r19, 0x03	; 3
     834:	09 f4       	brne	.+2      	; 0x838 <twi_wait_for_ack+0x24>
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	08 95       	ret

0000083a <twi_send_byte>:
}

// TWI: send BYTE, wait for ACK
unsigned char twi_send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
     83a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
     83e:	84 e8       	ldi	r24, 0x84	; 132
     840:	80 93 bc 00 	sts	0x00BC, r24
	return (twi_wait_for_ack()) ? (TWSR & 0xF8) : 0 ;
     844:	0e 94 0a 04 	call	0x814	; 0x814 <twi_wait_for_ack>
     848:	88 23       	and	r24, r24
     84a:	19 f0       	breq	.+6      	; 0x852 <twi_send_byte+0x18>
     84c:	80 91 b9 00 	lds	r24, 0x00B9
     850:	88 7f       	andi	r24, 0xF8	; 248
}
     852:	08 95       	ret

00000854 <twi_start>:
// PRIVATE FUNCTIONS:

// TWI: send START condition, wait for ACK, send ADDRESS with R/W flag
// readwrite = 1 for read, 0 for write
unsigned char twi_start(unsigned char address, unsigned char readwrite)
{
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	c8 2f       	mov	r28, r24
     85a:	d6 2f       	mov	r29, r22
    unsigned char status;
    
    // START packet:
    TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     85c:	84 ea       	ldi	r24, 0xA4	; 164
     85e:	80 93 bc 00 	sts	0x00BC, r24
    if(!twi_wait_for_ack()){
     862:	0e 94 0a 04 	call	0x814	; 0x814 <twi_wait_for_ack>
     866:	81 11       	cpse	r24, r1
     868:	04 c0       	rjmp	.+8      	; 0x872 <twi_start+0x1e>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     86a:	94 e9       	ldi	r25, 0x94	; 148
     86c:	90 93 bc 00 	sts	0x00BC, r25
     870:	1c c0       	rjmp	.+56     	; 0x8aa <twi_start+0x56>
        twi_stop();
        return 0; // COMM failure
    }
    
    // ADDRESS packet:
    if(readwrite)
     872:	dd 23       	and	r29, r29
     874:	61 f0       	breq	.+24     	; 0x88e <twi_start+0x3a>
    { // READ
        status = twi_send_byte(((address<<1) + 1));
     876:	8c 2f       	mov	r24, r28
     878:	88 0f       	add	r24, r24
     87a:	8f 5f       	subi	r24, 0xFF	; 255
     87c:	0e 94 1d 04 	call	0x83a	; 0x83a <twi_send_byte>
        if(status== 0x48){ // ACK was not received - may not be connected/listening
     880:	88 34       	cpi	r24, 0x48	; 72
     882:	81 f4       	brne	.+32     	; 0x8a4 <twi_start+0x50>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     884:	84 e9       	ldi	r24, 0x94	; 148
     886:	80 93 bc 00 	sts	0x00BC, r24
    if(readwrite)
    { // READ
        status = twi_send_byte(((address<<1) + 1));
        if(status== 0x48){ // ACK was not received - may not be connected/listening
            twi_stop();    
            return 0;	// failure
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <twi_start+0x56>
        }	
    } else { // WRITE
        status = twi_send_byte(address<<1);
     88e:	8c 2f       	mov	r24, r28
     890:	88 0f       	add	r24, r24
     892:	0e 94 1d 04 	call	0x83a	; 0x83a <twi_send_byte>
        if(status== 0x20){ // ACK was not received - may not be connected/listening
     896:	80 32       	cpi	r24, 0x20	; 32
     898:	39 f4       	brne	.+14     	; 0x8a8 <twi_start+0x54>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     89a:	84 e9       	ldi	r24, 0x94	; 148
     89c:	80 93 bc 00 	sts	0x00BC, r24
        }	
    } else { // WRITE
        status = twi_send_byte(address<<1);
        if(status== 0x20){ // ACK was not received - may not be connected/listening
            twi_stop();
            return 0;	// failure
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	03 c0       	rjmp	.+6      	; 0x8aa <twi_start+0x56>
        }	        
    }
    return 1;	// success
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	01 c0       	rjmp	.+2      	; 0x8aa <twi_start+0x56>
     8a8:	81 e0       	ldi	r24, 0x01	; 1
    
}
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <m_read_register>:
	set(EIMSK,INT2); // demask the interrupt
	sei(); // enable global interrupts
}

unsigned char m_read_register(unsigned char addr, unsigned char reg)
{
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	c8 2f       	mov	r28, r24
     8b6:	d6 2f       	mov	r29, r22
    if(!twi_start(addr,WRITE)) return 0; // START + W
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	0e 94 2a 04 	call	0x854	; 0x854 <twi_start>
     8be:	88 23       	and	r24, r24
     8c0:	79 f0       	breq	.+30     	; 0x8e0 <m_read_register+0x30>
	if(!twi_send_byte(reg)) return 0;    // register to read
     8c2:	8d 2f       	mov	r24, r29
     8c4:	0e 94 1d 04 	call	0x83a	; 0x83a <twi_send_byte>
     8c8:	88 23       	and	r24, r24
     8ca:	51 f0       	breq	.+20     	; 0x8e0 <m_read_register+0x30>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     8cc:	84 e9       	ldi	r24, 0x94	; 148
     8ce:	80 93 bc 00 	sts	0x00BC, r24
unsigned char m_read_register(unsigned char addr, unsigned char reg)
{
    if(!twi_start(addr,WRITE)) return 0; // START + W
	if(!twi_send_byte(reg)) return 0;    // register to read
    twi_stop();                          // STOP
    if(!twi_start(addr,READ)) return 0;  // START + R
     8d2:	61 e0       	ldi	r22, 0x01	; 1
     8d4:	8c 2f       	mov	r24, r28
     8d6:	0e 94 2a 04 	call	0x854	; 0x854 <twi_start>
     8da:	81 11       	cpse	r24, r1
	return(twi_read_byte());             // return register value
     8dc:	0e 94 ff 03 	call	0x7fe	; 0x7fe <twi_read_byte>
}
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	08 95       	ret

000008e6 <m_write_register>:

unsigned char m_write_register(unsigned char addr, unsigned char reg, unsigned char value)
{
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	c6 2f       	mov	r28, r22
     8ec:	d4 2f       	mov	r29, r20
    if(!twi_start(addr,WRITE)) return 0; // START + W
     8ee:	60 e0       	ldi	r22, 0x00	; 0
     8f0:	0e 94 2a 04 	call	0x854	; 0x854 <twi_start>
     8f4:	88 23       	and	r24, r24
     8f6:	71 f0       	breq	.+28     	; 0x914 <m_write_register+0x2e>
	if(!twi_send_byte(reg)) return 0;    // register to write to
     8f8:	8c 2f       	mov	r24, r28
     8fa:	0e 94 1d 04 	call	0x83a	; 0x83a <twi_send_byte>
     8fe:	88 23       	and	r24, r24
     900:	49 f0       	breq	.+18     	; 0x914 <m_write_register+0x2e>
    if(!twi_send_byte(value)) return 0;  // value
     902:	8d 2f       	mov	r24, r29
     904:	0e 94 1d 04 	call	0x83a	; 0x83a <twi_send_byte>
     908:	88 23       	and	r24, r24
     90a:	21 f0       	breq	.+8      	; 0x914 <m_write_register+0x2e>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     90c:	84 e9       	ldi	r24, 0x94	; 148
     90e:	80 93 bc 00 	sts	0x00BC, r24
{
    if(!twi_start(addr,WRITE)) return 0; // START + W
	if(!twi_send_byte(reg)) return 0;    // register to write to
    if(!twi_send_byte(value)) return 0;  // value
    twi_stop();                          // STOP
    return(1);
     912:	81 e0       	ldi	r24, 0x01	; 1
}
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	08 95       	ret

0000091a <m_imu_init>:
#define MIMU            0x69

// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
     91e:	84 30       	cpi	r24, 0x04	; 4
     920:	08 f0       	brcs	.+2      	; 0x924 <m_imu_init+0xa>
     922:	60 c0       	rjmp	.+192    	; 0x9e4 <m_imu_init+0xca>
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
     924:	64 30       	cpi	r22, 0x04	; 4
     926:	08 f0       	brcs	.+2      	; 0x92a <m_imu_init+0x10>
     928:	5f c0       	rjmp	.+190    	; 0x9e8 <m_imu_init+0xce>
     92a:	d6 2f       	mov	r29, r22
     92c:	c8 2f       	mov	r28, r24

	m_bus_init();
     92e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <m_bus_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     932:	2f e5       	ldi	r18, 0x5F	; 95
     934:	8a ee       	ldi	r24, 0xEA	; 234
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	21 50       	subi	r18, 0x01	; 1
     93a:	80 40       	sbci	r24, 0x00	; 0
     93c:	90 40       	sbci	r25, 0x00	; 0
     93e:	e1 f7       	brne	.-8      	; 0x938 <m_imu_init+0x1e>
     940:	00 c0       	rjmp	.+0      	; 0x942 <m_imu_init+0x28>
     942:	00 00       	nop
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
     944:	65 e7       	ldi	r22, 0x75	; 117
     946:	89 e6       	ldi	r24, 0x69	; 105
     948:	0e 94 58 04 	call	0x8b0	; 0x8b0 <m_read_register>
     94c:	88 36       	cpi	r24, 0x68	; 104
     94e:	09 f0       	breq	.+2      	; 0x952 <m_imu_init+0x38>
     950:	4d c0       	rjmp	.+154    	; 0x9ec <m_imu_init+0xd2>
    
    // SET THE CLOCK SOURCE TO X-AXIS GYRO
    // reg: 0x68 (PWR_MGMT_1)
    // bits 0-2 control clock source
    // value: 0x01 (clock to PLL on X-axis gyro reference)
    m_write_register(MIMU,0x6B,0x01);
     952:	41 e0       	ldi	r20, 0x01	; 1
     954:	6b e6       	ldi	r22, 0x6B	; 107
     956:	89 e6       	ldi	r24, 0x69	; 105
     958:	0e 94 73 04 	call	0x8e6	; 0x8e6 <m_write_register>

    // SET THE ACCEL FULL-SCALE +/- RANGE (0=2G, 1=4G, 2=8G, 3=16G)
    // reg: 0x1C (ACCEL_CONFIG)
    // bits: 3-4 set +/- full-scale range
    m_write_register(MIMU,0x1C,accel_scale<<3);
     95c:	4c 2f       	mov	r20, r28
     95e:	44 0f       	add	r20, r20
     960:	44 0f       	add	r20, r20
     962:	44 0f       	add	r20, r20
     964:	6c e1       	ldi	r22, 0x1C	; 28
     966:	89 e6       	ldi	r24, 0x69	; 105
     968:	0e 94 73 04 	call	0x8e6	; 0x8e6 <m_write_register>

    // SET THE GYRO FULL-SCALE +/- RANGE (0=250, 1=500, 2=1000, 3=2000 DEG/SEC)
    // reg: 0x1B (GYRO_CONFIG)
    // bits: 3-4 set +/- full-scale range
    // value: 0x00
    m_write_register(MIMU,0x1B,gyro_scale<<3); // this shouldn't be doing anything
     96c:	4d 2f       	mov	r20, r29
     96e:	44 0f       	add	r20, r20
     970:	44 0f       	add	r20, r20
     972:	44 0f       	add	r20, r20
     974:	6b e1       	ldi	r22, 0x1B	; 27
     976:	89 e6       	ldi	r24, 0x69	; 105
     978:	0e 94 73 04 	call	0x8e6	; 0x8e6 <m_write_register>
      
    // SET THE MPU INTO I2C BYPASS MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 1 (1=bypass, 0=normal op)
    m_write_register(MIMU,0x37,0x02); // switch the MPU into bypass mode
     97c:	42 e0       	ldi	r20, 0x02	; 2
     97e:	67 e3       	ldi	r22, 0x37	; 55
     980:	89 e6       	ldi	r24, 0x69	; 105
     982:	0e 94 73 04 	call	0x8e6	; 0x8e6 <m_write_register>
    
    // CONFIGURE THE MAGNETOMETER
    // address: 0x1E (for the magnetometer)
    // reg: 2 (mode register)
    // val: 0 (continuous output)
    m_write_register(0x1E,2,0); // set the mag. to continuous output mode
     986:	40 e0       	ldi	r20, 0x00	; 0
     988:	62 e0       	ldi	r22, 0x02	; 2
     98a:	8e e1       	ldi	r24, 0x1E	; 30
     98c:	0e 94 73 04 	call	0x8e6	; 0x8e6 <m_write_register>
    
    // SET THE MPU TO NORMAL I2C MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 5 (1=master, 0=passthrough)
    m_write_register(MIMU,0x37,0);    // switch the MPU out of bypass mode
     990:	40 e0       	ldi	r20, 0x00	; 0
     992:	67 e3       	ldi	r22, 0x37	; 55
     994:	89 e6       	ldi	r24, 0x69	; 105
     996:	0e 94 73 04 	call	0x8e6	; 0x8e6 <m_write_register>
    // SET THE AUXILLIARY I2C SAMPLE RATE
    // reg: 0x34 (I2C_SLC4_CTRL) 
    // value: 0x1E (30 > 8000/30 = 266.6Hz)
    // reg: 0x67 (MST_DELAY_CTRL)
    // bit: 0 (1=slowed down, 0=full speed)
    m_write_register(MIMU,0x34,0x1E);
     99a:	4e e1       	ldi	r20, 0x1E	; 30
     99c:	64 e3       	ldi	r22, 0x34	; 52
     99e:	89 e6       	ldi	r24, 0x69	; 105
     9a0:	0e 94 73 04 	call	0x8e6	; 0x8e6 <m_write_register>
    m_write_register(MIMU,0x67,0x01);
     9a4:	41 e0       	ldi	r20, 0x01	; 1
     9a6:	67 e6       	ldi	r22, 0x67	; 103
     9a8:	89 e6       	ldi	r24, 0x69	; 105
     9aa:	0e 94 73 04 	call	0x8e6	; 0x8e6 <m_write_register>
    // ADJUST the auxilliary I2C port clock speed, etc.
    // reg: 0x24 (MST_CTRL)
    // bit: 4 = 1 (stop then start), 2 (restart)
    // bit: 0-3 = clock prescaler (0x0D = 400kHz)
    // not necessary, perhaps.  We shall see?
    m_write_register(MIMU,0x24,0x1D);
     9ae:	4d e1       	ldi	r20, 0x1D	; 29
     9b0:	64 e2       	ldi	r22, 0x24	; 36
     9b2:	89 e6       	ldi	r24, 0x69	; 105
     9b4:	0e 94 73 04 	call	0x8e6	; 0x8e6 <m_write_register>

    // SET THE MAGNETOMETER ADDRESS
    // reg: 0x25 (I2C_SLC0_ADDR)
    // value: 0x1E (from the magnetometer datasheet)
    // notes: for read from slave, set bit 7 to 1; to write, set bit 7 to 0
    m_write_register(MIMU,0x25,0x9E);
     9b8:	4e e9       	ldi	r20, 0x9E	; 158
     9ba:	65 e2       	ldi	r22, 0x25	; 37
     9bc:	89 e6       	ldi	r24, 0x69	; 105
     9be:	0e 94 73 04 	call	0x8e6	; 0x8e6 <m_write_register>

    // SET THE MAGNETOMETER DATA START ADDRESS
    // reg: 0x26 (I2C_SLV0_REG)
    // val: 3 (X high byte)
    m_write_register(MIMU,0x26,3);
     9c2:	43 e0       	ldi	r20, 0x03	; 3
     9c4:	66 e2       	ldi	r22, 0x26	; 38
     9c6:	89 e6       	ldi	r24, 0x69	; 105
     9c8:	0e 94 73 04 	call	0x8e6	; 0x8e6 <m_write_register>
    // reg: 0x27 (I2C_SLV0_CTRL
    // bit: 0-3 (# of bytes to ingest) = 6
    //      4: byte/word grouping control
    //      6: swap bytes
    //      7: enable slave (1=on, 0=off)
    m_write_register(MIMU,0x27,0x96);
     9cc:	46 e9       	ldi	r20, 0x96	; 150
     9ce:	67 e2       	ldi	r22, 0x27	; 39
     9d0:	89 e6       	ldi	r24, 0x69	; 105
     9d2:	0e 94 73 04 	call	0x8e6	; 0x8e6 <m_write_register>
    
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
     9d6:	40 e2       	ldi	r20, 0x20	; 32
     9d8:	6a e6       	ldi	r22, 0x6A	; 106
     9da:	89 e6       	ldi	r24, 0x69	; 105
     9dc:	0e 94 73 04 	call	0x8e6	; 0x8e6 <m_write_register>
    
    return 1;   // SUCCESS!
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	05 c0       	rjmp	.+10     	; 0x9ee <m_imu_init+0xd4>
// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	03 c0       	rjmp	.+6      	; 0x9ee <m_imu_init+0xd4>
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	01 c0       	rjmp	.+2      	; 0x9ee <m_imu_init+0xd4>

	m_bus_init();
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
     9ec:	80 e0       	ldi	r24, 0x00	; 0
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
    
    return 1;   // SUCCESS!
}
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	08 95       	ret

000009f4 <m_imu_raw>:
// (41:42) TH:TL
// (43:44) GXH:GXL, (45:46) GYH:GYL, (47:48) GZH:GZL
// (49:4A) MXH:MXL, (4B:4C) MYH:MYL, (4D:4E) MZH:MZL

unsigned char m_imu_raw(int* raw_data)
{
     9f4:	cf 92       	push	r12
     9f6:	df 92       	push	r13
     9f8:	ef 92       	push	r14
     9fa:	ff 92       	push	r15
     9fc:	1f 93       	push	r17
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	cd b7       	in	r28, 0x3d	; 61
     a04:	de b7       	in	r29, 0x3e	; 62
     a06:	64 97       	sbiw	r28, 0x14	; 20
     a08:	0f b6       	in	r0, 0x3f	; 63
     a0a:	f8 94       	cli
     a0c:	de bf       	out	0x3e, r29	; 62
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	cd bf       	out	0x3d, r28	; 61
     a12:	6c 01       	movw	r12, r24
     a14:	ce 01       	movw	r24, r28
     a16:	01 96       	adiw	r24, 0x01	; 1
     a18:	7c 01       	movw	r14, r24
     a1a:	1e e4       	ldi	r17, 0x4E	; 78
    unsigned char buffer[20]; 
    int i;
    
    for(i=0;i<20;i++) // read 20 bytes (6 accel + 2 temp + 6 gyro + 6 mag)
    {
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
     a1c:	61 2f       	mov	r22, r17
     a1e:	89 e6       	ldi	r24, 0x69	; 105
     a20:	0e 94 58 04 	call	0x8b0	; 0x8b0 <m_read_register>
     a24:	f7 01       	movw	r30, r14
     a26:	81 93       	st	Z+, r24
     a28:	7f 01       	movw	r14, r30
     a2a:	11 50       	subi	r17, 0x01	; 1
unsigned char m_imu_raw(int* raw_data)
{
    unsigned char buffer[20]; 
    int i;
    
    for(i=0;i<20;i++) // read 20 bytes (6 accel + 2 temp + 6 gyro + 6 mag)
     a2c:	1a 33       	cpi	r17, 0x3A	; 58
     a2e:	b1 f7       	brne	.-20     	; 0xa1c <m_imu_raw+0x28>
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
    }
    // buffer: [MZL, MZH, MYL, MYH, MXL, MXH, GZL, GZH, GYL, GYH, GXL, GXH, TL, TH, AZL, AZH, AYL, AYH, AXL, AXH]
    for(i=0;i<3;i++)
    {
        raw_data[2-i] = *(int*)&buffer[14+2*i]; // [2] = [AZL:AZH], [1] = [AYL:AYH], [0] = [AXL:AXH]
     a30:	8f 85       	ldd	r24, Y+15	; 0x0f
     a32:	98 89       	ldd	r25, Y+16	; 0x10
     a34:	f6 01       	movw	r30, r12
     a36:	95 83       	std	Z+5, r25	; 0x05
     a38:	84 83       	std	Z+4, r24	; 0x04
        raw_data[5-i] = *(int*)&buffer[6+2*i];  // [5] = [GZL:GZH], [4] = [GYL:GYH], [3] = [GXL:GXH]
     a3a:	8f 81       	ldd	r24, Y+7	; 0x07
     a3c:	98 85       	ldd	r25, Y+8	; 0x08
     a3e:	93 87       	std	Z+11, r25	; 0x0b
     a40:	82 87       	std	Z+10, r24	; 0x0a
        raw_data[8-i] = *(int*)&buffer[2*i];    // [8] = [MZL:MZH], [7] = [MYL:MYH], [6] = [MXL:MXH]
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	9a 81       	ldd	r25, Y+2	; 0x02
     a46:	91 8b       	std	Z+17, r25	; 0x11
     a48:	80 8b       	std	Z+16, r24	; 0x10
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
    }
    // buffer: [MZL, MZH, MYL, MYH, MXL, MXH, GZL, GZH, GYL, GYH, GXL, GXH, TL, TH, AZL, AZH, AYL, AYH, AXL, AXH]
    for(i=0;i<3;i++)
    {
        raw_data[2-i] = *(int*)&buffer[14+2*i]; // [2] = [AZL:AZH], [1] = [AYL:AYH], [0] = [AXL:AXH]
     a4a:	89 89       	ldd	r24, Y+17	; 0x11
     a4c:	9a 89       	ldd	r25, Y+18	; 0x12
     a4e:	93 83       	std	Z+3, r25	; 0x03
     a50:	82 83       	std	Z+2, r24	; 0x02
        raw_data[5-i] = *(int*)&buffer[6+2*i];  // [5] = [GZL:GZH], [4] = [GYL:GYH], [3] = [GXL:GXH]
     a52:	89 85       	ldd	r24, Y+9	; 0x09
     a54:	9a 85       	ldd	r25, Y+10	; 0x0a
     a56:	91 87       	std	Z+9, r25	; 0x09
     a58:	80 87       	std	Z+8, r24	; 0x08
        raw_data[8-i] = *(int*)&buffer[2*i];    // [8] = [MZL:MZH], [7] = [MYL:MYH], [6] = [MXL:MXH]
     a5a:	8b 81       	ldd	r24, Y+3	; 0x03
     a5c:	9c 81       	ldd	r25, Y+4	; 0x04
     a5e:	97 87       	std	Z+15, r25	; 0x0f
     a60:	86 87       	std	Z+14, r24	; 0x0e
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
    }
    // buffer: [MZL, MZH, MYL, MYH, MXL, MXH, GZL, GZH, GYL, GYH, GXL, GXH, TL, TH, AZL, AZH, AYL, AYH, AXL, AXH]
    for(i=0;i<3;i++)
    {
        raw_data[2-i] = *(int*)&buffer[14+2*i]; // [2] = [AZL:AZH], [1] = [AYL:AYH], [0] = [AXL:AXH]
     a62:	8b 89       	ldd	r24, Y+19	; 0x13
     a64:	9c 89       	ldd	r25, Y+20	; 0x14
     a66:	91 83       	std	Z+1, r25	; 0x01
     a68:	80 83       	st	Z, r24
        raw_data[5-i] = *(int*)&buffer[6+2*i];  // [5] = [GZL:GZH], [4] = [GYL:GYH], [3] = [GXL:GXH]
     a6a:	8b 85       	ldd	r24, Y+11	; 0x0b
     a6c:	9c 85       	ldd	r25, Y+12	; 0x0c
     a6e:	97 83       	std	Z+7, r25	; 0x07
     a70:	86 83       	std	Z+6, r24	; 0x06
        raw_data[8-i] = *(int*)&buffer[2*i];    // [8] = [MZL:MZH], [7] = [MYL:MYH], [6] = [MXL:MXH]
     a72:	8d 81       	ldd	r24, Y+5	; 0x05
     a74:	9e 81       	ldd	r25, Y+6	; 0x06
     a76:	95 87       	std	Z+13, r25	; 0x0d
     a78:	84 87       	std	Z+12, r24	; 0x0c
    }
    return 1;
}
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	64 96       	adiw	r28, 0x14	; 20
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	f8 94       	cli
     a82:	de bf       	out	0x3e, r29	; 62
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	cd bf       	out	0x3d, r28	; 61
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	ff 90       	pop	r15
     a90:	ef 90       	pop	r14
     a92:	df 90       	pop	r13
     a94:	cf 90       	pop	r12
     a96:	08 95       	ret

00000a98 <m_rf_read>:
	
	return 1;
}

char m_rf_read(char* buffer, char packet_length)
{
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	9c 01       	movw	r18, r24

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     a9e:	84 ea       	ldi	r24, 0xA4	; 164
     aa0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     aa4:	ec eb       	ldi	r30, 0xBC	; 188
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	90 81       	ld	r25, Z
     aaa:	99 23       	and	r25, r25
     aac:	ec f7       	brge	.-6      	; 0xaa8 <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
     aae:	81 e5       	ldi	r24, 0x51	; 81
     ab0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     ab4:	84 e8       	ldi	r24, 0x84	; 132
     ab6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
     aba:	ec eb       	ldi	r30, 0xBC	; 188
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	90 81       	ld	r25, Z
     ac0:	99 23       	and	r25, r25
     ac2:	ec f7       	brge	.-6      	; 0xabe <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
     ac4:	80 91 b9 00 	lds	r24, 0x00B9
     ac8:	88 7f       	andi	r24, 0xF8	; 248
     aca:	88 34       	cpi	r24, 0x48	; 72
     acc:	29 f4       	brne	.+10     	; 0xad8 <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     ace:	84 e9       	ldi	r24, 0x94	; 148
     ad0:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	41 c0       	rjmp	.+130    	; 0xb5a <__stack+0x5b>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     ad8:	84 ec       	ldi	r24, 0xC4	; 196
     ada:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     ade:	ec eb       	ldi	r30, 0xBC	; 188
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	90 81       	ld	r25, Z
     ae4:	99 23       	and	r25, r25
     ae6:	ec f7       	brge	.-6      	; 0xae2 <m_rf_read+0x4a>
	bytes = TWDR;
     ae8:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
     aec:	46 13       	cpse	r20, r22
     aee:	09 c0       	rjmp	.+18     	; 0xb02 <__stack+0x3>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
     af0:	84 2f       	mov	r24, r20
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	01 97       	sbiw	r24, 0x01	; 1
     af6:	18 16       	cp	r1, r24
     af8:	19 06       	cpc	r1, r25
     afa:	44 f0       	brlt	.+16     	; 0xb0c <__stack+0xd>
     afc:	40 e0       	ldi	r20, 0x00	; 0
     afe:	50 e0       	ldi	r21, 0x00	; 0
     b00:	1a c0       	rjmp	.+52     	; 0xb36 <__stack+0x37>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     b02:	84 e9       	ldi	r24, 0x94	; 148
     b04:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	27 c0       	rjmp	.+78     	; 0xb5a <__stack+0x5b>
     b0c:	d9 01       	movw	r26, r18
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	41 50       	subi	r20, 0x01	; 1
     b12:	51 09       	sbc	r21, r1
     b14:	b9 01       	movw	r22, r18
     b16:	64 0f       	add	r22, r20
     b18:	75 1f       	adc	r23, r21
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     b1a:	ec eb       	ldi	r30, 0xBC	; 188
     b1c:	f0 e0       	ldi	r31, 0x00	; 0
     b1e:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
     b20:	cb eb       	ldi	r28, 0xBB	; 187
     b22:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     b24:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     b26:	90 81       	ld	r25, Z
     b28:	99 23       	and	r25, r25
     b2a:	ec f7       	brge	.-6      	; 0xb26 <__stack+0x27>
		buffer[i] = TWDR;
     b2c:	98 81       	ld	r25, Y
     b2e:	9d 93       	st	X+, r25
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
     b30:	a6 17       	cp	r26, r22
     b32:	b7 07       	cpc	r27, r23
     b34:	b9 f7       	brne	.-18     	; 0xb24 <__stack+0x25>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
     b36:	84 e8       	ldi	r24, 0x84	; 132
     b38:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     b3c:	ec eb       	ldi	r30, 0xBC	; 188
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	90 81       	ld	r25, Z
     b42:	99 23       	and	r25, r25
     b44:	ec f7       	brge	.-6      	; 0xb40 <__stack+0x41>
	buffer[i++] = TWDR;
     b46:	80 91 bb 00 	lds	r24, 0x00BB
     b4a:	f9 01       	movw	r30, r18
     b4c:	e4 0f       	add	r30, r20
     b4e:	f5 1f       	adc	r31, r21
     b50:	80 83       	st	Z, r24
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     b52:	84 e9       	ldi	r24, 0x94	; 148
     b54:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
     b58:	81 e0       	ldi	r24, 0x01	; 1
}
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	08 95       	ret

00000b60 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
     b66:	80 ea       	ldi	r24, 0xA0	; 160
     b68:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
     b6c:	82 e1       	ldi	r24, 0x12	; 18
     b6e:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
     b70:	09 b4       	in	r0, 0x29	; 41
     b72:	00 fe       	sbrs	r0, 0
     b74:	fd cf       	rjmp	.-6      	; 0xb70 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
     b76:	80 e9       	ldi	r24, 0x90	; 144
     b78:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
     b7c:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
     b80:	10 92 41 01 	sts	0x0141, r1
	cdc_line_rtsdtr = 0;
     b84:	10 92 3e 01 	sts	0x013E, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
     b88:	8c e0       	ldi	r24, 0x0C	; 12
     b8a:	80 93 e2 00 	sts	0x00E2, r24
	sei();
     b8e:	78 94       	sei
     b90:	08 95       	ret

00000b92 <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     b96:	90 91 41 01 	lds	r25, 0x0141
     b9a:	99 23       	and	r25, r25
     b9c:	09 f4       	brne	.+2      	; 0xba0 <m_usb_tx_char+0xe>
     b9e:	4c c0       	rjmp	.+152    	; 0xc38 <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     ba0:	9f b7       	in	r25, 0x3f	; 63
	cli();
     ba2:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     ba4:	24 e0       	ldi	r18, 0x04	; 4
     ba6:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     baa:	20 91 3f 01 	lds	r18, 0x013F
     bae:	22 23       	and	r18, r18
     bb0:	49 f0       	breq	.+18     	; 0xbc4 <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
     bb2:	20 91 e8 00 	lds	r18, 0x00E8
     bb6:	25 fd       	sbrc	r18, 5
     bb8:	03 c0       	rjmp	.+6      	; 0xbc0 <m_usb_tx_char+0x2e>
			SREG = intr_state;
     bba:	9f bf       	out	0x3f, r25	; 63
			return -1;
     bbc:	8f ef       	ldi	r24, 0xFF	; 255
     bbe:	41 c0       	rjmp	.+130    	; 0xc42 <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
     bc0:	10 92 3f 01 	sts	0x013F, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
     bc4:	30 91 e4 00 	lds	r19, 0x00E4
     bc8:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     bca:	20 91 e8 00 	lds	r18, 0x00E8
     bce:	25 fd       	sbrc	r18, 5
     bd0:	24 c0       	rjmp	.+72     	; 0xc1a <m_usb_tx_char+0x88>
		SREG = intr_state;
     bd2:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     bd4:	90 91 e4 00 	lds	r25, 0x00E4
     bd8:	93 17       	cp	r25, r19
     bda:	81 f0       	breq	.+32     	; 0xbfc <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     bdc:	90 91 41 01 	lds	r25, 0x0141
     be0:	99 23       	and	r25, r25
     be2:	61 f1       	breq	.+88     	; 0xc3c <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
     be4:	a9 ee       	ldi	r26, 0xE9	; 233
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     bea:	e8 ee       	ldi	r30, 0xE8	; 232
     bec:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     bee:	c4 ee       	ldi	r28, 0xE4	; 228
     bf0:	d0 e0       	ldi	r29, 0x00	; 0
     bf2:	0d c0       	rjmp	.+26     	; 0xc0e <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
     bf4:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     bf6:	98 81       	ld	r25, Y
     bf8:	93 13       	cpse	r25, r19
     bfa:	05 c0       	rjmp	.+10     	; 0xc06 <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	80 93 3f 01 	sts	0x013F, r24
			return -1;
     c02:	8f ef       	ldi	r24, 0xFF	; 255
     c04:	1e c0       	rjmp	.+60     	; 0xc42 <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     c06:	90 91 41 01 	lds	r25, 0x0141
     c0a:	99 23       	and	r25, r25
     c0c:	c9 f0       	breq	.+50     	; 0xc40 <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
     c0e:	9f b7       	in	r25, 0x3f	; 63
		cli();
     c10:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
     c12:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     c14:	20 81       	ld	r18, Z
     c16:	25 ff       	sbrs	r18, 5
     c18:	ed cf       	rjmp	.-38     	; 0xbf4 <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
     c1a:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     c1e:	80 91 e8 00 	lds	r24, 0x00E8
     c22:	85 fd       	sbrc	r24, 5
     c24:	03 c0       	rjmp	.+6      	; 0xc2c <m_usb_tx_char+0x9a>
     c26:	8a e3       	ldi	r24, 0x3A	; 58
     c28:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     c2c:	85 e0       	ldi	r24, 0x05	; 5
     c2e:	80 93 40 01 	sts	0x0140, r24
	SREG = intr_state;
     c32:	9f bf       	out	0x3f, r25	; 63
	return 0;
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	05 c0       	rjmp	.+10     	; 0xc42 <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     c38:	8f ef       	ldi	r24, 0xFF	; 255
     c3a:	03 c0       	rjmp	.+6      	; 0xc42 <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     c3c:	8f ef       	ldi	r24, 0xFF	; 255
     c3e:	01 c0       	rjmp	.+2      	; 0xc42 <m_usb_tx_char+0xb0>
     c40:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	08 95       	ret

00000c48 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
     c48:	1f 92       	push	r1
     c4a:	0f 92       	push	r0
     c4c:	0f b6       	in	r0, 0x3f	; 63
     c4e:	0f 92       	push	r0
     c50:	11 24       	eor	r1, r1
     c52:	8f 93       	push	r24
     c54:	9f 93       	push	r25
     c56:	ef 93       	push	r30
     c58:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
     c5a:	e1 ee       	ldi	r30, 0xE1	; 225
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
        UDINT = 0;
     c60:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
     c62:	83 ff       	sbrs	r24, 3
     c64:	11 c0       	rjmp	.+34     	; 0xc88 <__vector_10+0x40>
		UENUM = 0;
     c66:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
     c70:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
     c74:	92 e1       	ldi	r25, 0x12	; 18
     c76:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
     c7a:	98 e0       	ldi	r25, 0x08	; 8
     c7c:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
     c80:	10 92 41 01 	sts	0x0141, r1
		cdc_line_rtsdtr = 0;
     c84:	10 92 3e 01 	sts	0x013E, r1
        }
	if (intbits & (1<<SOFI)) {
     c88:	82 ff       	sbrs	r24, 2
     c8a:	13 c0       	rjmp	.+38     	; 0xcb2 <__vector_10+0x6a>
		if (usb_configuration) {
     c8c:	80 91 41 01 	lds	r24, 0x0141
     c90:	88 23       	and	r24, r24
     c92:	79 f0       	breq	.+30     	; 0xcb2 <__vector_10+0x6a>
			t = transmit_flush_timer;
     c94:	80 91 40 01 	lds	r24, 0x0140
			if (t) {
     c98:	88 23       	and	r24, r24
     c9a:	59 f0       	breq	.+22     	; 0xcb2 <__vector_10+0x6a>
				transmit_flush_timer = --t;
     c9c:	81 50       	subi	r24, 0x01	; 1
     c9e:	80 93 40 01 	sts	0x0140, r24
				if (!t) {
     ca2:	81 11       	cpse	r24, r1
     ca4:	06 c0       	rjmp	.+12     	; 0xcb2 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
     ca6:	84 e0       	ldi	r24, 0x04	; 4
     ca8:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
     cac:	8a e3       	ldi	r24, 0x3A	; 58
     cae:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
     cb2:	ff 91       	pop	r31
     cb4:	ef 91       	pop	r30
     cb6:	9f 91       	pop	r25
     cb8:	8f 91       	pop	r24
     cba:	0f 90       	pop	r0
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	0f 90       	pop	r0
     cc0:	1f 90       	pop	r1
     cc2:	18 95       	reti

00000cc4 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
     cc4:	1f 92       	push	r1
     cc6:	0f 92       	push	r0
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	0f 92       	push	r0
     ccc:	11 24       	eor	r1, r1
     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	2f 93       	push	r18
     cd4:	3f 93       	push	r19
     cd6:	4f 93       	push	r20
     cd8:	5f 93       	push	r21
     cda:	6f 93       	push	r22
     cdc:	7f 93       	push	r23
     cde:	8f 93       	push	r24
     ce0:	9f 93       	push	r25
     ce2:	af 93       	push	r26
     ce4:	bf 93       	push	r27
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	ef 93       	push	r30
     cec:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
     cee:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
     cf2:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
     cf6:	83 ff       	sbrs	r24, 3
     cf8:	4c c1       	rjmp	.+664    	; 0xf92 <__vector_11+0x2ce>
                bmRequestType = UEDATX;
     cfa:	e1 ef       	ldi	r30, 0xF1	; 241
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	60 81       	ld	r22, Z
                bRequest = UEDATX;
     d00:	80 81       	ld	r24, Z
                wValue = UEDATX;
     d02:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
     d04:	90 81       	ld	r25, Z
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	39 2b       	or	r19, r25
                wIndex = UEDATX;
     d0a:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
     d0c:	90 81       	ld	r25, Z
     d0e:	50 e0       	ldi	r21, 0x00	; 0
     d10:	59 2b       	or	r21, r25
                wLength = UEDATX;
     d12:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
     d14:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
     d16:	92 ef       	ldi	r25, 0xF2	; 242
     d18:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
     d1c:	86 30       	cpi	r24, 0x06	; 6
     d1e:	09 f0       	breq	.+2      	; 0xd22 <__vector_11+0x5e>
     d20:	58 c0       	rjmp	.+176    	; 0xdd2 <__vector_11+0x10e>
     d22:	04 c0       	rjmp	.+8      	; 0xd2c <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
     d24:	81 e2       	ldi	r24, 0x21	; 33
     d26:	80 93 eb 00 	sts	0x00EB, r24
					return;
     d2a:	3a c1       	rjmp	.+628    	; 0xfa0 <__vector_11+0x2dc>
     d2c:	66 e0       	ldi	r22, 0x06	; 6
     d2e:	8b eb       	ldi	r24, 0xBB	; 187
     d30:	90 e0       	ldi	r25, 0x00	; 0
				}
				desc_val = pgm_read_word(list);
     d32:	fc 01       	movw	r30, r24
     d34:	a5 91       	lpm	r26, Z+
     d36:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
     d38:	2a 17       	cp	r18, r26
     d3a:	3b 07       	cpc	r19, r27
     d3c:	11 f0       	breq	.+4      	; 0xd42 <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
     d3e:	07 96       	adiw	r24, 0x07	; 7
					continue;
     d40:	23 c0       	rjmp	.+70     	; 0xd88 <__vector_11+0xc4>
				}
				list += 2;
     d42:	fc 01       	movw	r30, r24
     d44:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
     d46:	a5 91       	lpm	r26, Z+
     d48:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
     d4a:	4a 17       	cp	r20, r26
     d4c:	5b 07       	cpc	r21, r27
     d4e:	11 f0       	breq	.+4      	; 0xd54 <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
     d50:	07 96       	adiw	r24, 0x07	; 7
					continue;
     d52:	1a c0       	rjmp	.+52     	; 0xd88 <__vector_11+0xc4>
				}
				list += 2;
     d54:	fc 01       	movw	r30, r24
     d56:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
     d58:	45 91       	lpm	r20, Z+
     d5a:	54 91       	lpm	r21, Z
				list += 2;
     d5c:	fc 01       	movw	r30, r24
     d5e:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
     d60:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
     d62:	87 2f       	mov	r24, r23
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
     d68:	8f 3f       	cpi	r24, 0xFF	; 255
     d6a:	91 05       	cpc	r25, r1
     d6c:	19 f0       	breq	.+6      	; 0xd74 <__vector_11+0xb0>
     d6e:	10 f0       	brcs	.+4      	; 0xd74 <__vector_11+0xb0>
     d70:	8f ef       	ldi	r24, 0xFF	; 255
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	82 17       	cp	r24, r18
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__vector_11+0xb6>
     d78:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
     d7a:	a8 ee       	ldi	r26, 0xE8	; 232
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     d7e:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     d80:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
     d82:	c1 ef       	ldi	r28, 0xF1	; 241
     d84:	d0 e0       	ldi	r29, 0x00	; 0
     d86:	03 c0       	rjmp	.+6      	; 0xd8e <__vector_11+0xca>
     d88:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
     d8a:	99 f6       	brne	.-90     	; 0xd32 <__vector_11+0x6e>
     d8c:	cb cf       	rjmp	.-106    	; 0xd24 <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
     d8e:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
     d90:	98 2f       	mov	r25, r24
     d92:	95 70       	andi	r25, 0x05	; 5
     d94:	e1 f3       	breq	.-8      	; 0xd8e <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
     d96:	82 fd       	sbrc	r24, 2
     d98:	03 c1       	rjmp	.+518    	; 0xfa0 <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     d9a:	32 2f       	mov	r19, r18
     d9c:	21 31       	cpi	r18, 0x11	; 17
     d9e:	08 f0       	brcs	.+2      	; 0xda2 <__vector_11+0xde>
     da0:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
     da2:	33 23       	and	r19, r19
     da4:	09 f4       	brne	.+2      	; 0xda8 <__vector_11+0xe4>
     da6:	f9 c0       	rjmp	.+498    	; 0xf9a <__vector_11+0x2d6>
     da8:	fa 01       	movw	r30, r20
     daa:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
     dac:	94 91       	lpm	r25, Z
     dae:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
     db0:	81 50       	subi	r24, 0x01	; 1
     db2:	31 96       	adiw	r30, 0x01	; 1
     db4:	81 11       	cpse	r24, r1
     db6:	fa cf       	rjmp	.-12     	; 0xdac <__vector_11+0xe8>
     db8:	8f ef       	ldi	r24, 0xFF	; 255
     dba:	83 0f       	add	r24, r19
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	01 96       	adiw	r24, 0x01	; 1
     dc0:	48 0f       	add	r20, r24
     dc2:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
     dc4:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     dc6:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
     dc8:	21 11       	cpse	r18, r1
     dca:	e1 cf       	rjmp	.-62     	; 0xd8e <__vector_11+0xca>
     dcc:	30 31       	cpi	r19, 0x10	; 16
     dce:	f9 f2       	breq	.-66     	; 0xd8e <__vector_11+0xca>
     dd0:	e7 c0       	rjmp	.+462    	; 0xfa0 <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
     dd2:	85 30       	cpi	r24, 0x05	; 5
     dd4:	61 f4       	brne	.+24     	; 0xdee <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     dd6:	8e ef       	ldi	r24, 0xFE	; 254
     dd8:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     ddc:	e8 ee       	ldi	r30, 0xE8	; 232
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	80 ff       	sbrs	r24, 0
     de4:	fd cf       	rjmp	.-6      	; 0xde0 <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
     de6:	20 68       	ori	r18, 0x80	; 128
     de8:	20 93 e3 00 	sts	0x00E3, r18
			return;
     dec:	d9 c0       	rjmp	.+434    	; 0xfa0 <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
     dee:	89 30       	cpi	r24, 0x09	; 9
     df0:	09 f0       	breq	.+2      	; 0xdf4 <__vector_11+0x130>
     df2:	35 c0       	rjmp	.+106    	; 0xe5e <__vector_11+0x19a>
     df4:	61 11       	cpse	r22, r1
     df6:	cd c0       	rjmp	.+410    	; 0xf92 <__vector_11+0x2ce>
			usb_configuration = wValue;
     df8:	20 93 41 01 	sts	0x0141, r18
			cdc_line_rtsdtr = 0;
     dfc:	10 92 3e 01 	sts	0x013E, r1
			transmit_flush_timer = 0;
     e00:	10 92 40 01 	sts	0x0140, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     e04:	8e ef       	ldi	r24, 0xFE	; 254
     e06:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     e0a:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
     e0c:	24 e6       	ldi	r18, 0x64	; 100
     e0e:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
     e10:	c9 ee       	ldi	r28, 0xE9	; 233
     e12:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
     e14:	ab ee       	ldi	r26, 0xEB	; 235
     e16:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
     e18:	0c ee       	ldi	r16, 0xEC	; 236
     e1a:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
     e1c:	6d ee       	ldi	r22, 0xED	; 237
     e1e:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
     e20:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
     e22:	a9 01       	movw	r20, r18
     e24:	4f 5f       	subi	r20, 0xFF	; 255
     e26:	5f 4f       	sbci	r21, 0xFF	; 255
     e28:	f9 01       	movw	r30, r18
     e2a:	94 91       	lpm	r25, Z
				UECONX = en;
     e2c:	9c 93       	st	X, r25
				if (en) {
     e2e:	99 23       	and	r25, r25
     e30:	61 f0       	breq	.+24     	; 0xe4a <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
     e32:	fa 01       	movw	r30, r20
     e34:	44 91       	lpm	r20, Z
     e36:	f8 01       	movw	r30, r16
     e38:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
     e3a:	f9 01       	movw	r30, r18
     e3c:	32 96       	adiw	r30, 0x02	; 2
     e3e:	94 91       	lpm	r25, Z
     e40:	2d 5f       	subi	r18, 0xFD	; 253
     e42:	3f 4f       	sbci	r19, 0xFF	; 255
     e44:	fb 01       	movw	r30, r22
     e46:	90 83       	st	Z, r25
     e48:	01 c0       	rjmp	.+2      	; 0xe4c <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
     e4a:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     e4c:	8f 5f       	subi	r24, 0xFF	; 255
     e4e:	85 30       	cpi	r24, 0x05	; 5
     e50:	39 f7       	brne	.-50     	; 0xe20 <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
     e52:	ea ee       	ldi	r30, 0xEA	; 234
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	8e e1       	ldi	r24, 0x1E	; 30
     e58:	80 83       	st	Z, r24
        		UERST = 0;
     e5a:	10 82       	st	Z, r1
			return;
     e5c:	a1 c0       	rjmp	.+322    	; 0xfa0 <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
     e5e:	88 30       	cpi	r24, 0x08	; 8
     e60:	81 f4       	brne	.+32     	; 0xe82 <__vector_11+0x1be>
     e62:	60 38       	cpi	r22, 0x80	; 128
     e64:	09 f0       	breq	.+2      	; 0xe68 <__vector_11+0x1a4>
     e66:	95 c0       	rjmp	.+298    	; 0xf92 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     e68:	e8 ee       	ldi	r30, 0xE8	; 232
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	80 ff       	sbrs	r24, 0
     e70:	fd cf       	rjmp	.-6      	; 0xe6c <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
     e72:	80 91 41 01 	lds	r24, 0x0141
     e76:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     e7a:	8e ef       	ldi	r24, 0xFE	; 254
     e7c:	80 93 e8 00 	sts	0x00E8, r24
     e80:	8f c0       	rjmp	.+286    	; 0xfa0 <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
     e82:	81 32       	cpi	r24, 0x21	; 33
     e84:	b9 f4       	brne	.+46     	; 0xeb4 <__vector_11+0x1f0>
     e86:	61 3a       	cpi	r22, 0xA1	; 161
     e88:	09 f0       	breq	.+2      	; 0xe8c <__vector_11+0x1c8>
     e8a:	83 c0       	rjmp	.+262    	; 0xf92 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     e8c:	e8 ee       	ldi	r30, 0xE8	; 232
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 ff       	sbrs	r24, 0
     e94:	fd cf       	rjmp	.-6      	; 0xe90 <__vector_11+0x1cc>
     e96:	e6 e0       	ldi	r30, 0x06	; 6
     e98:	f1 e0       	ldi	r31, 0x01	; 1
     e9a:	2d e0       	ldi	r18, 0x0D	; 13
     e9c:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
     e9e:	a1 ef       	ldi	r26, 0xF1	; 241
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	81 91       	ld	r24, Z+
     ea4:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     ea6:	e2 17       	cp	r30, r18
     ea8:	f3 07       	cpc	r31, r19
     eaa:	d9 f7       	brne	.-10     	; 0xea2 <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     eac:	8e ef       	ldi	r24, 0xFE	; 254
     eae:	80 93 e8 00 	sts	0x00E8, r24
     eb2:	76 c0       	rjmp	.+236    	; 0xfa0 <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
     eb4:	80 32       	cpi	r24, 0x20	; 32
     eb6:	d1 f4       	brne	.+52     	; 0xeec <__vector_11+0x228>
     eb8:	61 32       	cpi	r22, 0x21	; 33
     eba:	09 f0       	breq	.+2      	; 0xebe <__vector_11+0x1fa>
     ebc:	6a c0       	rjmp	.+212    	; 0xf92 <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
     ebe:	e8 ee       	ldi	r30, 0xE8	; 232
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	82 ff       	sbrs	r24, 2
     ec6:	fd cf       	rjmp	.-6      	; 0xec2 <__vector_11+0x1fe>
     ec8:	e6 e0       	ldi	r30, 0x06	; 6
     eca:	f1 e0       	ldi	r31, 0x01	; 1
     ecc:	2d e0       	ldi	r18, 0x0D	; 13
     ece:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
     ed0:	a1 ef       	ldi	r26, 0xF1	; 241
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	8c 91       	ld	r24, X
     ed6:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     ed8:	e2 17       	cp	r30, r18
     eda:	f3 07       	cpc	r31, r19
     edc:	d9 f7       	brne	.-10     	; 0xed4 <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
     ede:	e8 ee       	ldi	r30, 0xE8	; 232
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	8b ef       	ldi	r24, 0xFB	; 251
     ee4:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     ee6:	8e ef       	ldi	r24, 0xFE	; 254
     ee8:	80 83       	st	Z, r24
     eea:	5a c0       	rjmp	.+180    	; 0xfa0 <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
     eec:	82 32       	cpi	r24, 0x22	; 34
     eee:	71 f4       	brne	.+28     	; 0xf0c <__vector_11+0x248>
     ef0:	61 32       	cpi	r22, 0x21	; 33
     ef2:	09 f0       	breq	.+2      	; 0xef6 <__vector_11+0x232>
     ef4:	4e c0       	rjmp	.+156    	; 0xf92 <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
     ef6:	20 93 3e 01 	sts	0x013E, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     efa:	e8 ee       	ldi	r30, 0xE8	; 232
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	80 ff       	sbrs	r24, 0
     f02:	fd cf       	rjmp	.-6      	; 0xefe <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     f04:	8e ef       	ldi	r24, 0xFE	; 254
     f06:	80 93 e8 00 	sts	0x00E8, r24
     f0a:	4a c0       	rjmp	.+148    	; 0xfa0 <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
     f0c:	81 11       	cpse	r24, r1
     f0e:	1a c0       	rjmp	.+52     	; 0xf44 <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     f10:	e8 ee       	ldi	r30, 0xE8	; 232
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	80 ff       	sbrs	r24, 0
     f18:	fd cf       	rjmp	.-6      	; 0xf14 <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
     f1a:	62 38       	cpi	r22, 0x82	; 130
     f1c:	51 f4       	brne	.+20     	; 0xf32 <__vector_11+0x26e>
				UENUM = wIndex;
     f1e:	e9 ee       	ldi	r30, 0xE9	; 233
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
     f24:	80 91 eb 00 	lds	r24, 0x00EB
     f28:	85 fb       	bst	r24, 5
     f2a:	88 27       	eor	r24, r24
     f2c:	80 f9       	bld	r24, 0
				UENUM = 0;
     f2e:	10 82       	st	Z, r1
     f30:	01 c0       	rjmp	.+2      	; 0xf34 <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
     f32:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
     f34:	e1 ef       	ldi	r30, 0xF1	; 241
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 83       	st	Z, r24
			UEDATX = 0;
     f3a:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     f3c:	8e ef       	ldi	r24, 0xFE	; 254
     f3e:	80 93 e8 00 	sts	0x00E8, r24
     f42:	2e c0       	rjmp	.+92     	; 0xfa0 <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
     f44:	98 2f       	mov	r25, r24
     f46:	9d 7f       	andi	r25, 0xFD	; 253
     f48:	91 30       	cpi	r25, 0x01	; 1
     f4a:	19 f5       	brne	.+70     	; 0xf92 <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
     f4c:	62 30       	cpi	r22, 0x02	; 2
     f4e:	09 f5       	brne	.+66     	; 0xf92 <__vector_11+0x2ce>
     f50:	23 2b       	or	r18, r19
     f52:	f9 f4       	brne	.+62     	; 0xf92 <__vector_11+0x2ce>
			i = wIndex & 0x7F;
     f54:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
     f56:	9f ef       	ldi	r25, 0xFF	; 255
     f58:	94 0f       	add	r25, r20
     f5a:	94 30       	cpi	r25, 0x04	; 4
     f5c:	d0 f4       	brcc	.+52     	; 0xf92 <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     f5e:	9e ef       	ldi	r25, 0xFE	; 254
     f60:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
     f64:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
     f68:	83 30       	cpi	r24, 0x03	; 3
     f6a:	21 f4       	brne	.+8      	; 0xf74 <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
     f6c:	81 e2       	ldi	r24, 0x21	; 33
     f6e:	80 93 eb 00 	sts	0x00EB, r24
     f72:	16 c0       	rjmp	.+44     	; 0xfa0 <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
     f74:	89 e1       	ldi	r24, 0x19	; 25
     f76:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <__vector_11+0x2c0>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	4a 95       	dec	r20
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <__vector_11+0x2bc>
     f88:	ea ee       	ldi	r30, 0xEA	; 234
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 83       	st	Z, r24
					UERST = 0;
     f8e:	10 82       	st	Z, r1
     f90:	07 c0       	rjmp	.+14     	; 0xfa0 <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
     f92:	81 e2       	ldi	r24, 0x21	; 33
     f94:	80 93 eb 00 	sts	0x00EB, r24
     f98:	03 c0       	rjmp	.+6      	; 0xfa0 <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     f9a:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
     f9c:	21 11       	cpse	r18, r1
     f9e:	f7 ce       	rjmp	.-530    	; 0xd8e <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
     fa0:	ff 91       	pop	r31
     fa2:	ef 91       	pop	r30
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	bf 91       	pop	r27
     faa:	af 91       	pop	r26
     fac:	9f 91       	pop	r25
     fae:	8f 91       	pop	r24
     fb0:	7f 91       	pop	r23
     fb2:	6f 91       	pop	r22
     fb4:	5f 91       	pop	r21
     fb6:	4f 91       	pop	r20
     fb8:	3f 91       	pop	r19
     fba:	2f 91       	pop	r18
     fbc:	1f 91       	pop	r17
     fbe:	0f 91       	pop	r16
     fc0:	0f 90       	pop	r0
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	0f 90       	pop	r0
     fc6:	1f 90       	pop	r1
     fc8:	18 95       	reti

00000fca <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
     fca:	0f 93       	push	r16
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
	char c;

	while (1) {
		c = pgm_read_byte(s++);
     fd0:	8c 01       	movw	r16, r24
     fd2:	0f 5f       	subi	r16, 0xFF	; 255
     fd4:	1f 4f       	sbci	r17, 0xFF	; 255
     fd6:	fc 01       	movw	r30, r24
     fd8:	c4 91       	lpm	r28, Z
		if (!c) break;
     fda:	cc 23       	and	r28, r28
     fdc:	71 f0       	breq	.+28     	; 0xffa <print_P+0x30>
		if (c == '\n') usb_tx_char('\r');
     fde:	ca 30       	cpi	r28, 0x0A	; 10
     fe0:	19 f4       	brne	.+6      	; 0xfe8 <print_P+0x1e>
     fe2:	8d e0       	ldi	r24, 0x0D	; 13
     fe4:	0e 94 c9 05 	call	0xb92	; 0xb92 <m_usb_tx_char>
		usb_tx_char(c);
     fe8:	8c 2f       	mov	r24, r28
     fea:	0e 94 c9 05 	call	0xb92	; 0xb92 <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
     fee:	f8 01       	movw	r30, r16
     ff0:	c4 91       	lpm	r28, Z
     ff2:	0f 5f       	subi	r16, 0xFF	; 255
     ff4:	1f 4f       	sbci	r17, 0xFF	; 255
		if (!c) break;
     ff6:	c1 11       	cpse	r28, r1
     ff8:	f2 cf       	rjmp	.-28     	; 0xfde <print_P+0x14>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
     ffa:	cf 91       	pop	r28
     ffc:	1f 91       	pop	r17
     ffe:	0f 91       	pop	r16
    1000:	08 95       	ret

00001002 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    1002:	ef 92       	push	r14
    1004:	ff 92       	push	r15
    1006:	0f 93       	push	r16
    1008:	1f 93       	push	r17
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	27 97       	sbiw	r28, 0x07	; 7
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    101e:	8e 01       	movw	r16, r28
    1020:	0f 5f       	subi	r16, 0xFF	; 255
    1022:	1f 4f       	sbci	r17, 0xFF	; 255
    1024:	27 e0       	ldi	r18, 0x07	; 7
    1026:	f8 01       	movw	r30, r16
    1028:	11 92       	st	Z+, r1
    102a:	2a 95       	dec	r18
    102c:	e9 f7       	brne	.-6      	; 0x1028 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    102e:	4a e0       	ldi	r20, 0x0A	; 10
    1030:	b8 01       	movw	r22, r16
    1032:	0e 94 ce 0a 	call	0x159c	; 0x159c <__itoa_ncheck>
    1036:	7e 01       	movw	r14, r28
    1038:	f8 e0       	ldi	r31, 0x08	; 8
    103a:	ef 0e       	add	r14, r31
    103c:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    103e:	f8 01       	movw	r30, r16
    1040:	81 91       	ld	r24, Z+
    1042:	8f 01       	movw	r16, r30
    1044:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    1046:	0e 94 c9 05 	call	0xb92	; 0xb92 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    104a:	0e 15       	cp	r16, r14
    104c:	1f 05       	cpc	r17, r15
    104e:	b9 f7       	brne	.-18     	; 0x103e <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    1050:	27 96       	adiw	r28, 0x07	; 7
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	ff 90       	pop	r15
    1066:	ef 90       	pop	r14
    1068:	08 95       	ret

0000106a <__subsf3>:
    106a:	50 58       	subi	r21, 0x80	; 128

0000106c <__addsf3>:
    106c:	bb 27       	eor	r27, r27
    106e:	aa 27       	eor	r26, r26
    1070:	0e 94 4d 08 	call	0x109a	; 0x109a <__addsf3x>
    1074:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__fp_round>
    1078:	0e 94 b9 09 	call	0x1372	; 0x1372 <__fp_pscA>
    107c:	38 f0       	brcs	.+14     	; 0x108c <__addsf3+0x20>
    107e:	0e 94 c0 09 	call	0x1380	; 0x1380 <__fp_pscB>
    1082:	20 f0       	brcs	.+8      	; 0x108c <__addsf3+0x20>
    1084:	39 f4       	brne	.+14     	; 0x1094 <__addsf3+0x28>
    1086:	9f 3f       	cpi	r25, 0xFF	; 255
    1088:	19 f4       	brne	.+6      	; 0x1090 <__addsf3+0x24>
    108a:	26 f4       	brtc	.+8      	; 0x1094 <__addsf3+0x28>
    108c:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__fp_nan>
    1090:	0e f4       	brtc	.+2      	; 0x1094 <__addsf3+0x28>
    1092:	e0 95       	com	r30
    1094:	e7 fb       	bst	r30, 7
    1096:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__fp_inf>

0000109a <__addsf3x>:
    109a:	e9 2f       	mov	r30, r25
    109c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__fp_split3>
    10a0:	58 f3       	brcs	.-42     	; 0x1078 <__addsf3+0xc>
    10a2:	ba 17       	cp	r27, r26
    10a4:	62 07       	cpc	r22, r18
    10a6:	73 07       	cpc	r23, r19
    10a8:	84 07       	cpc	r24, r20
    10aa:	95 07       	cpc	r25, r21
    10ac:	20 f0       	brcs	.+8      	; 0x10b6 <__addsf3x+0x1c>
    10ae:	79 f4       	brne	.+30     	; 0x10ce <__addsf3x+0x34>
    10b0:	a6 f5       	brtc	.+104    	; 0x111a <__addsf3x+0x80>
    10b2:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__fp_zero>
    10b6:	0e f4       	brtc	.+2      	; 0x10ba <__addsf3x+0x20>
    10b8:	e0 95       	com	r30
    10ba:	0b 2e       	mov	r0, r27
    10bc:	ba 2f       	mov	r27, r26
    10be:	a0 2d       	mov	r26, r0
    10c0:	0b 01       	movw	r0, r22
    10c2:	b9 01       	movw	r22, r18
    10c4:	90 01       	movw	r18, r0
    10c6:	0c 01       	movw	r0, r24
    10c8:	ca 01       	movw	r24, r20
    10ca:	a0 01       	movw	r20, r0
    10cc:	11 24       	eor	r1, r1
    10ce:	ff 27       	eor	r31, r31
    10d0:	59 1b       	sub	r21, r25
    10d2:	99 f0       	breq	.+38     	; 0x10fa <__addsf3x+0x60>
    10d4:	59 3f       	cpi	r21, 0xF9	; 249
    10d6:	50 f4       	brcc	.+20     	; 0x10ec <__addsf3x+0x52>
    10d8:	50 3e       	cpi	r21, 0xE0	; 224
    10da:	68 f1       	brcs	.+90     	; 0x1136 <__addsf3x+0x9c>
    10dc:	1a 16       	cp	r1, r26
    10de:	f0 40       	sbci	r31, 0x00	; 0
    10e0:	a2 2f       	mov	r26, r18
    10e2:	23 2f       	mov	r18, r19
    10e4:	34 2f       	mov	r19, r20
    10e6:	44 27       	eor	r20, r20
    10e8:	58 5f       	subi	r21, 0xF8	; 248
    10ea:	f3 cf       	rjmp	.-26     	; 0x10d2 <__addsf3x+0x38>
    10ec:	46 95       	lsr	r20
    10ee:	37 95       	ror	r19
    10f0:	27 95       	ror	r18
    10f2:	a7 95       	ror	r26
    10f4:	f0 40       	sbci	r31, 0x00	; 0
    10f6:	53 95       	inc	r21
    10f8:	c9 f7       	brne	.-14     	; 0x10ec <__addsf3x+0x52>
    10fa:	7e f4       	brtc	.+30     	; 0x111a <__addsf3x+0x80>
    10fc:	1f 16       	cp	r1, r31
    10fe:	ba 0b       	sbc	r27, r26
    1100:	62 0b       	sbc	r22, r18
    1102:	73 0b       	sbc	r23, r19
    1104:	84 0b       	sbc	r24, r20
    1106:	ba f0       	brmi	.+46     	; 0x1136 <__addsf3x+0x9c>
    1108:	91 50       	subi	r25, 0x01	; 1
    110a:	a1 f0       	breq	.+40     	; 0x1134 <__addsf3x+0x9a>
    110c:	ff 0f       	add	r31, r31
    110e:	bb 1f       	adc	r27, r27
    1110:	66 1f       	adc	r22, r22
    1112:	77 1f       	adc	r23, r23
    1114:	88 1f       	adc	r24, r24
    1116:	c2 f7       	brpl	.-16     	; 0x1108 <__addsf3x+0x6e>
    1118:	0e c0       	rjmp	.+28     	; 0x1136 <__addsf3x+0x9c>
    111a:	ba 0f       	add	r27, r26
    111c:	62 1f       	adc	r22, r18
    111e:	73 1f       	adc	r23, r19
    1120:	84 1f       	adc	r24, r20
    1122:	48 f4       	brcc	.+18     	; 0x1136 <__addsf3x+0x9c>
    1124:	87 95       	ror	r24
    1126:	77 95       	ror	r23
    1128:	67 95       	ror	r22
    112a:	b7 95       	ror	r27
    112c:	f7 95       	ror	r31
    112e:	9e 3f       	cpi	r25, 0xFE	; 254
    1130:	08 f0       	brcs	.+2      	; 0x1134 <__addsf3x+0x9a>
    1132:	b0 cf       	rjmp	.-160    	; 0x1094 <__addsf3+0x28>
    1134:	93 95       	inc	r25
    1136:	88 0f       	add	r24, r24
    1138:	08 f0       	brcs	.+2      	; 0x113c <__addsf3x+0xa2>
    113a:	99 27       	eor	r25, r25
    113c:	ee 0f       	add	r30, r30
    113e:	97 95       	ror	r25
    1140:	87 95       	ror	r24
    1142:	08 95       	ret

00001144 <__cmpsf2>:
    1144:	0e 94 8c 09 	call	0x1318	; 0x1318 <__fp_cmp>
    1148:	08 f4       	brcc	.+2      	; 0x114c <__cmpsf2+0x8>
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	08 95       	ret

0000114e <__divsf3>:
    114e:	0e 94 bb 08 	call	0x1176	; 0x1176 <__divsf3x>
    1152:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__fp_round>
    1156:	0e 94 c0 09 	call	0x1380	; 0x1380 <__fp_pscB>
    115a:	58 f0       	brcs	.+22     	; 0x1172 <__divsf3+0x24>
    115c:	0e 94 b9 09 	call	0x1372	; 0x1372 <__fp_pscA>
    1160:	40 f0       	brcs	.+16     	; 0x1172 <__divsf3+0x24>
    1162:	29 f4       	brne	.+10     	; 0x116e <__divsf3+0x20>
    1164:	5f 3f       	cpi	r21, 0xFF	; 255
    1166:	29 f0       	breq	.+10     	; 0x1172 <__divsf3+0x24>
    1168:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__fp_inf>
    116c:	51 11       	cpse	r21, r1
    116e:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__fp_szero>
    1172:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__fp_nan>

00001176 <__divsf3x>:
    1176:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__fp_split3>
    117a:	68 f3       	brcs	.-38     	; 0x1156 <__divsf3+0x8>

0000117c <__divsf3_pse>:
    117c:	99 23       	and	r25, r25
    117e:	b1 f3       	breq	.-20     	; 0x116c <__divsf3+0x1e>
    1180:	55 23       	and	r21, r21
    1182:	91 f3       	breq	.-28     	; 0x1168 <__divsf3+0x1a>
    1184:	95 1b       	sub	r25, r21
    1186:	55 0b       	sbc	r21, r21
    1188:	bb 27       	eor	r27, r27
    118a:	aa 27       	eor	r26, r26
    118c:	62 17       	cp	r22, r18
    118e:	73 07       	cpc	r23, r19
    1190:	84 07       	cpc	r24, r20
    1192:	38 f0       	brcs	.+14     	; 0x11a2 <__divsf3_pse+0x26>
    1194:	9f 5f       	subi	r25, 0xFF	; 255
    1196:	5f 4f       	sbci	r21, 0xFF	; 255
    1198:	22 0f       	add	r18, r18
    119a:	33 1f       	adc	r19, r19
    119c:	44 1f       	adc	r20, r20
    119e:	aa 1f       	adc	r26, r26
    11a0:	a9 f3       	breq	.-22     	; 0x118c <__divsf3_pse+0x10>
    11a2:	35 d0       	rcall	.+106    	; 0x120e <__divsf3_pse+0x92>
    11a4:	0e 2e       	mov	r0, r30
    11a6:	3a f0       	brmi	.+14     	; 0x11b6 <__divsf3_pse+0x3a>
    11a8:	e0 e8       	ldi	r30, 0x80	; 128
    11aa:	32 d0       	rcall	.+100    	; 0x1210 <__divsf3_pse+0x94>
    11ac:	91 50       	subi	r25, 0x01	; 1
    11ae:	50 40       	sbci	r21, 0x00	; 0
    11b0:	e6 95       	lsr	r30
    11b2:	00 1c       	adc	r0, r0
    11b4:	ca f7       	brpl	.-14     	; 0x11a8 <__divsf3_pse+0x2c>
    11b6:	2b d0       	rcall	.+86     	; 0x120e <__divsf3_pse+0x92>
    11b8:	fe 2f       	mov	r31, r30
    11ba:	29 d0       	rcall	.+82     	; 0x120e <__divsf3_pse+0x92>
    11bc:	66 0f       	add	r22, r22
    11be:	77 1f       	adc	r23, r23
    11c0:	88 1f       	adc	r24, r24
    11c2:	bb 1f       	adc	r27, r27
    11c4:	26 17       	cp	r18, r22
    11c6:	37 07       	cpc	r19, r23
    11c8:	48 07       	cpc	r20, r24
    11ca:	ab 07       	cpc	r26, r27
    11cc:	b0 e8       	ldi	r27, 0x80	; 128
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <__divsf3_pse+0x56>
    11d0:	bb 0b       	sbc	r27, r27
    11d2:	80 2d       	mov	r24, r0
    11d4:	bf 01       	movw	r22, r30
    11d6:	ff 27       	eor	r31, r31
    11d8:	93 58       	subi	r25, 0x83	; 131
    11da:	5f 4f       	sbci	r21, 0xFF	; 255
    11dc:	3a f0       	brmi	.+14     	; 0x11ec <__divsf3_pse+0x70>
    11de:	9e 3f       	cpi	r25, 0xFE	; 254
    11e0:	51 05       	cpc	r21, r1
    11e2:	78 f0       	brcs	.+30     	; 0x1202 <__divsf3_pse+0x86>
    11e4:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__fp_inf>
    11e8:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__fp_szero>
    11ec:	5f 3f       	cpi	r21, 0xFF	; 255
    11ee:	e4 f3       	brlt	.-8      	; 0x11e8 <__divsf3_pse+0x6c>
    11f0:	98 3e       	cpi	r25, 0xE8	; 232
    11f2:	d4 f3       	brlt	.-12     	; 0x11e8 <__divsf3_pse+0x6c>
    11f4:	86 95       	lsr	r24
    11f6:	77 95       	ror	r23
    11f8:	67 95       	ror	r22
    11fa:	b7 95       	ror	r27
    11fc:	f7 95       	ror	r31
    11fe:	9f 5f       	subi	r25, 0xFF	; 255
    1200:	c9 f7       	brne	.-14     	; 0x11f4 <__divsf3_pse+0x78>
    1202:	88 0f       	add	r24, r24
    1204:	91 1d       	adc	r25, r1
    1206:	96 95       	lsr	r25
    1208:	87 95       	ror	r24
    120a:	97 f9       	bld	r25, 7
    120c:	08 95       	ret
    120e:	e1 e0       	ldi	r30, 0x01	; 1
    1210:	66 0f       	add	r22, r22
    1212:	77 1f       	adc	r23, r23
    1214:	88 1f       	adc	r24, r24
    1216:	bb 1f       	adc	r27, r27
    1218:	62 17       	cp	r22, r18
    121a:	73 07       	cpc	r23, r19
    121c:	84 07       	cpc	r24, r20
    121e:	ba 07       	cpc	r27, r26
    1220:	20 f0       	brcs	.+8      	; 0x122a <__divsf3_pse+0xae>
    1222:	62 1b       	sub	r22, r18
    1224:	73 0b       	sbc	r23, r19
    1226:	84 0b       	sbc	r24, r20
    1228:	ba 0b       	sbc	r27, r26
    122a:	ee 1f       	adc	r30, r30
    122c:	88 f7       	brcc	.-30     	; 0x1210 <__divsf3_pse+0x94>
    122e:	e0 95       	com	r30
    1230:	08 95       	ret

00001232 <__fixsfsi>:
    1232:	0e 94 20 09 	call	0x1240	; 0x1240 <__fixunssfsi>
    1236:	68 94       	set
    1238:	b1 11       	cpse	r27, r1
    123a:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__fp_szero>
    123e:	08 95       	ret

00001240 <__fixunssfsi>:
    1240:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__fp_splitA>
    1244:	88 f0       	brcs	.+34     	; 0x1268 <__fixunssfsi+0x28>
    1246:	9f 57       	subi	r25, 0x7F	; 127
    1248:	98 f0       	brcs	.+38     	; 0x1270 <__fixunssfsi+0x30>
    124a:	b9 2f       	mov	r27, r25
    124c:	99 27       	eor	r25, r25
    124e:	b7 51       	subi	r27, 0x17	; 23
    1250:	b0 f0       	brcs	.+44     	; 0x127e <__fixunssfsi+0x3e>
    1252:	e1 f0       	breq	.+56     	; 0x128c <__fixunssfsi+0x4c>
    1254:	66 0f       	add	r22, r22
    1256:	77 1f       	adc	r23, r23
    1258:	88 1f       	adc	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	1a f0       	brmi	.+6      	; 0x1264 <__fixunssfsi+0x24>
    125e:	ba 95       	dec	r27
    1260:	c9 f7       	brne	.-14     	; 0x1254 <__fixunssfsi+0x14>
    1262:	14 c0       	rjmp	.+40     	; 0x128c <__fixunssfsi+0x4c>
    1264:	b1 30       	cpi	r27, 0x01	; 1
    1266:	91 f0       	breq	.+36     	; 0x128c <__fixunssfsi+0x4c>
    1268:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__fp_zero>
    126c:	b1 e0       	ldi	r27, 0x01	; 1
    126e:	08 95       	ret
    1270:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__fp_zero>
    1274:	67 2f       	mov	r22, r23
    1276:	78 2f       	mov	r23, r24
    1278:	88 27       	eor	r24, r24
    127a:	b8 5f       	subi	r27, 0xF8	; 248
    127c:	39 f0       	breq	.+14     	; 0x128c <__fixunssfsi+0x4c>
    127e:	b9 3f       	cpi	r27, 0xF9	; 249
    1280:	cc f3       	brlt	.-14     	; 0x1274 <__fixunssfsi+0x34>
    1282:	86 95       	lsr	r24
    1284:	77 95       	ror	r23
    1286:	67 95       	ror	r22
    1288:	b3 95       	inc	r27
    128a:	d9 f7       	brne	.-10     	; 0x1282 <__fixunssfsi+0x42>
    128c:	3e f4       	brtc	.+14     	; 0x129c <__fixunssfsi+0x5c>
    128e:	90 95       	com	r25
    1290:	80 95       	com	r24
    1292:	70 95       	com	r23
    1294:	61 95       	neg	r22
    1296:	7f 4f       	sbci	r23, 0xFF	; 255
    1298:	8f 4f       	sbci	r24, 0xFF	; 255
    129a:	9f 4f       	sbci	r25, 0xFF	; 255
    129c:	08 95       	ret

0000129e <__floatunsisf>:
    129e:	e8 94       	clt
    12a0:	09 c0       	rjmp	.+18     	; 0x12b4 <__floatsisf+0x12>

000012a2 <__floatsisf>:
    12a2:	97 fb       	bst	r25, 7
    12a4:	3e f4       	brtc	.+14     	; 0x12b4 <__floatsisf+0x12>
    12a6:	90 95       	com	r25
    12a8:	80 95       	com	r24
    12aa:	70 95       	com	r23
    12ac:	61 95       	neg	r22
    12ae:	7f 4f       	sbci	r23, 0xFF	; 255
    12b0:	8f 4f       	sbci	r24, 0xFF	; 255
    12b2:	9f 4f       	sbci	r25, 0xFF	; 255
    12b4:	99 23       	and	r25, r25
    12b6:	a9 f0       	breq	.+42     	; 0x12e2 <__floatsisf+0x40>
    12b8:	f9 2f       	mov	r31, r25
    12ba:	96 e9       	ldi	r25, 0x96	; 150
    12bc:	bb 27       	eor	r27, r27
    12be:	93 95       	inc	r25
    12c0:	f6 95       	lsr	r31
    12c2:	87 95       	ror	r24
    12c4:	77 95       	ror	r23
    12c6:	67 95       	ror	r22
    12c8:	b7 95       	ror	r27
    12ca:	f1 11       	cpse	r31, r1
    12cc:	f8 cf       	rjmp	.-16     	; 0x12be <__floatsisf+0x1c>
    12ce:	fa f4       	brpl	.+62     	; 0x130e <__floatsisf+0x6c>
    12d0:	bb 0f       	add	r27, r27
    12d2:	11 f4       	brne	.+4      	; 0x12d8 <__floatsisf+0x36>
    12d4:	60 ff       	sbrs	r22, 0
    12d6:	1b c0       	rjmp	.+54     	; 0x130e <__floatsisf+0x6c>
    12d8:	6f 5f       	subi	r22, 0xFF	; 255
    12da:	7f 4f       	sbci	r23, 0xFF	; 255
    12dc:	8f 4f       	sbci	r24, 0xFF	; 255
    12de:	9f 4f       	sbci	r25, 0xFF	; 255
    12e0:	16 c0       	rjmp	.+44     	; 0x130e <__floatsisf+0x6c>
    12e2:	88 23       	and	r24, r24
    12e4:	11 f0       	breq	.+4      	; 0x12ea <__floatsisf+0x48>
    12e6:	96 e9       	ldi	r25, 0x96	; 150
    12e8:	11 c0       	rjmp	.+34     	; 0x130c <__floatsisf+0x6a>
    12ea:	77 23       	and	r23, r23
    12ec:	21 f0       	breq	.+8      	; 0x12f6 <__floatsisf+0x54>
    12ee:	9e e8       	ldi	r25, 0x8E	; 142
    12f0:	87 2f       	mov	r24, r23
    12f2:	76 2f       	mov	r23, r22
    12f4:	05 c0       	rjmp	.+10     	; 0x1300 <__floatsisf+0x5e>
    12f6:	66 23       	and	r22, r22
    12f8:	71 f0       	breq	.+28     	; 0x1316 <__floatsisf+0x74>
    12fa:	96 e8       	ldi	r25, 0x86	; 134
    12fc:	86 2f       	mov	r24, r22
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	2a f0       	brmi	.+10     	; 0x130e <__floatsisf+0x6c>
    1304:	9a 95       	dec	r25
    1306:	66 0f       	add	r22, r22
    1308:	77 1f       	adc	r23, r23
    130a:	88 1f       	adc	r24, r24
    130c:	da f7       	brpl	.-10     	; 0x1304 <__floatsisf+0x62>
    130e:	88 0f       	add	r24, r24
    1310:	96 95       	lsr	r25
    1312:	87 95       	ror	r24
    1314:	97 f9       	bld	r25, 7
    1316:	08 95       	ret

00001318 <__fp_cmp>:
    1318:	99 0f       	add	r25, r25
    131a:	00 08       	sbc	r0, r0
    131c:	55 0f       	add	r21, r21
    131e:	aa 0b       	sbc	r26, r26
    1320:	e0 e8       	ldi	r30, 0x80	; 128
    1322:	fe ef       	ldi	r31, 0xFE	; 254
    1324:	16 16       	cp	r1, r22
    1326:	17 06       	cpc	r1, r23
    1328:	e8 07       	cpc	r30, r24
    132a:	f9 07       	cpc	r31, r25
    132c:	c0 f0       	brcs	.+48     	; 0x135e <__fp_cmp+0x46>
    132e:	12 16       	cp	r1, r18
    1330:	13 06       	cpc	r1, r19
    1332:	e4 07       	cpc	r30, r20
    1334:	f5 07       	cpc	r31, r21
    1336:	98 f0       	brcs	.+38     	; 0x135e <__fp_cmp+0x46>
    1338:	62 1b       	sub	r22, r18
    133a:	73 0b       	sbc	r23, r19
    133c:	84 0b       	sbc	r24, r20
    133e:	95 0b       	sbc	r25, r21
    1340:	39 f4       	brne	.+14     	; 0x1350 <__fp_cmp+0x38>
    1342:	0a 26       	eor	r0, r26
    1344:	61 f0       	breq	.+24     	; 0x135e <__fp_cmp+0x46>
    1346:	23 2b       	or	r18, r19
    1348:	24 2b       	or	r18, r20
    134a:	25 2b       	or	r18, r21
    134c:	21 f4       	brne	.+8      	; 0x1356 <__fp_cmp+0x3e>
    134e:	08 95       	ret
    1350:	0a 26       	eor	r0, r26
    1352:	09 f4       	brne	.+2      	; 0x1356 <__fp_cmp+0x3e>
    1354:	a1 40       	sbci	r26, 0x01	; 1
    1356:	a6 95       	lsr	r26
    1358:	8f ef       	ldi	r24, 0xFF	; 255
    135a:	81 1d       	adc	r24, r1
    135c:	81 1d       	adc	r24, r1
    135e:	08 95       	ret

00001360 <__fp_inf>:
    1360:	97 f9       	bld	r25, 7
    1362:	9f 67       	ori	r25, 0x7F	; 127
    1364:	80 e8       	ldi	r24, 0x80	; 128
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	60 e0       	ldi	r22, 0x00	; 0
    136a:	08 95       	ret

0000136c <__fp_nan>:
    136c:	9f ef       	ldi	r25, 0xFF	; 255
    136e:	80 ec       	ldi	r24, 0xC0	; 192
    1370:	08 95       	ret

00001372 <__fp_pscA>:
    1372:	00 24       	eor	r0, r0
    1374:	0a 94       	dec	r0
    1376:	16 16       	cp	r1, r22
    1378:	17 06       	cpc	r1, r23
    137a:	18 06       	cpc	r1, r24
    137c:	09 06       	cpc	r0, r25
    137e:	08 95       	ret

00001380 <__fp_pscB>:
    1380:	00 24       	eor	r0, r0
    1382:	0a 94       	dec	r0
    1384:	12 16       	cp	r1, r18
    1386:	13 06       	cpc	r1, r19
    1388:	14 06       	cpc	r1, r20
    138a:	05 06       	cpc	r0, r21
    138c:	08 95       	ret

0000138e <__fp_round>:
    138e:	09 2e       	mov	r0, r25
    1390:	03 94       	inc	r0
    1392:	00 0c       	add	r0, r0
    1394:	11 f4       	brne	.+4      	; 0x139a <__fp_round+0xc>
    1396:	88 23       	and	r24, r24
    1398:	52 f0       	brmi	.+20     	; 0x13ae <__fp_round+0x20>
    139a:	bb 0f       	add	r27, r27
    139c:	40 f4       	brcc	.+16     	; 0x13ae <__fp_round+0x20>
    139e:	bf 2b       	or	r27, r31
    13a0:	11 f4       	brne	.+4      	; 0x13a6 <__fp_round+0x18>
    13a2:	60 ff       	sbrs	r22, 0
    13a4:	04 c0       	rjmp	.+8      	; 0x13ae <__fp_round+0x20>
    13a6:	6f 5f       	subi	r22, 0xFF	; 255
    13a8:	7f 4f       	sbci	r23, 0xFF	; 255
    13aa:	8f 4f       	sbci	r24, 0xFF	; 255
    13ac:	9f 4f       	sbci	r25, 0xFF	; 255
    13ae:	08 95       	ret

000013b0 <__fp_split3>:
    13b0:	57 fd       	sbrc	r21, 7
    13b2:	90 58       	subi	r25, 0x80	; 128
    13b4:	44 0f       	add	r20, r20
    13b6:	55 1f       	adc	r21, r21
    13b8:	59 f0       	breq	.+22     	; 0x13d0 <__fp_splitA+0x10>
    13ba:	5f 3f       	cpi	r21, 0xFF	; 255
    13bc:	71 f0       	breq	.+28     	; 0x13da <__fp_splitA+0x1a>
    13be:	47 95       	ror	r20

000013c0 <__fp_splitA>:
    13c0:	88 0f       	add	r24, r24
    13c2:	97 fb       	bst	r25, 7
    13c4:	99 1f       	adc	r25, r25
    13c6:	61 f0       	breq	.+24     	; 0x13e0 <__fp_splitA+0x20>
    13c8:	9f 3f       	cpi	r25, 0xFF	; 255
    13ca:	79 f0       	breq	.+30     	; 0x13ea <__fp_splitA+0x2a>
    13cc:	87 95       	ror	r24
    13ce:	08 95       	ret
    13d0:	12 16       	cp	r1, r18
    13d2:	13 06       	cpc	r1, r19
    13d4:	14 06       	cpc	r1, r20
    13d6:	55 1f       	adc	r21, r21
    13d8:	f2 cf       	rjmp	.-28     	; 0x13be <__fp_split3+0xe>
    13da:	46 95       	lsr	r20
    13dc:	f1 df       	rcall	.-30     	; 0x13c0 <__fp_splitA>
    13de:	08 c0       	rjmp	.+16     	; 0x13f0 <__fp_splitA+0x30>
    13e0:	16 16       	cp	r1, r22
    13e2:	17 06       	cpc	r1, r23
    13e4:	18 06       	cpc	r1, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	f1 cf       	rjmp	.-30     	; 0x13cc <__fp_splitA+0xc>
    13ea:	86 95       	lsr	r24
    13ec:	71 05       	cpc	r23, r1
    13ee:	61 05       	cpc	r22, r1
    13f0:	08 94       	sec
    13f2:	08 95       	ret

000013f4 <__fp_zero>:
    13f4:	e8 94       	clt

000013f6 <__fp_szero>:
    13f6:	bb 27       	eor	r27, r27
    13f8:	66 27       	eor	r22, r22
    13fa:	77 27       	eor	r23, r23
    13fc:	cb 01       	movw	r24, r22
    13fe:	97 f9       	bld	r25, 7
    1400:	08 95       	ret

00001402 <__gesf2>:
    1402:	0e 94 8c 09 	call	0x1318	; 0x1318 <__fp_cmp>
    1406:	08 f4       	brcc	.+2      	; 0x140a <__gesf2+0x8>
    1408:	8f ef       	ldi	r24, 0xFF	; 255
    140a:	08 95       	ret

0000140c <__mulsf3>:
    140c:	0e 94 19 0a 	call	0x1432	; 0x1432 <__mulsf3x>
    1410:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__fp_round>
    1414:	0e 94 b9 09 	call	0x1372	; 0x1372 <__fp_pscA>
    1418:	38 f0       	brcs	.+14     	; 0x1428 <__mulsf3+0x1c>
    141a:	0e 94 c0 09 	call	0x1380	; 0x1380 <__fp_pscB>
    141e:	20 f0       	brcs	.+8      	; 0x1428 <__mulsf3+0x1c>
    1420:	95 23       	and	r25, r21
    1422:	11 f0       	breq	.+4      	; 0x1428 <__mulsf3+0x1c>
    1424:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__fp_inf>
    1428:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__fp_nan>
    142c:	11 24       	eor	r1, r1
    142e:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__fp_szero>

00001432 <__mulsf3x>:
    1432:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__fp_split3>
    1436:	70 f3       	brcs	.-36     	; 0x1414 <__mulsf3+0x8>

00001438 <__mulsf3_pse>:
    1438:	95 9f       	mul	r25, r21
    143a:	c1 f3       	breq	.-16     	; 0x142c <__mulsf3+0x20>
    143c:	95 0f       	add	r25, r21
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	55 1f       	adc	r21, r21
    1442:	62 9f       	mul	r22, r18
    1444:	f0 01       	movw	r30, r0
    1446:	72 9f       	mul	r23, r18
    1448:	bb 27       	eor	r27, r27
    144a:	f0 0d       	add	r31, r0
    144c:	b1 1d       	adc	r27, r1
    144e:	63 9f       	mul	r22, r19
    1450:	aa 27       	eor	r26, r26
    1452:	f0 0d       	add	r31, r0
    1454:	b1 1d       	adc	r27, r1
    1456:	aa 1f       	adc	r26, r26
    1458:	64 9f       	mul	r22, r20
    145a:	66 27       	eor	r22, r22
    145c:	b0 0d       	add	r27, r0
    145e:	a1 1d       	adc	r26, r1
    1460:	66 1f       	adc	r22, r22
    1462:	82 9f       	mul	r24, r18
    1464:	22 27       	eor	r18, r18
    1466:	b0 0d       	add	r27, r0
    1468:	a1 1d       	adc	r26, r1
    146a:	62 1f       	adc	r22, r18
    146c:	73 9f       	mul	r23, r19
    146e:	b0 0d       	add	r27, r0
    1470:	a1 1d       	adc	r26, r1
    1472:	62 1f       	adc	r22, r18
    1474:	83 9f       	mul	r24, r19
    1476:	a0 0d       	add	r26, r0
    1478:	61 1d       	adc	r22, r1
    147a:	22 1f       	adc	r18, r18
    147c:	74 9f       	mul	r23, r20
    147e:	33 27       	eor	r19, r19
    1480:	a0 0d       	add	r26, r0
    1482:	61 1d       	adc	r22, r1
    1484:	23 1f       	adc	r18, r19
    1486:	84 9f       	mul	r24, r20
    1488:	60 0d       	add	r22, r0
    148a:	21 1d       	adc	r18, r1
    148c:	82 2f       	mov	r24, r18
    148e:	76 2f       	mov	r23, r22
    1490:	6a 2f       	mov	r22, r26
    1492:	11 24       	eor	r1, r1
    1494:	9f 57       	subi	r25, 0x7F	; 127
    1496:	50 40       	sbci	r21, 0x00	; 0
    1498:	9a f0       	brmi	.+38     	; 0x14c0 <__mulsf3_pse+0x88>
    149a:	f1 f0       	breq	.+60     	; 0x14d8 <__mulsf3_pse+0xa0>
    149c:	88 23       	and	r24, r24
    149e:	4a f0       	brmi	.+18     	; 0x14b2 <__mulsf3_pse+0x7a>
    14a0:	ee 0f       	add	r30, r30
    14a2:	ff 1f       	adc	r31, r31
    14a4:	bb 1f       	adc	r27, r27
    14a6:	66 1f       	adc	r22, r22
    14a8:	77 1f       	adc	r23, r23
    14aa:	88 1f       	adc	r24, r24
    14ac:	91 50       	subi	r25, 0x01	; 1
    14ae:	50 40       	sbci	r21, 0x00	; 0
    14b0:	a9 f7       	brne	.-22     	; 0x149c <__mulsf3_pse+0x64>
    14b2:	9e 3f       	cpi	r25, 0xFE	; 254
    14b4:	51 05       	cpc	r21, r1
    14b6:	80 f0       	brcs	.+32     	; 0x14d8 <__mulsf3_pse+0xa0>
    14b8:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__fp_inf>
    14bc:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__fp_szero>
    14c0:	5f 3f       	cpi	r21, 0xFF	; 255
    14c2:	e4 f3       	brlt	.-8      	; 0x14bc <__mulsf3_pse+0x84>
    14c4:	98 3e       	cpi	r25, 0xE8	; 232
    14c6:	d4 f3       	brlt	.-12     	; 0x14bc <__mulsf3_pse+0x84>
    14c8:	86 95       	lsr	r24
    14ca:	77 95       	ror	r23
    14cc:	67 95       	ror	r22
    14ce:	b7 95       	ror	r27
    14d0:	f7 95       	ror	r31
    14d2:	e7 95       	ror	r30
    14d4:	9f 5f       	subi	r25, 0xFF	; 255
    14d6:	c1 f7       	brne	.-16     	; 0x14c8 <__mulsf3_pse+0x90>
    14d8:	fe 2b       	or	r31, r30
    14da:	88 0f       	add	r24, r24
    14dc:	91 1d       	adc	r25, r1
    14de:	96 95       	lsr	r25
    14e0:	87 95       	ror	r24
    14e2:	97 f9       	bld	r25, 7
    14e4:	08 95       	ret
    14e6:	19 f4       	brne	.+6      	; 0x14ee <__mulsf3_pse+0xb6>
    14e8:	16 f4       	brtc	.+4      	; 0x14ee <__mulsf3_pse+0xb6>
    14ea:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__fp_nan>
    14ee:	0c 94 b9 0a 	jmp	0x1572	; 0x1572 <__fp_mpack>

000014f2 <sqrt>:
    14f2:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__fp_splitA>
    14f6:	b8 f3       	brcs	.-18     	; 0x14e6 <__mulsf3_pse+0xae>
    14f8:	99 23       	and	r25, r25
    14fa:	c9 f3       	breq	.-14     	; 0x14ee <__mulsf3_pse+0xb6>
    14fc:	b6 f3       	brts	.-20     	; 0x14ea <__mulsf3_pse+0xb2>
    14fe:	9f 57       	subi	r25, 0x7F	; 127
    1500:	55 0b       	sbc	r21, r21
    1502:	87 ff       	sbrs	r24, 7
    1504:	0e 94 c7 0a 	call	0x158e	; 0x158e <__fp_norm2>
    1508:	00 24       	eor	r0, r0
    150a:	a0 e6       	ldi	r26, 0x60	; 96
    150c:	40 ea       	ldi	r20, 0xA0	; 160
    150e:	90 01       	movw	r18, r0
    1510:	80 58       	subi	r24, 0x80	; 128
    1512:	56 95       	lsr	r21
    1514:	97 95       	ror	r25
    1516:	28 f4       	brcc	.+10     	; 0x1522 <sqrt+0x30>
    1518:	80 5c       	subi	r24, 0xC0	; 192
    151a:	66 0f       	add	r22, r22
    151c:	77 1f       	adc	r23, r23
    151e:	88 1f       	adc	r24, r24
    1520:	20 f0       	brcs	.+8      	; 0x152a <sqrt+0x38>
    1522:	26 17       	cp	r18, r22
    1524:	37 07       	cpc	r19, r23
    1526:	48 07       	cpc	r20, r24
    1528:	30 f4       	brcc	.+12     	; 0x1536 <sqrt+0x44>
    152a:	62 1b       	sub	r22, r18
    152c:	73 0b       	sbc	r23, r19
    152e:	84 0b       	sbc	r24, r20
    1530:	20 29       	or	r18, r0
    1532:	31 29       	or	r19, r1
    1534:	4a 2b       	or	r20, r26
    1536:	a6 95       	lsr	r26
    1538:	17 94       	ror	r1
    153a:	07 94       	ror	r0
    153c:	20 25       	eor	r18, r0
    153e:	31 25       	eor	r19, r1
    1540:	4a 27       	eor	r20, r26
    1542:	58 f7       	brcc	.-42     	; 0x151a <sqrt+0x28>
    1544:	66 0f       	add	r22, r22
    1546:	77 1f       	adc	r23, r23
    1548:	88 1f       	adc	r24, r24
    154a:	20 f0       	brcs	.+8      	; 0x1554 <sqrt+0x62>
    154c:	26 17       	cp	r18, r22
    154e:	37 07       	cpc	r19, r23
    1550:	48 07       	cpc	r20, r24
    1552:	30 f4       	brcc	.+12     	; 0x1560 <sqrt+0x6e>
    1554:	62 0b       	sbc	r22, r18
    1556:	73 0b       	sbc	r23, r19
    1558:	84 0b       	sbc	r24, r20
    155a:	20 0d       	add	r18, r0
    155c:	31 1d       	adc	r19, r1
    155e:	41 1d       	adc	r20, r1
    1560:	a0 95       	com	r26
    1562:	81 f7       	brne	.-32     	; 0x1544 <sqrt+0x52>
    1564:	b9 01       	movw	r22, r18
    1566:	84 2f       	mov	r24, r20
    1568:	91 58       	subi	r25, 0x81	; 129
    156a:	88 0f       	add	r24, r24
    156c:	96 95       	lsr	r25
    156e:	87 95       	ror	r24
    1570:	08 95       	ret

00001572 <__fp_mpack>:
    1572:	9f 3f       	cpi	r25, 0xFF	; 255
    1574:	31 f0       	breq	.+12     	; 0x1582 <__fp_mpack_finite+0xc>

00001576 <__fp_mpack_finite>:
    1576:	91 50       	subi	r25, 0x01	; 1
    1578:	20 f4       	brcc	.+8      	; 0x1582 <__fp_mpack_finite+0xc>
    157a:	87 95       	ror	r24
    157c:	77 95       	ror	r23
    157e:	67 95       	ror	r22
    1580:	b7 95       	ror	r27
    1582:	88 0f       	add	r24, r24
    1584:	91 1d       	adc	r25, r1
    1586:	96 95       	lsr	r25
    1588:	87 95       	ror	r24
    158a:	97 f9       	bld	r25, 7
    158c:	08 95       	ret

0000158e <__fp_norm2>:
    158e:	91 50       	subi	r25, 0x01	; 1
    1590:	50 40       	sbci	r21, 0x00	; 0
    1592:	66 0f       	add	r22, r22
    1594:	77 1f       	adc	r23, r23
    1596:	88 1f       	adc	r24, r24
    1598:	d2 f7       	brpl	.-12     	; 0x158e <__fp_norm2>
    159a:	08 95       	ret

0000159c <__itoa_ncheck>:
    159c:	bb 27       	eor	r27, r27
    159e:	4a 30       	cpi	r20, 0x0A	; 10
    15a0:	31 f4       	brne	.+12     	; 0x15ae <__itoa_ncheck+0x12>
    15a2:	99 23       	and	r25, r25
    15a4:	22 f4       	brpl	.+8      	; 0x15ae <__itoa_ncheck+0x12>
    15a6:	bd e2       	ldi	r27, 0x2D	; 45
    15a8:	90 95       	com	r25
    15aa:	81 95       	neg	r24
    15ac:	9f 4f       	sbci	r25, 0xFF	; 255
    15ae:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__utoa_common>

000015b2 <__utoa_ncheck>:
    15b2:	bb 27       	eor	r27, r27

000015b4 <__utoa_common>:
    15b4:	fb 01       	movw	r30, r22
    15b6:	55 27       	eor	r21, r21
    15b8:	aa 27       	eor	r26, r26
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	aa 1f       	adc	r26, r26
    15c0:	a4 17       	cp	r26, r20
    15c2:	10 f0       	brcs	.+4      	; 0x15c8 <__utoa_common+0x14>
    15c4:	a4 1b       	sub	r26, r20
    15c6:	83 95       	inc	r24
    15c8:	50 51       	subi	r21, 0x10	; 16
    15ca:	b9 f7       	brne	.-18     	; 0x15ba <__utoa_common+0x6>
    15cc:	a0 5d       	subi	r26, 0xD0	; 208
    15ce:	aa 33       	cpi	r26, 0x3A	; 58
    15d0:	08 f0       	brcs	.+2      	; 0x15d4 <__utoa_common+0x20>
    15d2:	a9 5d       	subi	r26, 0xD9	; 217
    15d4:	a1 93       	st	Z+, r26
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	79 f7       	brne	.-34     	; 0x15b8 <__utoa_common+0x4>
    15da:	b1 11       	cpse	r27, r1
    15dc:	b1 93       	st	Z+, r27
    15de:	11 92       	st	Z+, r1
    15e0:	cb 01       	movw	r24, r22
    15e2:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <strrev>

000015e6 <strrev>:
    15e6:	dc 01       	movw	r26, r24
    15e8:	fc 01       	movw	r30, r24
    15ea:	67 2f       	mov	r22, r23
    15ec:	71 91       	ld	r23, Z+
    15ee:	77 23       	and	r23, r23
    15f0:	e1 f7       	brne	.-8      	; 0x15ea <strrev+0x4>
    15f2:	32 97       	sbiw	r30, 0x02	; 2
    15f4:	04 c0       	rjmp	.+8      	; 0x15fe <strrev+0x18>
    15f6:	7c 91       	ld	r23, X
    15f8:	6d 93       	st	X+, r22
    15fa:	70 83       	st	Z, r23
    15fc:	62 91       	ld	r22, -Z
    15fe:	ae 17       	cp	r26, r30
    1600:	bf 07       	cpc	r27, r31
    1602:	c8 f3       	brcs	.-14     	; 0x15f6 <strrev+0x10>
    1604:	08 95       	ret

00001606 <_exit>:
    1606:	f8 94       	cli

00001608 <__stop_program>:
    1608:	ff cf       	rjmp	.-2      	; 0x1608 <__stop_program>
