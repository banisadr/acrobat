
acrobat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000008fc  00000990  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004c9  00800108  00800108  00000998  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a07  00000000  00000000  00000bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000071f  00000000  00000000  000025bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a53  00000000  00000000  00002cde  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000554  00000000  00000000  00003734  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ca  00000000  00000000  00003c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002203  00000000  00000000  00004352  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00006555  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__ctors_end>
   4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  10:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  14:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  18:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  1c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  20:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  24:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  28:	0c 94 bb 02 	jmp	0x576	; 0x576 <__vector_10>
  2c:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <__vector_11>
  30:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  34:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  38:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  3c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  40:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  44:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  48:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  4c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  54:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  58:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  5c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  60:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  64:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  68:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  6c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  70:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  74:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  78:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  7c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  80:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  84:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  88:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  8c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  90:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  94:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  98:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  9c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>

000000ac <__trampolines_end>:
  ac:	00 01       	movw	r0, r0
  ae:	00 00       	nop
  b0:	43 01       	movw	r8, r6
  b2:	12 00       	.word	0x0012	; ????
  b4:	02 00       	.word	0x0002	; ????
  b6:	00 00       	nop
  b8:	01 43       	sbci	r16, 0x31	; 49
  ba:	00 03       	mulsu	r16, r16
  bc:	00 00       	nop
  be:	fc 00       	.word	0x00fc	; ????
  c0:	04 01       	movw	r0, r8
  c2:	03 09       	sbc	r16, r3
  c4:	04 e8       	ldi	r16, 0x84	; 132
  c6:	00 12       	cpse	r0, r16
  c8:	02 03       	mulsu	r16, r18
  ca:	09 04       	cpc	r0, r9
  cc:	e0 00       	.word	0x00e0	; ????
  ce:	06 03       	mulsu	r16, r22
  d0:	03 09       	sbc	r16, r3
  d2:	04 d6       	rcall	.+3080   	; 0xcdc <__stack+0x1dd>
  d4:	00 08       	sbc	r0, r0

000000d6 <string3>:
  d6:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000000e0 <string2>:
  e0:	06 03 4d 00 32 00 00 00                             ..M.2...

000000e8 <string1>:
  e8:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
  f8:	65 00 00 00                                         e...

000000fc <string0>:
  fc:	04 03 09 04                                         ....

00000100 <config1_descriptor>:
 100:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 110:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 120:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 130:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 140:	40 00 00                                            @..

00000143 <device_descriptor>:
 143:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 153:	03 01                                               ..

00000155 <endpoint_config_table>:
 155:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

00000160 <__ctors_end>:
 160:	11 24       	eor	r1, r1
 162:	1f be       	out	0x3f, r1	; 63
 164:	cf ef       	ldi	r28, 0xFF	; 255
 166:	da e0       	ldi	r29, 0x0A	; 10
 168:	de bf       	out	0x3e, r29	; 62
 16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
 16c:	11 e0       	ldi	r17, 0x01	; 1
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b1 e0       	ldi	r27, 0x01	; 1
 172:	ec ef       	ldi	r30, 0xFC	; 252
 174:	f8 e0       	ldi	r31, 0x08	; 8
 176:	02 c0       	rjmp	.+4      	; 0x17c <__do_copy_data+0x10>
 178:	05 90       	lpm	r0, Z+
 17a:	0d 92       	st	X+, r0
 17c:	a8 30       	cpi	r26, 0x08	; 8
 17e:	b1 07       	cpc	r27, r17
 180:	d9 f7       	brne	.-10     	; 0x178 <__do_copy_data+0xc>

00000182 <__do_clear_bss>:
 182:	25 e0       	ldi	r18, 0x05	; 5
 184:	a8 e0       	ldi	r26, 0x08	; 8
 186:	b1 e0       	ldi	r27, 0x01	; 1
 188:	01 c0       	rjmp	.+2      	; 0x18c <.do_clear_bss_start>

0000018a <.do_clear_bss_loop>:
 18a:	1d 92       	st	X+, r1

0000018c <.do_clear_bss_start>:
 18c:	a1 3d       	cpi	r26, 0xD1	; 209
 18e:	b2 07       	cpc	r27, r18
 190:	e1 f7       	brne	.-8      	; 0x18a <.do_clear_bss_loop>
 192:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <main>
 196:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <_exit>

0000019a <__bad_interrupt>:
 19a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019e <init>:
************************************************************/

/* Initialization of Pins and System Clock */
void init(void){
	
	m_clockdivide(3); // Set to 2 MHz
 19e:	e1 e6       	ldi	r30, 0x61	; 97
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 e8       	ldi	r24, 0x80	; 128
 1a4:	80 83       	st	Z, r24
 1a6:	83 e0       	ldi	r24, 0x03	; 3
 1a8:	80 83       	st	Z, r24
	
	//Set to Input
	clear(DDRD,0); // D0
 1aa:	50 98       	cbi	0x0a, 0	; 10
	clear(DDRD,1); // D1
 1ac:	51 98       	cbi	0x0a, 1	; 10
	clear(DDRD,2); // D2
 1ae:	52 98       	cbi	0x0a, 2	; 10
	
	//Set to Output
	
	while(!m_imu_init(accel_scale,gyro_scale)); //Initialize IMU
 1b0:	60 91 1c 01 	lds	r22, 0x011C
 1b4:	80 91 1d 01 	lds	r24, 0x011D
 1b8:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <m_imu_init>
 1bc:	88 23       	and	r24, r24
 1be:	c1 f3       	breq	.-16     	; 0x1b0 <init+0x12>
	
	sei(); // Enable global interrupts
 1c0:	78 94       	sei
 1c2:	08 95       	ret

000001c4 <usb_enable>:
}

/* Setup USB */
void usb_enable(void)
{
	m_usb_init();
 1c4:	0e 94 9f 02 	call	0x53e	; 0x53e <m_usb_init>
	while(!m_usb_isconnected());
 1c8:	0e 94 b8 02 	call	0x570	; 0x570 <m_usb_isconnected>
 1cc:	88 23       	and	r24, r24
 1ce:	e1 f3       	breq	.-8      	; 0x1c8 <usb_enable+0x4>
}
 1d0:	08 95       	ret

000001d2 <main>:
Main Loop
************************************************************/
int main(void)
{
	/* Confirm Power */
	m_red(ON);
 1d2:	6e 9a       	sbi	0x0d, 6	; 13
 1d4:	76 98       	cbi	0x0e, 6	; 14

	/* Initializations */
	init();
 1d6:	0e 94 cf 00 	call	0x19e	; 0x19e <init>
	usb_enable();
 1da:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <usb_enable>

	/* Confirm successful initialization(s) */
	m_green(ON);
 1de:	6a 9a       	sbi	0x0d, 2	; 13
 1e0:	72 98       	cbi	0x0e, 2	; 14

	/* Run */
	while (1){
		if (m_imu_raw(data))
 1e2:	8a e0       	ldi	r24, 0x0A	; 10
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0e 94 4d 02 	call	0x49a	; 0x49a <m_imu_raw>
 1ea:	88 23       	and	r24, r24
 1ec:	09 f4       	brne	.+2      	; 0x1f0 <main+0x1e>
 1ee:	44 c0       	rjmp	.+136    	; 0x278 <main+0xa6>
		{
			m_green(ON);
 1f0:	6a 9a       	sbi	0x0d, 2	; 13
 1f2:	72 98       	cbi	0x0e, 2	; 14
			m_red(OFF);
 1f4:	6e 9a       	sbi	0x0d, 6	; 13
 1f6:	76 9a       	sbi	0x0e, 6	; 14
			
			steady_state[count][0] = data[0];
 1f8:	80 91 08 01 	lds	r24, 0x0108
 1fc:	90 91 09 01 	lds	r25, 0x0109
 200:	fc 01       	movw	r30, r24
 202:	ee 0f       	add	r30, r30
 204:	ff 1f       	adc	r31, r31
 206:	e8 0f       	add	r30, r24
 208:	f9 1f       	adc	r31, r25
 20a:	ee 0f       	add	r30, r30
 20c:	ff 1f       	adc	r31, r31
 20e:	ee 0f       	add	r30, r30
 210:	ff 1f       	adc	r31, r31
 212:	ef 5d       	subi	r30, 0xDF	; 223
 214:	fe 4f       	sbci	r31, 0xFE	; 254
 216:	aa e0       	ldi	r26, 0x0A	; 10
 218:	b1 e0       	ldi	r27, 0x01	; 1
 21a:	2d 91       	ld	r18, X+
 21c:	3c 91       	ld	r19, X
 21e:	11 97       	sbiw	r26, 0x01	; 1
 220:	31 83       	std	Z+1, r19	; 0x01
 222:	20 83       	st	Z, r18
			steady_state[count][1] = data[1];
 224:	12 96       	adiw	r26, 0x02	; 2
 226:	2d 91       	ld	r18, X+
 228:	3c 91       	ld	r19, X
 22a:	13 97       	sbiw	r26, 0x03	; 3
 22c:	33 83       	std	Z+3, r19	; 0x03
 22e:	22 83       	std	Z+2, r18	; 0x02
			steady_state[count][2] = data[2];
 230:	14 96       	adiw	r26, 0x04	; 4
 232:	2d 91       	ld	r18, X+
 234:	3c 91       	ld	r19, X
 236:	15 97       	sbiw	r26, 0x05	; 5
 238:	35 83       	std	Z+5, r19	; 0x05
 23a:	24 83       	std	Z+4, r18	; 0x04
			steady_state[count][3] = data[3];
 23c:	16 96       	adiw	r26, 0x06	; 6
 23e:	2d 91       	ld	r18, X+
 240:	3c 91       	ld	r19, X
 242:	17 97       	sbiw	r26, 0x07	; 7
 244:	37 83       	std	Z+7, r19	; 0x07
 246:	26 83       	std	Z+6, r18	; 0x06
			steady_state[count][4] = data[4];
 248:	18 96       	adiw	r26, 0x08	; 8
 24a:	2d 91       	ld	r18, X+
 24c:	3c 91       	ld	r19, X
 24e:	19 97       	sbiw	r26, 0x09	; 9
 250:	31 87       	std	Z+9, r19	; 0x09
 252:	20 87       	std	Z+8, r18	; 0x08
			steady_state[count][5] = data[5];
 254:	1a 96       	adiw	r26, 0x0a	; 10
 256:	2d 91       	ld	r18, X+
 258:	3c 91       	ld	r19, X
 25a:	1b 97       	sbiw	r26, 0x0b	; 11
 25c:	33 87       	std	Z+11, r19	; 0x0b
 25e:	22 87       	std	Z+10, r18	; 0x0a
			
			count++;
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	90 93 09 01 	sts	0x0109, r25
 266:	80 93 08 01 	sts	0x0108, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26a:	87 ea       	ldi	r24, 0xA7	; 167
 26c:	91 e6       	ldi	r25, 0x61	; 97
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <main+0x9c>
 272:	00 c0       	rjmp	.+0      	; 0x274 <main+0xa2>
 274:	00 00       	nop
 276:	b5 cf       	rjmp	.-150    	; 0x1e2 <main+0x10>
			*/
			
		} 
		else
		{
			m_green(OFF);
 278:	6a 9a       	sbi	0x0d, 2	; 13
 27a:	72 9a       	sbi	0x0e, 2	; 14
			m_red(ON);
 27c:	6e 9a       	sbi	0x0d, 6	; 13
 27e:	76 98       	cbi	0x0e, 6	; 14
 280:	b0 cf       	rjmp	.-160    	; 0x1e2 <main+0x10>

00000282 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
 282:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
 284:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
 286:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
 288:	8c e0       	ldi	r24, 0x0C	; 12
 28a:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
 28e:	e9 e6       	ldi	r30, 0x69	; 105
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	80 62       	ori	r24, 0x20	; 32
 296:	80 83       	st	Z, r24
 298:	80 81       	ld	r24, Z
 29a:	8f 7e       	andi	r24, 0xEF	; 239
 29c:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
 29e:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
 2a0:	78 94       	sei
 2a2:	08 95       	ret

000002a4 <twi_read_byte>:
}

// TWI: read BYTE, NACK, STOP
unsigned char twi_read_byte(void)
{
    TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, NACK, and wait for another byte
 2a4:	84 e8       	ldi	r24, 0x84	; 132
 2a6:	80 93 bc 00 	sts	0x00BC, r24
    while(!(TWCR & (1<<TWINT))){};  // wait for an interrupt to signal that a new byte is available
 2aa:	ec eb       	ldi	r30, 0xBC	; 188
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	88 23       	and	r24, r24
 2b2:	ec f7       	brge	.-6      	; 0x2ae <twi_read_byte+0xa>
    return TWDR;
 2b4:	80 91 bb 00 	lds	r24, 0x00BB
    twi_stop();
}
 2b8:	08 95       	ret

000002ba <twi_wait_for_ack>:
}

// TWI:  wait for ACK packet (0=fail, 1=success)
unsigned char twi_wait_for_ack(void)
{
	unsigned int wait=0;
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<MAX_WAIT)){};	// wait for acknowledgement that the byte was sent
 2be:	ec eb       	ldi	r30, 0xBC	; 188
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	88 23       	and	r24, r24
 2c6:	34 f0       	brlt	.+12     	; 0x2d4 <twi_wait_for_ack+0x1a>
 2c8:	2f 5f       	subi	r18, 0xFF	; 255
 2ca:	3f 4f       	sbci	r19, 0xFF	; 255
 2cc:	29 3e       	cpi	r18, 0xE9	; 233
 2ce:	83 e0       	ldi	r24, 0x03	; 3
 2d0:	38 07       	cpc	r19, r24
 2d2:	b9 f7       	brne	.-18     	; 0x2c2 <twi_wait_for_ack+0x8>
    return (wait==MAX_WAIT? 0 : 1);
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	28 3e       	cpi	r18, 0xE8	; 232
 2d8:	33 40       	sbci	r19, 0x03	; 3
 2da:	09 f4       	brne	.+2      	; 0x2de <twi_wait_for_ack+0x24>
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	08 95       	ret

000002e0 <twi_send_byte>:
}

// TWI: send BYTE, wait for ACK
unsigned char twi_send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
 2e0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
 2e4:	84 e8       	ldi	r24, 0x84	; 132
 2e6:	80 93 bc 00 	sts	0x00BC, r24
	return (twi_wait_for_ack()) ? (TWSR & 0xF8) : 0 ;
 2ea:	0e 94 5d 01 	call	0x2ba	; 0x2ba <twi_wait_for_ack>
 2ee:	88 23       	and	r24, r24
 2f0:	19 f0       	breq	.+6      	; 0x2f8 <twi_send_byte+0x18>
 2f2:	80 91 b9 00 	lds	r24, 0x00B9
 2f6:	88 7f       	andi	r24, 0xF8	; 248
}
 2f8:	08 95       	ret

000002fa <twi_start>:
// PRIVATE FUNCTIONS:

// TWI: send START condition, wait for ACK, send ADDRESS with R/W flag
// readwrite = 1 for read, 0 for write
unsigned char twi_start(unsigned char address, unsigned char readwrite)
{
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	c8 2f       	mov	r28, r24
 300:	d6 2f       	mov	r29, r22
    unsigned char status;
    
    // START packet:
    TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 302:	84 ea       	ldi	r24, 0xA4	; 164
 304:	80 93 bc 00 	sts	0x00BC, r24
    if(!twi_wait_for_ack()){
 308:	0e 94 5d 01 	call	0x2ba	; 0x2ba <twi_wait_for_ack>
 30c:	81 11       	cpse	r24, r1
 30e:	04 c0       	rjmp	.+8      	; 0x318 <twi_start+0x1e>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 310:	94 e9       	ldi	r25, 0x94	; 148
 312:	90 93 bc 00 	sts	0x00BC, r25
 316:	1c c0       	rjmp	.+56     	; 0x350 <twi_start+0x56>
        twi_stop();
        return 0; // COMM failure
    }
    
    // ADDRESS packet:
    if(readwrite)
 318:	dd 23       	and	r29, r29
 31a:	61 f0       	breq	.+24     	; 0x334 <twi_start+0x3a>
    { // READ
        status = twi_send_byte(((address<<1) + 1));
 31c:	8c 2f       	mov	r24, r28
 31e:	88 0f       	add	r24, r24
 320:	8f 5f       	subi	r24, 0xFF	; 255
 322:	0e 94 70 01 	call	0x2e0	; 0x2e0 <twi_send_byte>
        if(status== 0x48){ // ACK was not received - may not be connected/listening
 326:	88 34       	cpi	r24, 0x48	; 72
 328:	81 f4       	brne	.+32     	; 0x34a <twi_start+0x50>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 32a:	84 e9       	ldi	r24, 0x94	; 148
 32c:	80 93 bc 00 	sts	0x00BC, r24
    if(readwrite)
    { // READ
        status = twi_send_byte(((address<<1) + 1));
        if(status== 0x48){ // ACK was not received - may not be connected/listening
            twi_stop();    
            return 0;	// failure
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	0e c0       	rjmp	.+28     	; 0x350 <twi_start+0x56>
        }	
    } else { // WRITE
        status = twi_send_byte(address<<1);
 334:	8c 2f       	mov	r24, r28
 336:	88 0f       	add	r24, r24
 338:	0e 94 70 01 	call	0x2e0	; 0x2e0 <twi_send_byte>
        if(status== 0x20){ // ACK was not received - may not be connected/listening
 33c:	80 32       	cpi	r24, 0x20	; 32
 33e:	39 f4       	brne	.+14     	; 0x34e <twi_start+0x54>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 340:	84 e9       	ldi	r24, 0x94	; 148
 342:	80 93 bc 00 	sts	0x00BC, r24
        }	
    } else { // WRITE
        status = twi_send_byte(address<<1);
        if(status== 0x20){ // ACK was not received - may not be connected/listening
            twi_stop();
            return 0;	// failure
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	03 c0       	rjmp	.+6      	; 0x350 <twi_start+0x56>
        }	        
    }
    return 1;	// success
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	01 c0       	rjmp	.+2      	; 0x350 <twi_start+0x56>
 34e:	81 e0       	ldi	r24, 0x01	; 1
    
}
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	08 95       	ret

00000356 <m_read_register>:
	set(EIMSK,INT2); // demask the interrupt
	sei(); // enable global interrupts
}

unsigned char m_read_register(unsigned char addr, unsigned char reg)
{
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	c8 2f       	mov	r28, r24
 35c:	d6 2f       	mov	r29, r22
    if(!twi_start(addr,WRITE)) return 0; // START + W
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	0e 94 7d 01 	call	0x2fa	; 0x2fa <twi_start>
 364:	88 23       	and	r24, r24
 366:	79 f0       	breq	.+30     	; 0x386 <m_read_register+0x30>
	if(!twi_send_byte(reg)) return 0;    // register to read
 368:	8d 2f       	mov	r24, r29
 36a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <twi_send_byte>
 36e:	88 23       	and	r24, r24
 370:	51 f0       	breq	.+20     	; 0x386 <m_read_register+0x30>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 372:	84 e9       	ldi	r24, 0x94	; 148
 374:	80 93 bc 00 	sts	0x00BC, r24
unsigned char m_read_register(unsigned char addr, unsigned char reg)
{
    if(!twi_start(addr,WRITE)) return 0; // START + W
	if(!twi_send_byte(reg)) return 0;    // register to read
    twi_stop();                          // STOP
    if(!twi_start(addr,READ)) return 0;  // START + R
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	8c 2f       	mov	r24, r28
 37c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <twi_start>
 380:	81 11       	cpse	r24, r1
	return(twi_read_byte());             // return register value
 382:	0e 94 52 01 	call	0x2a4	; 0x2a4 <twi_read_byte>
}
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <m_write_register>:

unsigned char m_write_register(unsigned char addr, unsigned char reg, unsigned char value)
{
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	c6 2f       	mov	r28, r22
 392:	d4 2f       	mov	r29, r20
    if(!twi_start(addr,WRITE)) return 0; // START + W
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	0e 94 7d 01 	call	0x2fa	; 0x2fa <twi_start>
 39a:	88 23       	and	r24, r24
 39c:	71 f0       	breq	.+28     	; 0x3ba <m_write_register+0x2e>
	if(!twi_send_byte(reg)) return 0;    // register to write to
 39e:	8c 2f       	mov	r24, r28
 3a0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <twi_send_byte>
 3a4:	88 23       	and	r24, r24
 3a6:	49 f0       	breq	.+18     	; 0x3ba <m_write_register+0x2e>
    if(!twi_send_byte(value)) return 0;  // value
 3a8:	8d 2f       	mov	r24, r29
 3aa:	0e 94 70 01 	call	0x2e0	; 0x2e0 <twi_send_byte>
 3ae:	88 23       	and	r24, r24
 3b0:	21 f0       	breq	.+8      	; 0x3ba <m_write_register+0x2e>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 3b2:	84 e9       	ldi	r24, 0x94	; 148
 3b4:	80 93 bc 00 	sts	0x00BC, r24
{
    if(!twi_start(addr,WRITE)) return 0; // START + W
	if(!twi_send_byte(reg)) return 0;    // register to write to
    if(!twi_send_byte(value)) return 0;  // value
    twi_stop();                          // STOP
    return(1);
 3b8:	81 e0       	ldi	r24, 0x01	; 1
}
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	08 95       	ret

000003c0 <m_imu_init>:
#define MIMU            0x69

// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
 3c4:	84 30       	cpi	r24, 0x04	; 4
 3c6:	08 f0       	brcs	.+2      	; 0x3ca <m_imu_init+0xa>
 3c8:	60 c0       	rjmp	.+192    	; 0x48a <m_imu_init+0xca>
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
 3ca:	64 30       	cpi	r22, 0x04	; 4
 3cc:	08 f0       	brcs	.+2      	; 0x3d0 <m_imu_init+0x10>
 3ce:	5f c0       	rjmp	.+190    	; 0x48e <m_imu_init+0xce>
 3d0:	d6 2f       	mov	r29, r22
 3d2:	c8 2f       	mov	r28, r24

	m_bus_init();
 3d4:	0e 94 41 01 	call	0x282	; 0x282 <m_bus_init>
 3d8:	2f e5       	ldi	r18, 0x5F	; 95
 3da:	8a ee       	ldi	r24, 0xEA	; 234
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	21 50       	subi	r18, 0x01	; 1
 3e0:	80 40       	sbci	r24, 0x00	; 0
 3e2:	90 40       	sbci	r25, 0x00	; 0
 3e4:	e1 f7       	brne	.-8      	; 0x3de <m_imu_init+0x1e>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <m_imu_init+0x28>
 3e8:	00 00       	nop
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
 3ea:	65 e7       	ldi	r22, 0x75	; 117
 3ec:	89 e6       	ldi	r24, 0x69	; 105
 3ee:	0e 94 ab 01 	call	0x356	; 0x356 <m_read_register>
 3f2:	88 36       	cpi	r24, 0x68	; 104
 3f4:	09 f0       	breq	.+2      	; 0x3f8 <m_imu_init+0x38>
 3f6:	4d c0       	rjmp	.+154    	; 0x492 <m_imu_init+0xd2>
    
    // SET THE CLOCK SOURCE TO X-AXIS GYRO
    // reg: 0x68 (PWR_MGMT_1)
    // bits 0-2 control clock source
    // value: 0x01 (clock to PLL on X-axis gyro reference)
    m_write_register(MIMU,0x6B,0x01);
 3f8:	41 e0       	ldi	r20, 0x01	; 1
 3fa:	6b e6       	ldi	r22, 0x6B	; 107
 3fc:	89 e6       	ldi	r24, 0x69	; 105
 3fe:	0e 94 c6 01 	call	0x38c	; 0x38c <m_write_register>

    // SET THE ACCEL FULL-SCALE +/- RANGE (0=2G, 1=4G, 2=8G, 3=16G)
    // reg: 0x1C (ACCEL_CONFIG)
    // bits: 3-4 set +/- full-scale range
    m_write_register(MIMU,0x1C,accel_scale<<3);
 402:	4c 2f       	mov	r20, r28
 404:	44 0f       	add	r20, r20
 406:	44 0f       	add	r20, r20
 408:	44 0f       	add	r20, r20
 40a:	6c e1       	ldi	r22, 0x1C	; 28
 40c:	89 e6       	ldi	r24, 0x69	; 105
 40e:	0e 94 c6 01 	call	0x38c	; 0x38c <m_write_register>

    // SET THE GYRO FULL-SCALE +/- RANGE (0=250, 1=500, 2=1000, 3=2000 DEG/SEC)
    // reg: 0x1B (GYRO_CONFIG)
    // bits: 3-4 set +/- full-scale range
    // value: 0x00
    m_write_register(MIMU,0x1B,gyro_scale<<3); // this shouldn't be doing anything
 412:	4d 2f       	mov	r20, r29
 414:	44 0f       	add	r20, r20
 416:	44 0f       	add	r20, r20
 418:	44 0f       	add	r20, r20
 41a:	6b e1       	ldi	r22, 0x1B	; 27
 41c:	89 e6       	ldi	r24, 0x69	; 105
 41e:	0e 94 c6 01 	call	0x38c	; 0x38c <m_write_register>
      
    // SET THE MPU INTO I2C BYPASS MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 1 (1=bypass, 0=normal op)
    m_write_register(MIMU,0x37,0x02); // switch the MPU into bypass mode
 422:	42 e0       	ldi	r20, 0x02	; 2
 424:	67 e3       	ldi	r22, 0x37	; 55
 426:	89 e6       	ldi	r24, 0x69	; 105
 428:	0e 94 c6 01 	call	0x38c	; 0x38c <m_write_register>
    
    // CONFIGURE THE MAGNETOMETER
    // address: 0x1E (for the magnetometer)
    // reg: 2 (mode register)
    // val: 0 (continuous output)
    m_write_register(0x1E,2,0); // set the mag. to continuous output mode
 42c:	40 e0       	ldi	r20, 0x00	; 0
 42e:	62 e0       	ldi	r22, 0x02	; 2
 430:	8e e1       	ldi	r24, 0x1E	; 30
 432:	0e 94 c6 01 	call	0x38c	; 0x38c <m_write_register>
    
    // SET THE MPU TO NORMAL I2C MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 5 (1=master, 0=passthrough)
    m_write_register(MIMU,0x37,0);    // switch the MPU out of bypass mode
 436:	40 e0       	ldi	r20, 0x00	; 0
 438:	67 e3       	ldi	r22, 0x37	; 55
 43a:	89 e6       	ldi	r24, 0x69	; 105
 43c:	0e 94 c6 01 	call	0x38c	; 0x38c <m_write_register>
    // SET THE AUXILLIARY I2C SAMPLE RATE
    // reg: 0x34 (I2C_SLC4_CTRL) 
    // value: 0x1E (30 > 8000/30 = 266.6Hz)
    // reg: 0x67 (MST_DELAY_CTRL)
    // bit: 0 (1=slowed down, 0=full speed)
    m_write_register(MIMU,0x34,0x1E);
 440:	4e e1       	ldi	r20, 0x1E	; 30
 442:	64 e3       	ldi	r22, 0x34	; 52
 444:	89 e6       	ldi	r24, 0x69	; 105
 446:	0e 94 c6 01 	call	0x38c	; 0x38c <m_write_register>
    m_write_register(MIMU,0x67,0x01);
 44a:	41 e0       	ldi	r20, 0x01	; 1
 44c:	67 e6       	ldi	r22, 0x67	; 103
 44e:	89 e6       	ldi	r24, 0x69	; 105
 450:	0e 94 c6 01 	call	0x38c	; 0x38c <m_write_register>
    // ADJUST the auxilliary I2C port clock speed, etc.
    // reg: 0x24 (MST_CTRL)
    // bit: 4 = 1 (stop then start), 2 (restart)
    // bit: 0-3 = clock prescaler (0x0D = 400kHz)
    // not necessary, perhaps.  We shall see?
    m_write_register(MIMU,0x24,0x1D);
 454:	4d e1       	ldi	r20, 0x1D	; 29
 456:	64 e2       	ldi	r22, 0x24	; 36
 458:	89 e6       	ldi	r24, 0x69	; 105
 45a:	0e 94 c6 01 	call	0x38c	; 0x38c <m_write_register>

    // SET THE MAGNETOMETER ADDRESS
    // reg: 0x25 (I2C_SLC0_ADDR)
    // value: 0x1E (from the magnetometer datasheet)
    // notes: for read from slave, set bit 7 to 1; to write, set bit 7 to 0
    m_write_register(MIMU,0x25,0x9E);
 45e:	4e e9       	ldi	r20, 0x9E	; 158
 460:	65 e2       	ldi	r22, 0x25	; 37
 462:	89 e6       	ldi	r24, 0x69	; 105
 464:	0e 94 c6 01 	call	0x38c	; 0x38c <m_write_register>

    // SET THE MAGNETOMETER DATA START ADDRESS
    // reg: 0x26 (I2C_SLV0_REG)
    // val: 3 (X high byte)
    m_write_register(MIMU,0x26,3);
 468:	43 e0       	ldi	r20, 0x03	; 3
 46a:	66 e2       	ldi	r22, 0x26	; 38
 46c:	89 e6       	ldi	r24, 0x69	; 105
 46e:	0e 94 c6 01 	call	0x38c	; 0x38c <m_write_register>
    // reg: 0x27 (I2C_SLV0_CTRL
    // bit: 0-3 (# of bytes to ingest) = 6
    //      4: byte/word grouping control
    //      6: swap bytes
    //      7: enable slave (1=on, 0=off)
    m_write_register(MIMU,0x27,0x96);
 472:	46 e9       	ldi	r20, 0x96	; 150
 474:	67 e2       	ldi	r22, 0x27	; 39
 476:	89 e6       	ldi	r24, 0x69	; 105
 478:	0e 94 c6 01 	call	0x38c	; 0x38c <m_write_register>
    
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
 47c:	40 e2       	ldi	r20, 0x20	; 32
 47e:	6a e6       	ldi	r22, 0x6A	; 106
 480:	89 e6       	ldi	r24, 0x69	; 105
 482:	0e 94 c6 01 	call	0x38c	; 0x38c <m_write_register>
    
    return 1;   // SUCCESS!
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	05 c0       	rjmp	.+10     	; 0x494 <m_imu_init+0xd4>
// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	03 c0       	rjmp	.+6      	; 0x494 <m_imu_init+0xd4>
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	01 c0       	rjmp	.+2      	; 0x494 <m_imu_init+0xd4>

	m_bus_init();
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
 492:	80 e0       	ldi	r24, 0x00	; 0
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
    
    return 1;   // SUCCESS!
}
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	08 95       	ret

0000049a <m_imu_raw>:
// (41:42) TH:TL
// (43:44) GXH:GXL, (45:46) GYH:GYL, (47:48) GZH:GZL
// (49:4A) MXH:MXL, (4B:4C) MYH:MYL, (4D:4E) MZH:MZL

unsigned char m_imu_raw(int* raw_data)
{
 49a:	cf 92       	push	r12
 49c:	df 92       	push	r13
 49e:	ef 92       	push	r14
 4a0:	ff 92       	push	r15
 4a2:	1f 93       	push	r17
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	cd b7       	in	r28, 0x3d	; 61
 4aa:	de b7       	in	r29, 0x3e	; 62
 4ac:	64 97       	sbiw	r28, 0x14	; 20
 4ae:	0f b6       	in	r0, 0x3f	; 63
 4b0:	f8 94       	cli
 4b2:	de bf       	out	0x3e, r29	; 62
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	cd bf       	out	0x3d, r28	; 61
 4b8:	6c 01       	movw	r12, r24
 4ba:	ce 01       	movw	r24, r28
 4bc:	01 96       	adiw	r24, 0x01	; 1
 4be:	7c 01       	movw	r14, r24
 4c0:	1e e4       	ldi	r17, 0x4E	; 78
    unsigned char buffer[20]; 
    int i;
    
    for(i=0;i<20;i++) // read 20 bytes (6 accel + 2 temp + 6 gyro + 6 mag)
    {
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
 4c2:	61 2f       	mov	r22, r17
 4c4:	89 e6       	ldi	r24, 0x69	; 105
 4c6:	0e 94 ab 01 	call	0x356	; 0x356 <m_read_register>
 4ca:	f7 01       	movw	r30, r14
 4cc:	81 93       	st	Z+, r24
 4ce:	7f 01       	movw	r14, r30
 4d0:	11 50       	subi	r17, 0x01	; 1
unsigned char m_imu_raw(int* raw_data)
{
    unsigned char buffer[20]; 
    int i;
    
    for(i=0;i<20;i++) // read 20 bytes (6 accel + 2 temp + 6 gyro + 6 mag)
 4d2:	1a 33       	cpi	r17, 0x3A	; 58
 4d4:	b1 f7       	brne	.-20     	; 0x4c2 <m_imu_raw+0x28>
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
    }
    // buffer: [MZL, MZH, MYL, MYH, MXL, MXH, GZL, GZH, GYL, GYH, GXL, GXH, TL, TH, AZL, AZH, AYL, AYH, AXL, AXH]
    for(i=0;i<3;i++)
    {
        raw_data[2-i] = *(int*)&buffer[14+2*i]; // [2] = [AZL:AZH], [1] = [AYL:AYH], [0] = [AXL:AXH]
 4d6:	8f 85       	ldd	r24, Y+15	; 0x0f
 4d8:	98 89       	ldd	r25, Y+16	; 0x10
 4da:	f6 01       	movw	r30, r12
 4dc:	95 83       	std	Z+5, r25	; 0x05
 4de:	84 83       	std	Z+4, r24	; 0x04
        raw_data[5-i] = *(int*)&buffer[6+2*i];  // [5] = [GZL:GZH], [4] = [GYL:GYH], [3] = [GXL:GXH]
 4e0:	8f 81       	ldd	r24, Y+7	; 0x07
 4e2:	98 85       	ldd	r25, Y+8	; 0x08
 4e4:	93 87       	std	Z+11, r25	; 0x0b
 4e6:	82 87       	std	Z+10, r24	; 0x0a
        raw_data[8-i] = *(int*)&buffer[2*i];    // [8] = [MZL:MZH], [7] = [MYL:MYH], [6] = [MXL:MXH]
 4e8:	89 81       	ldd	r24, Y+1	; 0x01
 4ea:	9a 81       	ldd	r25, Y+2	; 0x02
 4ec:	91 8b       	std	Z+17, r25	; 0x11
 4ee:	80 8b       	std	Z+16, r24	; 0x10
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
    }
    // buffer: [MZL, MZH, MYL, MYH, MXL, MXH, GZL, GZH, GYL, GYH, GXL, GXH, TL, TH, AZL, AZH, AYL, AYH, AXL, AXH]
    for(i=0;i<3;i++)
    {
        raw_data[2-i] = *(int*)&buffer[14+2*i]; // [2] = [AZL:AZH], [1] = [AYL:AYH], [0] = [AXL:AXH]
 4f0:	89 89       	ldd	r24, Y+17	; 0x11
 4f2:	9a 89       	ldd	r25, Y+18	; 0x12
 4f4:	93 83       	std	Z+3, r25	; 0x03
 4f6:	82 83       	std	Z+2, r24	; 0x02
        raw_data[5-i] = *(int*)&buffer[6+2*i];  // [5] = [GZL:GZH], [4] = [GYL:GYH], [3] = [GXL:GXH]
 4f8:	89 85       	ldd	r24, Y+9	; 0x09
 4fa:	9a 85       	ldd	r25, Y+10	; 0x0a
 4fc:	91 87       	std	Z+9, r25	; 0x09
 4fe:	80 87       	std	Z+8, r24	; 0x08
        raw_data[8-i] = *(int*)&buffer[2*i];    // [8] = [MZL:MZH], [7] = [MYL:MYH], [6] = [MXL:MXH]
 500:	8b 81       	ldd	r24, Y+3	; 0x03
 502:	9c 81       	ldd	r25, Y+4	; 0x04
 504:	97 87       	std	Z+15, r25	; 0x0f
 506:	86 87       	std	Z+14, r24	; 0x0e
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
    }
    // buffer: [MZL, MZH, MYL, MYH, MXL, MXH, GZL, GZH, GYL, GYH, GXL, GXH, TL, TH, AZL, AZH, AYL, AYH, AXL, AXH]
    for(i=0;i<3;i++)
    {
        raw_data[2-i] = *(int*)&buffer[14+2*i]; // [2] = [AZL:AZH], [1] = [AYL:AYH], [0] = [AXL:AXH]
 508:	8b 89       	ldd	r24, Y+19	; 0x13
 50a:	9c 89       	ldd	r25, Y+20	; 0x14
 50c:	91 83       	std	Z+1, r25	; 0x01
 50e:	80 83       	st	Z, r24
        raw_data[5-i] = *(int*)&buffer[6+2*i];  // [5] = [GZL:GZH], [4] = [GYL:GYH], [3] = [GXL:GXH]
 510:	8b 85       	ldd	r24, Y+11	; 0x0b
 512:	9c 85       	ldd	r25, Y+12	; 0x0c
 514:	97 83       	std	Z+7, r25	; 0x07
 516:	86 83       	std	Z+6, r24	; 0x06
        raw_data[8-i] = *(int*)&buffer[2*i];    // [8] = [MZL:MZH], [7] = [MYL:MYH], [6] = [MXL:MXH]
 518:	8d 81       	ldd	r24, Y+5	; 0x05
 51a:	9e 81       	ldd	r25, Y+6	; 0x06
 51c:	95 87       	std	Z+13, r25	; 0x0d
 51e:	84 87       	std	Z+12, r24	; 0x0c
    }
    return 1;
}
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	64 96       	adiw	r28, 0x14	; 20
 524:	0f b6       	in	r0, 0x3f	; 63
 526:	f8 94       	cli
 528:	de bf       	out	0x3e, r29	; 62
 52a:	0f be       	out	0x3f, r0	; 63
 52c:	cd bf       	out	0x3d, r28	; 61
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	1f 91       	pop	r17
 534:	ff 90       	pop	r15
 536:	ef 90       	pop	r14
 538:	df 90       	pop	r13
 53a:	cf 90       	pop	r12
 53c:	08 95       	ret

0000053e <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
 544:	80 ea       	ldi	r24, 0xA0	; 160
 546:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
 54a:	82 e1       	ldi	r24, 0x12	; 18
 54c:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 54e:	09 b4       	in	r0, 0x29	; 41
 550:	00 fe       	sbrs	r0, 0
 552:	fd cf       	rjmp	.-6      	; 0x54e <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
 554:	80 e9       	ldi	r24, 0x90	; 144
 556:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
 55a:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
 55e:	10 92 20 01 	sts	0x0120, r1
	cdc_line_rtsdtr = 0;
 562:	10 92 1e 01 	sts	0x011E, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 566:	8c e0       	ldi	r24, 0x0C	; 12
 568:	80 93 e2 00 	sts	0x00E2, r24
	sei();
 56c:	78 94       	sei
 56e:	08 95       	ret

00000570 <m_usb_isconnected>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
char m_usb_isconnected(void)
{
	return (char)usb_configuration;
 570:	80 91 20 01 	lds	r24, 0x0120
}
 574:	08 95       	ret

00000576 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 576:	1f 92       	push	r1
 578:	0f 92       	push	r0
 57a:	0f b6       	in	r0, 0x3f	; 63
 57c:	0f 92       	push	r0
 57e:	11 24       	eor	r1, r1
 580:	8f 93       	push	r24
 582:	9f 93       	push	r25
 584:	ef 93       	push	r30
 586:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
 588:	e1 ee       	ldi	r30, 0xE1	; 225
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	80 81       	ld	r24, Z
        UDINT = 0;
 58e:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
 590:	83 ff       	sbrs	r24, 3
 592:	11 c0       	rjmp	.+34     	; 0x5b6 <__vector_10+0x40>
		UENUM = 0;
 594:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
 59e:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 5a2:	92 e1       	ldi	r25, 0x12	; 18
 5a4:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
 5a8:	98 e0       	ldi	r25, 0x08	; 8
 5aa:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
 5ae:	10 92 20 01 	sts	0x0120, r1
		cdc_line_rtsdtr = 0;
 5b2:	10 92 1e 01 	sts	0x011E, r1
        }
	if (intbits & (1<<SOFI)) {
 5b6:	82 ff       	sbrs	r24, 2
 5b8:	13 c0       	rjmp	.+38     	; 0x5e0 <__vector_10+0x6a>
		if (usb_configuration) {
 5ba:	80 91 20 01 	lds	r24, 0x0120
 5be:	88 23       	and	r24, r24
 5c0:	79 f0       	breq	.+30     	; 0x5e0 <__vector_10+0x6a>
			t = transmit_flush_timer;
 5c2:	80 91 1f 01 	lds	r24, 0x011F
			if (t) {
 5c6:	88 23       	and	r24, r24
 5c8:	59 f0       	breq	.+22     	; 0x5e0 <__vector_10+0x6a>
				transmit_flush_timer = --t;
 5ca:	81 50       	subi	r24, 0x01	; 1
 5cc:	80 93 1f 01 	sts	0x011F, r24
				if (!t) {
 5d0:	81 11       	cpse	r24, r1
 5d2:	06 c0       	rjmp	.+12     	; 0x5e0 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
 5d4:	84 e0       	ldi	r24, 0x04	; 4
 5d6:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
 5da:	8a e3       	ldi	r24, 0x3A	; 58
 5dc:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 5e0:	ff 91       	pop	r31
 5e2:	ef 91       	pop	r30
 5e4:	9f 91       	pop	r25
 5e6:	8f 91       	pop	r24
 5e8:	0f 90       	pop	r0
 5ea:	0f be       	out	0x3f, r0	; 63
 5ec:	0f 90       	pop	r0
 5ee:	1f 90       	pop	r1
 5f0:	18 95       	reti

000005f2 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 5f2:	1f 92       	push	r1
 5f4:	0f 92       	push	r0
 5f6:	0f b6       	in	r0, 0x3f	; 63
 5f8:	0f 92       	push	r0
 5fa:	11 24       	eor	r1, r1
 5fc:	0f 93       	push	r16
 5fe:	1f 93       	push	r17
 600:	2f 93       	push	r18
 602:	3f 93       	push	r19
 604:	4f 93       	push	r20
 606:	5f 93       	push	r21
 608:	6f 93       	push	r22
 60a:	7f 93       	push	r23
 60c:	8f 93       	push	r24
 60e:	9f 93       	push	r25
 610:	af 93       	push	r26
 612:	bf 93       	push	r27
 614:	cf 93       	push	r28
 616:	df 93       	push	r29
 618:	ef 93       	push	r30
 61a:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 61c:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 620:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 624:	83 ff       	sbrs	r24, 3
 626:	4c c1       	rjmp	.+664    	; 0x8c0 <__vector_11+0x2ce>
                bmRequestType = UEDATX;
 628:	e1 ef       	ldi	r30, 0xF1	; 241
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	60 81       	ld	r22, Z
                bRequest = UEDATX;
 62e:	80 81       	ld	r24, Z
                wValue = UEDATX;
 630:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
 632:	90 81       	ld	r25, Z
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	39 2b       	or	r19, r25
                wIndex = UEDATX;
 638:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
 63a:	90 81       	ld	r25, Z
 63c:	50 e0       	ldi	r21, 0x00	; 0
 63e:	59 2b       	or	r21, r25
                wLength = UEDATX;
 640:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
 642:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 644:	92 ef       	ldi	r25, 0xF2	; 242
 646:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
 64a:	86 30       	cpi	r24, 0x06	; 6
 64c:	09 f0       	breq	.+2      	; 0x650 <__vector_11+0x5e>
 64e:	58 c0       	rjmp	.+176    	; 0x700 <__vector_11+0x10e>
 650:	04 c0       	rjmp	.+8      	; 0x65a <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 652:	81 e2       	ldi	r24, 0x21	; 33
 654:	80 93 eb 00 	sts	0x00EB, r24
					return;
 658:	3a c1       	rjmp	.+628    	; 0x8ce <__vector_11+0x2dc>
 65a:	66 e0       	ldi	r22, 0x06	; 6
 65c:	8c ea       	ldi	r24, 0xAC	; 172
 65e:	90 e0       	ldi	r25, 0x00	; 0
				}
				desc_val = pgm_read_word(list);
 660:	fc 01       	movw	r30, r24
 662:	a5 91       	lpm	r26, Z+
 664:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
 666:	2a 17       	cp	r18, r26
 668:	3b 07       	cpc	r19, r27
 66a:	11 f0       	breq	.+4      	; 0x670 <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
 66c:	07 96       	adiw	r24, 0x07	; 7
					continue;
 66e:	23 c0       	rjmp	.+70     	; 0x6b6 <__vector_11+0xc4>
				}
				list += 2;
 670:	fc 01       	movw	r30, r24
 672:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
 674:	a5 91       	lpm	r26, Z+
 676:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
 678:	4a 17       	cp	r20, r26
 67a:	5b 07       	cpc	r21, r27
 67c:	11 f0       	breq	.+4      	; 0x682 <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
 67e:	07 96       	adiw	r24, 0x07	; 7
					continue;
 680:	1a c0       	rjmp	.+52     	; 0x6b6 <__vector_11+0xc4>
				}
				list += 2;
 682:	fc 01       	movw	r30, r24
 684:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 686:	45 91       	lpm	r20, Z+
 688:	54 91       	lpm	r21, Z
				list += 2;
 68a:	fc 01       	movw	r30, r24
 68c:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 68e:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
 690:	87 2f       	mov	r24, r23
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 696:	8f 3f       	cpi	r24, 0xFF	; 255
 698:	91 05       	cpc	r25, r1
 69a:	19 f0       	breq	.+6      	; 0x6a2 <__vector_11+0xb0>
 69c:	10 f0       	brcs	.+4      	; 0x6a2 <__vector_11+0xb0>
 69e:	8f ef       	ldi	r24, 0xFF	; 255
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	82 17       	cp	r24, r18
 6a4:	08 f4       	brcc	.+2      	; 0x6a8 <__vector_11+0xb6>
 6a6:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 6a8:	a8 ee       	ldi	r26, 0xE8	; 232
 6aa:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 6ac:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6ae:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
 6b0:	c1 ef       	ldi	r28, 0xF1	; 241
 6b2:	d0 e0       	ldi	r29, 0x00	; 0
 6b4:	03 c0       	rjmp	.+6      	; 0x6bc <__vector_11+0xca>
 6b6:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 6b8:	99 f6       	brne	.-90     	; 0x660 <__vector_11+0x6e>
 6ba:	cb cf       	rjmp	.-106    	; 0x652 <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 6bc:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 6be:	98 2f       	mov	r25, r24
 6c0:	95 70       	andi	r25, 0x05	; 5
 6c2:	e1 f3       	breq	.-8      	; 0x6bc <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
 6c4:	82 fd       	sbrc	r24, 2
 6c6:	03 c1       	rjmp	.+518    	; 0x8ce <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 6c8:	32 2f       	mov	r19, r18
 6ca:	21 31       	cpi	r18, 0x11	; 17
 6cc:	08 f0       	brcs	.+2      	; 0x6d0 <__vector_11+0xde>
 6ce:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
 6d0:	33 23       	and	r19, r19
 6d2:	09 f4       	brne	.+2      	; 0x6d6 <__vector_11+0xe4>
 6d4:	f9 c0       	rjmp	.+498    	; 0x8c8 <__vector_11+0x2d6>
 6d6:	fa 01       	movw	r30, r20
 6d8:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
 6da:	94 91       	lpm	r25, Z
 6dc:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 6de:	81 50       	subi	r24, 0x01	; 1
 6e0:	31 96       	adiw	r30, 0x01	; 1
 6e2:	81 11       	cpse	r24, r1
 6e4:	fa cf       	rjmp	.-12     	; 0x6da <__vector_11+0xe8>
 6e6:	8f ef       	ldi	r24, 0xFF	; 255
 6e8:	83 0f       	add	r24, r19
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	01 96       	adiw	r24, 0x01	; 1
 6ee:	48 0f       	add	r20, r24
 6f0:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 6f2:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6f4:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 6f6:	21 11       	cpse	r18, r1
 6f8:	e1 cf       	rjmp	.-62     	; 0x6bc <__vector_11+0xca>
 6fa:	30 31       	cpi	r19, 0x10	; 16
 6fc:	f9 f2       	breq	.-66     	; 0x6bc <__vector_11+0xca>
 6fe:	e7 c0       	rjmp	.+462    	; 0x8ce <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 700:	85 30       	cpi	r24, 0x05	; 5
 702:	61 f4       	brne	.+24     	; 0x71c <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 704:	8e ef       	ldi	r24, 0xFE	; 254
 706:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 70a:	e8 ee       	ldi	r30, 0xE8	; 232
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	80 81       	ld	r24, Z
 710:	80 ff       	sbrs	r24, 0
 712:	fd cf       	rjmp	.-6      	; 0x70e <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 714:	20 68       	ori	r18, 0x80	; 128
 716:	20 93 e3 00 	sts	0x00E3, r18
			return;
 71a:	d9 c0       	rjmp	.+434    	; 0x8ce <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 71c:	89 30       	cpi	r24, 0x09	; 9
 71e:	09 f0       	breq	.+2      	; 0x722 <__vector_11+0x130>
 720:	35 c0       	rjmp	.+106    	; 0x78c <__vector_11+0x19a>
 722:	61 11       	cpse	r22, r1
 724:	cd c0       	rjmp	.+410    	; 0x8c0 <__vector_11+0x2ce>
			usb_configuration = wValue;
 726:	20 93 20 01 	sts	0x0120, r18
			cdc_line_rtsdtr = 0;
 72a:	10 92 1e 01 	sts	0x011E, r1
			transmit_flush_timer = 0;
 72e:	10 92 1f 01 	sts	0x011F, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 732:	8e ef       	ldi	r24, 0xFE	; 254
 734:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 738:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
 73a:	25 e5       	ldi	r18, 0x55	; 85
 73c:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
 73e:	c9 ee       	ldi	r28, 0xE9	; 233
 740:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
 742:	ab ee       	ldi	r26, 0xEB	; 235
 744:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
 746:	0c ee       	ldi	r16, 0xEC	; 236
 748:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
 74a:	6d ee       	ldi	r22, 0xED	; 237
 74c:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 74e:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
 750:	a9 01       	movw	r20, r18
 752:	4f 5f       	subi	r20, 0xFF	; 255
 754:	5f 4f       	sbci	r21, 0xFF	; 255
 756:	f9 01       	movw	r30, r18
 758:	94 91       	lpm	r25, Z
				UECONX = en;
 75a:	9c 93       	st	X, r25
				if (en) {
 75c:	99 23       	and	r25, r25
 75e:	61 f0       	breq	.+24     	; 0x778 <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
 760:	fa 01       	movw	r30, r20
 762:	44 91       	lpm	r20, Z
 764:	f8 01       	movw	r30, r16
 766:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
 768:	f9 01       	movw	r30, r18
 76a:	32 96       	adiw	r30, 0x02	; 2
 76c:	94 91       	lpm	r25, Z
 76e:	2d 5f       	subi	r18, 0xFD	; 253
 770:	3f 4f       	sbci	r19, 0xFF	; 255
 772:	fb 01       	movw	r30, r22
 774:	90 83       	st	Z, r25
 776:	01 c0       	rjmp	.+2      	; 0x77a <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
 778:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 77a:	8f 5f       	subi	r24, 0xFF	; 255
 77c:	85 30       	cpi	r24, 0x05	; 5
 77e:	39 f7       	brne	.-50     	; 0x74e <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 780:	ea ee       	ldi	r30, 0xEA	; 234
 782:	f0 e0       	ldi	r31, 0x00	; 0
 784:	8e e1       	ldi	r24, 0x1E	; 30
 786:	80 83       	st	Z, r24
        		UERST = 0;
 788:	10 82       	st	Z, r1
			return;
 78a:	a1 c0       	rjmp	.+322    	; 0x8ce <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 78c:	88 30       	cpi	r24, 0x08	; 8
 78e:	81 f4       	brne	.+32     	; 0x7b0 <__vector_11+0x1be>
 790:	60 38       	cpi	r22, 0x80	; 128
 792:	09 f0       	breq	.+2      	; 0x796 <__vector_11+0x1a4>
 794:	95 c0       	rjmp	.+298    	; 0x8c0 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 796:	e8 ee       	ldi	r30, 0xE8	; 232
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	80 81       	ld	r24, Z
 79c:	80 ff       	sbrs	r24, 0
 79e:	fd cf       	rjmp	.-6      	; 0x79a <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 7a0:	80 91 20 01 	lds	r24, 0x0120
 7a4:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 7a8:	8e ef       	ldi	r24, 0xFE	; 254
 7aa:	80 93 e8 00 	sts	0x00E8, r24
 7ae:	8f c0       	rjmp	.+286    	; 0x8ce <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 7b0:	81 32       	cpi	r24, 0x21	; 33
 7b2:	b9 f4       	brne	.+46     	; 0x7e2 <__vector_11+0x1f0>
 7b4:	61 3a       	cpi	r22, 0xA1	; 161
 7b6:	09 f0       	breq	.+2      	; 0x7ba <__vector_11+0x1c8>
 7b8:	83 c0       	rjmp	.+262    	; 0x8c0 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 7ba:	e8 ee       	ldi	r30, 0xE8	; 232
 7bc:	f0 e0       	ldi	r31, 0x00	; 0
 7be:	80 81       	ld	r24, Z
 7c0:	80 ff       	sbrs	r24, 0
 7c2:	fd cf       	rjmp	.-6      	; 0x7be <__vector_11+0x1cc>
 7c4:	e0 e0       	ldi	r30, 0x00	; 0
 7c6:	f1 e0       	ldi	r31, 0x01	; 1
 7c8:	27 e0       	ldi	r18, 0x07	; 7
 7ca:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 7cc:	a1 ef       	ldi	r26, 0xF1	; 241
 7ce:	b0 e0       	ldi	r27, 0x00	; 0
 7d0:	81 91       	ld	r24, Z+
 7d2:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 7d4:	e2 17       	cp	r30, r18
 7d6:	f3 07       	cpc	r31, r19
 7d8:	d9 f7       	brne	.-10     	; 0x7d0 <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 7da:	8e ef       	ldi	r24, 0xFE	; 254
 7dc:	80 93 e8 00 	sts	0x00E8, r24
 7e0:	76 c0       	rjmp	.+236    	; 0x8ce <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 7e2:	80 32       	cpi	r24, 0x20	; 32
 7e4:	d1 f4       	brne	.+52     	; 0x81a <__vector_11+0x228>
 7e6:	61 32       	cpi	r22, 0x21	; 33
 7e8:	09 f0       	breq	.+2      	; 0x7ec <__vector_11+0x1fa>
 7ea:	6a c0       	rjmp	.+212    	; 0x8c0 <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 7ec:	e8 ee       	ldi	r30, 0xE8	; 232
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	80 81       	ld	r24, Z
 7f2:	82 ff       	sbrs	r24, 2
 7f4:	fd cf       	rjmp	.-6      	; 0x7f0 <__vector_11+0x1fe>
 7f6:	e0 e0       	ldi	r30, 0x00	; 0
 7f8:	f1 e0       	ldi	r31, 0x01	; 1
 7fa:	27 e0       	ldi	r18, 0x07	; 7
 7fc:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 7fe:	a1 ef       	ldi	r26, 0xF1	; 241
 800:	b0 e0       	ldi	r27, 0x00	; 0
 802:	8c 91       	ld	r24, X
 804:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 806:	e2 17       	cp	r30, r18
 808:	f3 07       	cpc	r31, r19
 80a:	d9 f7       	brne	.-10     	; 0x802 <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 80c:	e8 ee       	ldi	r30, 0xE8	; 232
 80e:	f0 e0       	ldi	r31, 0x00	; 0
 810:	8b ef       	ldi	r24, 0xFB	; 251
 812:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 814:	8e ef       	ldi	r24, 0xFE	; 254
 816:	80 83       	st	Z, r24
 818:	5a c0       	rjmp	.+180    	; 0x8ce <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 81a:	82 32       	cpi	r24, 0x22	; 34
 81c:	71 f4       	brne	.+28     	; 0x83a <__vector_11+0x248>
 81e:	61 32       	cpi	r22, 0x21	; 33
 820:	09 f0       	breq	.+2      	; 0x824 <__vector_11+0x232>
 822:	4e c0       	rjmp	.+156    	; 0x8c0 <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
 824:	20 93 1e 01 	sts	0x011E, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 828:	e8 ee       	ldi	r30, 0xE8	; 232
 82a:	f0 e0       	ldi	r31, 0x00	; 0
 82c:	80 81       	ld	r24, Z
 82e:	80 ff       	sbrs	r24, 0
 830:	fd cf       	rjmp	.-6      	; 0x82c <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 832:	8e ef       	ldi	r24, 0xFE	; 254
 834:	80 93 e8 00 	sts	0x00E8, r24
 838:	4a c0       	rjmp	.+148    	; 0x8ce <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 83a:	81 11       	cpse	r24, r1
 83c:	1a c0       	rjmp	.+52     	; 0x872 <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 83e:	e8 ee       	ldi	r30, 0xE8	; 232
 840:	f0 e0       	ldi	r31, 0x00	; 0
 842:	80 81       	ld	r24, Z
 844:	80 ff       	sbrs	r24, 0
 846:	fd cf       	rjmp	.-6      	; 0x842 <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 848:	62 38       	cpi	r22, 0x82	; 130
 84a:	51 f4       	brne	.+20     	; 0x860 <__vector_11+0x26e>
				UENUM = wIndex;
 84c:	e9 ee       	ldi	r30, 0xE9	; 233
 84e:	f0 e0       	ldi	r31, 0x00	; 0
 850:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
 852:	80 91 eb 00 	lds	r24, 0x00EB
 856:	85 fb       	bst	r24, 5
 858:	88 27       	eor	r24, r24
 85a:	80 f9       	bld	r24, 0
				UENUM = 0;
 85c:	10 82       	st	Z, r1
 85e:	01 c0       	rjmp	.+2      	; 0x862 <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 860:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 862:	e1 ef       	ldi	r30, 0xF1	; 241
 864:	f0 e0       	ldi	r31, 0x00	; 0
 866:	80 83       	st	Z, r24
			UEDATX = 0;
 868:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 86a:	8e ef       	ldi	r24, 0xFE	; 254
 86c:	80 93 e8 00 	sts	0x00E8, r24
 870:	2e c0       	rjmp	.+92     	; 0x8ce <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 872:	98 2f       	mov	r25, r24
 874:	9d 7f       	andi	r25, 0xFD	; 253
 876:	91 30       	cpi	r25, 0x01	; 1
 878:	19 f5       	brne	.+70     	; 0x8c0 <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
 87a:	62 30       	cpi	r22, 0x02	; 2
 87c:	09 f5       	brne	.+66     	; 0x8c0 <__vector_11+0x2ce>
 87e:	23 2b       	or	r18, r19
 880:	f9 f4       	brne	.+62     	; 0x8c0 <__vector_11+0x2ce>
			i = wIndex & 0x7F;
 882:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 884:	9f ef       	ldi	r25, 0xFF	; 255
 886:	94 0f       	add	r25, r20
 888:	94 30       	cpi	r25, 0x04	; 4
 88a:	d0 f4       	brcc	.+52     	; 0x8c0 <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 88c:	9e ef       	ldi	r25, 0xFE	; 254
 88e:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 892:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
 896:	83 30       	cpi	r24, 0x03	; 3
 898:	21 f4       	brne	.+8      	; 0x8a2 <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
 89a:	81 e2       	ldi	r24, 0x21	; 33
 89c:	80 93 eb 00 	sts	0x00EB, r24
 8a0:	16 c0       	rjmp	.+44     	; 0x8ce <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 8a2:	89 e1       	ldi	r24, 0x19	; 25
 8a4:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 8a8:	81 e0       	ldi	r24, 0x01	; 1
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <__vector_11+0x2c0>
 8ae:	88 0f       	add	r24, r24
 8b0:	99 1f       	adc	r25, r25
 8b2:	4a 95       	dec	r20
 8b4:	e2 f7       	brpl	.-8      	; 0x8ae <__vector_11+0x2bc>
 8b6:	ea ee       	ldi	r30, 0xEA	; 234
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
 8ba:	80 83       	st	Z, r24
					UERST = 0;
 8bc:	10 82       	st	Z, r1
 8be:	07 c0       	rjmp	.+14     	; 0x8ce <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 8c0:	81 e2       	ldi	r24, 0x21	; 33
 8c2:	80 93 eb 00 	sts	0x00EB, r24
 8c6:	03 c0       	rjmp	.+6      	; 0x8ce <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 8c8:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 8ca:	21 11       	cpse	r18, r1
 8cc:	f7 ce       	rjmp	.-530    	; 0x6bc <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 8ce:	ff 91       	pop	r31
 8d0:	ef 91       	pop	r30
 8d2:	df 91       	pop	r29
 8d4:	cf 91       	pop	r28
 8d6:	bf 91       	pop	r27
 8d8:	af 91       	pop	r26
 8da:	9f 91       	pop	r25
 8dc:	8f 91       	pop	r24
 8de:	7f 91       	pop	r23
 8e0:	6f 91       	pop	r22
 8e2:	5f 91       	pop	r21
 8e4:	4f 91       	pop	r20
 8e6:	3f 91       	pop	r19
 8e8:	2f 91       	pop	r18
 8ea:	1f 91       	pop	r17
 8ec:	0f 91       	pop	r16
 8ee:	0f 90       	pop	r0
 8f0:	0f be       	out	0x3f, r0	; 63
 8f2:	0f 90       	pop	r0
 8f4:	1f 90       	pop	r1
 8f6:	18 95       	reti

000008f8 <_exit>:
 8f8:	f8 94       	cli

000008fa <__stop_program>:
 8fa:	ff cf       	rjmp	.-2      	; 0x8fa <__stop_program>
